AdvancedOptions#continueExecution()
AdvancedOptions#enableJavadoc()
AdvancedOptions#preserveUnusedVars()
AnnotationProcessingOptions#processors(java.lang.String)
AnnotationProcessingOptions#processors(java.lang.String[])
AnnotationProcessingOptions#runProcessors()
AnnotationProcessingOptions#compileProcessors()
ClasspathOptions#classpath(java.lang.String)
ClasspathOptions#classpath(java.lang.String[])
ClasspathOptions#bootclasspath(java.lang.String)
ClasspathOptions#bootclasspath(java.lang.String[])
ClasspathOptions#binaries(java.lang.String)
ClasspathOptions#binaries(java.io.File)
ClasspathOptions#encoding(java.lang.String)
ComplianceOptions#compliance(int)
JDTBuilder#classpathOptions(spoon.compiler.builder.ClasspathOptions)
JDTBuilder#complianceOptions(spoon.compiler.builder.ComplianceOptions)
JDTBuilder#annotationProcessingOptions(spoon.compiler.builder.AnnotationProcessingOptions)
JDTBuilder#advancedOptions(spoon.compiler.builder.AdvancedOptions)
JDTBuilder#sources(spoon.compiler.builder.SourceOptions)
JDTBuilder#build()
JDTBuilderImpl#classpathOptions(spoon.compiler.builder.ClasspathOptions)
JDTBuilderImpl#complianceOptions(spoon.compiler.builder.ComplianceOptions)
JDTBuilderImpl#annotationProcessingOptions(spoon.compiler.builder.AnnotationProcessingOptions)
JDTBuilderImpl#advancedOptions(spoon.compiler.builder.AdvancedOptions)
JDTBuilderImpl#sources(spoon.compiler.builder.SourceOptions)
JDTBuilderImpl#build()
Options#build()
SourceOptions#sources(java.lang.String)
SourceOptions#sources(java.lang.String[])
SourceOptions#sources(java.util.List)
Environment#getComplianceLevel()
Environment#setComplianceLevel(int)
Environment#debugMessage(java.lang.String)
Environment#getDefaultFileGenerator()
Environment#getManager()
Environment#getProcessorProperties(java.lang.String)
Environment#setProcessorProperties(java.lang.String,spoon.processing.ProcessorProperties)
Environment#isAutoImports()
Environment#isProcessingStopped()
Environment#report(spoon.processing.Processor,org.apache.log4j.Level,spoon.reflect.declaration.CtElement,java.lang.String)
Environment#report(spoon.processing.Processor,org.apache.log4j.Level,spoon.reflect.declaration.CtElement,java.lang.String,spoon.processing.ProblemFixer[])
Environment#report(spoon.processing.Processor,org.apache.log4j.Level,java.lang.String)
Environment#reportEnd()
Environment#reportProgressMessage(java.lang.String)
Environment#setDefaultFileGenerator(spoon.processing.FileGenerator)
Environment#setManager(spoon.processing.ProcessingManager)
Environment#setProcessingStopped(boolean)
Environment#getTabulationSize()
Environment#setTabulationSize(int)
Environment#isUsingTabulations()
Environment#useTabulations(boolean)
Environment#setAutoImports(boolean)
Environment#getErrorCount()
Environment#getWarningCount()
Environment#getInputClassLoader()
Environment#setInputClassLoader(java.lang.ClassLoader)
Environment#setPreserveLineNumbers(boolean)
Environment#isPreserveLineNumbers()
Environment#getSourceClasspath()
Environment#setSourceClasspath(java.lang.String[])
Environment#setNoClasspath(boolean)
Environment#getNoClasspath()
Environment#isCopyResources()
Environment#setCopyResources(boolean)
Environment#isCommentsEnabled()
Environment#setCommentEnabled(boolean)
Environment#getLevel()
Environment#setLevel(java.lang.String)
Environment#shouldCompile()
Environment#setShouldCompile(boolean)
Environment#checksAreSkipped()
Environment#setSelfChecks(boolean)
Environment#disableConsistencyChecks()
Environment#setBinaryOutputDirectory(java.lang.String)
Environment#getBinaryOutputDirectory()
Environment#setSourceOutputDirectory(java.io.File)
Environment#getSourceOutputDirectory()
Environment#setOutputDestinationHandler(spoon.support.OutputDestinationHandler)
Environment#getOutputDestinationHandler()
Environment#getModelChangeListener()
Environment#setModelChangeListener(spoon.experimental.modelobs.FineModelChangeListener)
Environment#getEncoding()
Environment#setEncoding(java.nio.charset.Charset)
Environment#setOutputType(spoon.OutputType)
Environment#getOutputType()
Environment#getSpoonProgress()
Environment#setSpoonProgress(spoon.support.compiler.SpoonProgress)
SpoonFile#getContent()
SpoonFile#isJava()
SpoonFile#isActualFile()
SpoonFolder#getFiles()
SpoonFolder#getAllFiles()
SpoonFolder#getAllJavaFiles()
SpoonFolder#getSubFolders()
SpoonFolder#addFile(spoon.compiler.SpoonFile)
SpoonFolder#addFolder(spoon.compiler.SpoonFolder)
SpoonResource#getParent()
SpoonResource#getName()
SpoonResource#isFile()
SpoonResource#isArchive()
SpoonResource#getPath()
SpoonResource#getFileSystemParent()
SpoonResource#toFile()
SpoonResourceHelper#isArchive(java.io.File)
SpoonResourceHelper#isFile(java.io.File)
SpoonResourceHelper#resources(java.lang.String[])
SpoonResourceHelper#createFile(java.io.File)
SpoonResourceHelper#createResource(java.io.File)
SpoonResourceHelper#createFolder(java.io.File)
Action#getChangedValue()
Action#getContext()
AddAction#getChangedValue()
AddAction#getNewValue()
DeleteAction#getChangedValue()
DeleteAction#getRemovedValue()
UpdateAction#getChangedValue()
UpdateAction#getNewValue()
UpdateAction#getOldValue()
Context#getElementWhereChangeHappens()
Context#getChangedProperty()
ListContext#getPosition()
MapContext#getKey()
MapContext#getMap()
ActionBasedChangeListener#onDelete(spoon.experimental.modelobs.action.DeleteAction)
ActionBasedChangeListener#onDeleteAll(spoon.experimental.modelobs.action.DeleteAllAction)
ActionBasedChangeListener#onAdd(spoon.experimental.modelobs.action.AddAction)
ActionBasedChangeListener#onUpdate(spoon.experimental.modelobs.action.UpdateAction)
ActionBasedChangeListener#onAction(spoon.experimental.modelobs.action.Action)
ActionBasedChangeListenerImpl#onObjectUpdate(spoon.reflect.declaration.CtElement,spoon.reflect.path.CtRole,spoon.reflect.declaration.CtElement,spoon.reflect.declaration.CtElement)
ActionBasedChangeListenerImpl#onObjectUpdate(spoon.reflect.declaration.CtElement,spoon.reflect.path.CtRole,java.lang.Object,java.lang.Object)
ActionBasedChangeListenerImpl#onObjectDelete(spoon.reflect.declaration.CtElement,spoon.reflect.path.CtRole,spoon.reflect.declaration.CtElement)
ActionBasedChangeListenerImpl#onListAdd(spoon.reflect.declaration.CtElement,spoon.reflect.path.CtRole,java.util.List,spoon.reflect.declaration.CtElement)
ActionBasedChangeListenerImpl#onListAdd(spoon.reflect.declaration.CtElement,spoon.reflect.path.CtRole,java.util.List,int,spoon.reflect.declaration.CtElement)
ActionBasedChangeListenerImpl#onListDelete(spoon.reflect.declaration.CtElement,spoon.reflect.path.CtRole,java.util.List,java.util.Collection)
ActionBasedChangeListenerImpl#onListDelete(spoon.reflect.declaration.CtElement,spoon.reflect.path.CtRole,java.util.List,int,spoon.reflect.declaration.CtElement)
ActionBasedChangeListenerImpl#onListDeleteAll(spoon.reflect.declaration.CtElement,spoon.reflect.path.CtRole,java.util.List,java.util.List)
ActionBasedChangeListenerImpl#onMapAdd(spoon.reflect.declaration.CtElement,spoon.reflect.path.CtRole,java.util.Map,K,spoon.reflect.declaration.CtElement)
ActionBasedChangeListenerImpl#onMapDeleteAll(spoon.reflect.declaration.CtElement,spoon.reflect.path.CtRole,java.util.Map,java.util.Map)
ActionBasedChangeListenerImpl#onSetAdd(spoon.reflect.declaration.CtElement,spoon.reflect.path.CtRole,java.util.Set,spoon.reflect.declaration.CtElement)
ActionBasedChangeListenerImpl#onSetAdd(spoon.reflect.declaration.CtElement,spoon.reflect.path.CtRole,java.util.Set,T extends java.lang.Enum)
ActionBasedChangeListenerImpl#onSetDelete(spoon.reflect.declaration.CtElement,spoon.reflect.path.CtRole,java.util.Set,spoon.reflect.declaration.CtElement)
ActionBasedChangeListenerImpl#onSetDelete(spoon.reflect.declaration.CtElement,spoon.reflect.path.CtRole,java.util.Set,java.util.Collection)
ActionBasedChangeListenerImpl#onSetDelete(spoon.reflect.declaration.CtElement,spoon.reflect.path.CtRole,java.util.Set,spoon.reflect.declaration.ModifierKind)
ActionBasedChangeListenerImpl#onSetDeleteAll(spoon.reflect.declaration.CtElement,spoon.reflect.path.CtRole,java.util.Set,java.util.Set)
ActionBasedChangeListenerImpl#onDelete(spoon.experimental.modelobs.action.DeleteAction)
ActionBasedChangeListenerImpl#onDeleteAll(spoon.experimental.modelobs.action.DeleteAllAction)
ActionBasedChangeListenerImpl#onAdd(spoon.experimental.modelobs.action.AddAction)
ActionBasedChangeListenerImpl#onUpdate(spoon.experimental.modelobs.action.UpdateAction)
ActionBasedChangeListenerImpl#onAction(spoon.experimental.modelobs.action.Action)
ChangeCollector#getChangeCollector(spoon.compiler.Environment)
ChangeCollector#attachTo(spoon.compiler.Environment)
ChangeCollector#getDirectChanges(spoon.reflect.declaration.CtElement)
ChangeCollector#getChanges(spoon.reflect.declaration.CtElement)
EmptyModelChangeListener#onObjectUpdate(spoon.reflect.declaration.CtElement,spoon.reflect.path.CtRole,spoon.reflect.declaration.CtElement,spoon.reflect.declaration.CtElement)
EmptyModelChangeListener#onObjectUpdate(spoon.reflect.declaration.CtElement,spoon.reflect.path.CtRole,java.lang.Object,java.lang.Object)
EmptyModelChangeListener#onObjectDelete(spoon.reflect.declaration.CtElement,spoon.reflect.path.CtRole,spoon.reflect.declaration.CtElement)
EmptyModelChangeListener#onListAdd(spoon.reflect.declaration.CtElement,spoon.reflect.path.CtRole,java.util.List,spoon.reflect.declaration.CtElement)
EmptyModelChangeListener#onListAdd(spoon.reflect.declaration.CtElement,spoon.reflect.path.CtRole,java.util.List,int,spoon.reflect.declaration.CtElement)
EmptyModelChangeListener#onListDelete(spoon.reflect.declaration.CtElement,spoon.reflect.path.CtRole,java.util.List,java.util.Collection)
EmptyModelChangeListener#onListDelete(spoon.reflect.declaration.CtElement,spoon.reflect.path.CtRole,java.util.List,int,spoon.reflect.declaration.CtElement)
EmptyModelChangeListener#onListDeleteAll(spoon.reflect.declaration.CtElement,spoon.reflect.path.CtRole,java.util.List,java.util.List)
EmptyModelChangeListener#onMapAdd(spoon.reflect.declaration.CtElement,spoon.reflect.path.CtRole,java.util.Map,K,spoon.reflect.declaration.CtElement)
EmptyModelChangeListener#onMapDeleteAll(spoon.reflect.declaration.CtElement,spoon.reflect.path.CtRole,java.util.Map,java.util.Map)
EmptyModelChangeListener#onSetAdd(spoon.reflect.declaration.CtElement,spoon.reflect.path.CtRole,java.util.Set,spoon.reflect.declaration.CtElement)
EmptyModelChangeListener#onSetAdd(spoon.reflect.declaration.CtElement,spoon.reflect.path.CtRole,java.util.Set,T extends java.lang.Enum)
EmptyModelChangeListener#onSetDelete(spoon.reflect.declaration.CtElement,spoon.reflect.path.CtRole,java.util.Set,spoon.reflect.declaration.CtElement)
EmptyModelChangeListener#onSetDelete(spoon.reflect.declaration.CtElement,spoon.reflect.path.CtRole,java.util.Set,java.util.Collection)
EmptyModelChangeListener#onSetDelete(spoon.reflect.declaration.CtElement,spoon.reflect.path.CtRole,java.util.Set,spoon.reflect.declaration.ModifierKind)
EmptyModelChangeListener#onSetDeleteAll(spoon.reflect.declaration.CtElement,spoon.reflect.path.CtRole,java.util.Set,java.util.Set)
FineModelChangeListener#onObjectUpdate(spoon.reflect.declaration.CtElement,spoon.reflect.path.CtRole,spoon.reflect.declaration.CtElement,spoon.reflect.declaration.CtElement)
FineModelChangeListener#onObjectUpdate(spoon.reflect.declaration.CtElement,spoon.reflect.path.CtRole,java.lang.Object,java.lang.Object)
FineModelChangeListener#onObjectDelete(spoon.reflect.declaration.CtElement,spoon.reflect.path.CtRole,spoon.reflect.declaration.CtElement)
FineModelChangeListener#onListAdd(spoon.reflect.declaration.CtElement,spoon.reflect.path.CtRole,java.util.List,spoon.reflect.declaration.CtElement)
FineModelChangeListener#onListAdd(spoon.reflect.declaration.CtElement,spoon.reflect.path.CtRole,java.util.List,int,spoon.reflect.declaration.CtElement)
FineModelChangeListener#onListDelete(spoon.reflect.declaration.CtElement,spoon.reflect.path.CtRole,java.util.List,java.util.Collection)
FineModelChangeListener#onListDelete(spoon.reflect.declaration.CtElement,spoon.reflect.path.CtRole,java.util.List,int,spoon.reflect.declaration.CtElement)
FineModelChangeListener#onListDeleteAll(spoon.reflect.declaration.CtElement,spoon.reflect.path.CtRole,java.util.List,java.util.List)
FineModelChangeListener#onMapAdd(spoon.reflect.declaration.CtElement,spoon.reflect.path.CtRole,java.util.Map,K,spoon.reflect.declaration.CtElement)
FineModelChangeListener#onMapDeleteAll(spoon.reflect.declaration.CtElement,spoon.reflect.path.CtRole,java.util.Map,java.util.Map)
FineModelChangeListener#onSetAdd(spoon.reflect.declaration.CtElement,spoon.reflect.path.CtRole,java.util.Set,spoon.reflect.declaration.CtElement)
FineModelChangeListener#onSetAdd(spoon.reflect.declaration.CtElement,spoon.reflect.path.CtRole,java.util.Set,T extends java.lang.Enum)
FineModelChangeListener#onSetDelete(spoon.reflect.declaration.CtElement,spoon.reflect.path.CtRole,java.util.Set,spoon.reflect.declaration.CtElement)
FineModelChangeListener#onSetDelete(spoon.reflect.declaration.CtElement,spoon.reflect.path.CtRole,java.util.Set,java.util.Collection)
FineModelChangeListener#onSetDelete(spoon.reflect.declaration.CtElement,spoon.reflect.path.CtRole,java.util.Set,spoon.reflect.declaration.ModifierKind)
FineModelChangeListener#onSetDeleteAll(spoon.reflect.declaration.CtElement,spoon.reflect.path.CtRole,java.util.Set,java.util.Set)
NameFilter#matches(T extends spoon.reflect.declaration.CtNamedElement)
NameFilter#getType()
MMMethod#getActualCtMethod()
MMMethod#getName()
MMMethod#getSignature()
MMMethod#getKind()
MMMethod#overrides(spoon.reflect.declaration.CtMethod)
MMMethod#getProperty()
MMMethod#getOwner()
MMMethod#getDeclaredMethods()
MMMethod#getReturnType()
MMMethod#getValueType()
MMMethod#toString()
MMMethodKind#isMulti()
MMMethodKind#kindOf(spoon.reflect.declaration.CtMethod)
Metamodel#getAllMetamodelInterfaces()
Metamodel#getInstance()
Metamodel#getConcept(java.lang.Class)
Metamodel#getConcepts()
Metamodel#getAllInstantiableMetamodelInterfaces()
Metamodel#getConceptName(spoon.reflect.declaration.CtType)
Metamodel#getConceptName(java.lang.Class)
Metamodel#getImplementationOfInterface(spoon.reflect.declaration.CtInterface)
Metamodel#getInterfaceOfImplementation(spoon.reflect.declaration.CtClass)
Metamodel#getRoleOfMethod(spoon.reflect.declaration.CtMethod)
MetamodelConcept#getName()
MetamodelConcept#getKind()
MetamodelConcept#getRoleToProperty()
MetamodelConcept#getProperties()
MetamodelConcept#getProperty(spoon.reflect.path.CtRole)
MetamodelConcept#getSuperConcepts()
MetamodelConcept#getImplementationClass()
MetamodelConcept#getMetamodelInterface()
MetamodelConcept#toString()
MetamodelProperty#getName()
MetamodelProperty#getRole()
MetamodelProperty#getOwner()
MetamodelProperty#getContainerKind()
MetamodelProperty#getTypeOfField()
MetamodelProperty#getTypeofItems()
MetamodelProperty#getMethod(spoon.metamodel.MMMethodKind)
MetamodelProperty#getMethods(spoon.metamodel.MMMethodKind)
MetamodelProperty#isDerived()
MetamodelProperty#isUnsettable()
MetamodelProperty#toString()
MetamodelProperty#getSuperProperty()
MetamodelProperty#getRoleHandler()
MetamodelProperty#getValue(T)
MetamodelProperty#setValue(T,U)
ChainOfMatchersImpl#create(java.util.List,spoon.pattern.internal.matcher.Matchers)
ChainOfMatchersImpl#matchAllWith(spoon.pattern.internal.matcher.TobeMatched)
Matchers#matchAllWith(spoon.pattern.internal.matcher.TobeMatched)
MatchingScanner#scan(spoon.reflect.path.CtRole,spoon.reflect.declaration.CtElement)
MatchingScanner#scan(spoon.reflect.path.CtRole,java.util.Collection)
MatchingScanner#scan(spoon.reflect.path.CtRole,java.util.Map)
TobeMatched#create(spoon.support.util.ImmutableMap,spoon.reflect.meta.ContainerKind,java.lang.Object)
TobeMatched#getParameters()
TobeMatched#getTargets()
TobeMatched#getMatchedTargets(spoon.pattern.internal.matcher.TobeMatched)
TobeMatched#hasTargets()
TobeMatched#copyAndSetParams(spoon.support.util.ImmutableMap)
TobeMatched#matchNext(java.util.function.BiFunction)
TobeMatched#getMatchedParameters(spoon.pattern.internal.matcher.TobeMatched)
TobeMatched#removeTarget(int)
TobeMatched#removeTarget(spoon.support.util.ImmutableMap,int)
TobeMatched#toString()
AbstractNode#toString()
AbstractNode#isSimplifyGenerated()
AbstractNode#setSimplifyGenerated(boolean)
AbstractPrimitiveMatcher#matchAllWith(spoon.pattern.internal.matcher.TobeMatched)
AbstractRepeatableMatcher#matchTargets(spoon.pattern.internal.matcher.TobeMatched,spoon.pattern.internal.matcher.Matchers)
ConstantNode#getTemplateNode()
ConstantNode#replaceNode(spoon.pattern.internal.node.RootNode,spoon.pattern.internal.node.RootNode)
ConstantNode#forEachParameterInfo(java.util.function.BiConsumer)
ConstantNode#generateTargets(spoon.pattern.internal.DefaultGenerator,spoon.pattern.internal.ResultHolder,spoon.support.util.ImmutableMap)
ConstantNode#matchTarget(java.lang.Object,spoon.support.util.ImmutableMap)
ConstantNode#toString()
ConstantNode#getMatchingStrategy()
ConstantNode#isTryNextMatch(spoon.support.util.ImmutableMap)
ElementNode#create(spoon.reflect.declaration.CtElement,java.util.Map)
ElementNode#create(java.util.List,java.util.Map)
ElementNode#create(java.util.Set,java.util.Map)
ElementNode#create(java.util.Map,java.util.Map)
ElementNode#replaceNode(spoon.pattern.internal.node.RootNode,spoon.pattern.internal.node.RootNode)
ElementNode#getRoleToNode()
ElementNode#getNodeOfRole(spoon.reflect.path.CtRole)
ElementNode#setNodeOfRole(spoon.reflect.path.CtRole,spoon.pattern.internal.node.RootNode)
ElementNode#getOrCreateNodeOfRole(spoon.reflect.path.CtRole,java.util.Map)
ElementNode#getValueOfRole(spoon.reflect.path.CtRole,java.lang.Class)
ElementNode#forEachParameterInfo(java.util.function.BiConsumer)
ElementNode#generateTargets(spoon.pattern.internal.DefaultGenerator,spoon.pattern.internal.ResultHolder,spoon.support.util.ImmutableMap)
ElementNode#matchTarget(java.lang.Object,spoon.support.util.ImmutableMap)
ElementNode#toString()
ElementNode#getElementType()
ElementNode#setElementType(spoon.metamodel.MetamodelConcept)
ElementNode#getMatchingStrategy()
ElementNode#isTryNextMatch(spoon.support.util.ImmutableMap)
ForEachNode#replaceNode(spoon.pattern.internal.node.RootNode,spoon.pattern.internal.node.RootNode)
ForEachNode#generateTargets(spoon.pattern.internal.DefaultGenerator,spoon.pattern.internal.ResultHolder,spoon.support.util.ImmutableMap)
ForEachNode#getMatchingStrategy()
ForEachNode#matchAllWith(spoon.pattern.internal.matcher.TobeMatched)
ForEachNode#forEachParameterInfo(java.util.function.BiConsumer)
ForEachNode#setNestedModel(spoon.pattern.internal.node.RootNode)
ForEachNode#setIterableParameter(spoon.pattern.internal.node.PrimitiveMatcher)
ForEachNode#setLocalParameter(spoon.pattern.internal.parameter.ParameterInfo)
ForEachNode#isRepeatable()
ForEachNode#isMandatory(spoon.support.util.ImmutableMap)
ForEachNode#isTryNextMatch(spoon.support.util.ImmutableMap)
ForEachNode#generateInlineTargets(spoon.pattern.internal.DefaultGenerator,spoon.pattern.internal.ResultHolder,spoon.support.util.ImmutableMap)
InlineNode#generateInlineTargets(spoon.pattern.internal.DefaultGenerator,spoon.pattern.internal.ResultHolder,spoon.support.util.ImmutableMap)
ListOfNodes#forEachParameterInfo(java.util.function.BiConsumer)
ListOfNodes#generateTargets(spoon.pattern.internal.DefaultGenerator,spoon.pattern.internal.ResultHolder,spoon.support.util.ImmutableMap)
ListOfNodes#matchTargets(spoon.pattern.internal.matcher.TobeMatched,spoon.pattern.internal.matcher.Matchers)
ListOfNodes#replaceNode(spoon.pattern.internal.node.RootNode,spoon.pattern.internal.node.RootNode)
ListOfNodes#getNodes()
MapEntryNode#getKey()
MapEntryNode#getValue()
MapEntryNode#replaceNode(spoon.pattern.internal.node.RootNode,spoon.pattern.internal.node.RootNode)
MapEntryNode#forEachParameterInfo(java.util.function.BiConsumer)
MapEntryNode#generateTargets(spoon.pattern.internal.DefaultGenerator,spoon.pattern.internal.ResultHolder,spoon.support.util.ImmutableMap)
MapEntryNode#matchTarget(java.lang.Object,spoon.support.util.ImmutableMap)
MapEntryNode#getMatchingStrategy()
MapEntryNode#isTryNextMatch(spoon.support.util.ImmutableMap)
ParameterNode#replaceNode(spoon.pattern.internal.node.RootNode,spoon.pattern.internal.node.RootNode)
ParameterNode#generateTargets(spoon.pattern.internal.DefaultGenerator,spoon.pattern.internal.ResultHolder,spoon.support.util.ImmutableMap)
ParameterNode#matchTarget(java.lang.Object,spoon.support.util.ImmutableMap)
ParameterNode#getParameterInfo()
ParameterNode#isRepeatable()
ParameterNode#isMandatory(spoon.support.util.ImmutableMap)
ParameterNode#isTryNextMatch(spoon.support.util.ImmutableMap)
ParameterNode#getMatchingStrategy()
ParameterNode#forEachParameterInfo(java.util.function.BiConsumer)
ParameterNode#toString()
PrimitiveMatcher#matchTarget(java.lang.Object,spoon.support.util.ImmutableMap)
RepeatableMatcher#getMatchingStrategy()
RepeatableMatcher#isRepeatable()
RepeatableMatcher#isMandatory(spoon.support.util.ImmutableMap)
RepeatableMatcher#isTryNextMatch(spoon.support.util.ImmutableMap)
RootNode#forEachParameterInfo(java.util.function.BiConsumer)
RootNode#generateTargets(spoon.pattern.internal.DefaultGenerator,spoon.pattern.internal.ResultHolder,spoon.support.util.ImmutableMap)
RootNode#isSimplifyGenerated()
RootNode#setSimplifyGenerated(boolean)
RootNode#matchTargets(spoon.pattern.internal.matcher.TobeMatched,spoon.pattern.internal.matcher.Matchers)
RootNode#matchAllWith(spoon.pattern.internal.matcher.TobeMatched)
RootNode#replaceNode(spoon.pattern.internal.node.RootNode,spoon.pattern.internal.node.RootNode)
StringNode#generateTargets(spoon.pattern.internal.DefaultGenerator,spoon.pattern.internal.ResultHolder,spoon.support.util.ImmutableMap)
StringNode#matchTarget(java.lang.Object,spoon.support.util.ImmutableMap)
StringNode#getParameterInfo(java.lang.String)
StringNode#setReplaceMarker(java.lang.String,spoon.pattern.internal.parameter.ParameterInfo)
StringNode#getReplaceMarkers()
StringNode#forEachParameterInfo(java.util.function.BiConsumer)
StringNode#replaceNode(spoon.pattern.internal.node.RootNode,spoon.pattern.internal.node.RootNode)
StringNode#toString()
StringNode#setReplaceMarker(spoon.pattern.internal.node.RootNode,java.lang.String,spoon.pattern.internal.parameter.ParameterInfo)
StringNode#getMatchingStrategy()
StringNode#isTryNextMatch(spoon.support.util.ImmutableMap)
SwitchNode#replaceNode(spoon.pattern.internal.node.RootNode,spoon.pattern.internal.node.RootNode)
SwitchNode#addCase(spoon.pattern.internal.node.PrimitiveMatcher,spoon.pattern.internal.node.RootNode)
SwitchNode#generateTargets(spoon.pattern.internal.DefaultGenerator,spoon.pattern.internal.ResultHolder,spoon.support.util.ImmutableMap)
SwitchNode#forEachParameterInfo(java.util.function.BiConsumer)
SwitchNode#matchTargets(spoon.pattern.internal.matcher.TobeMatched,spoon.pattern.internal.matcher.Matchers)
SwitchNode#generateInlineTargets(spoon.pattern.internal.DefaultGenerator,spoon.pattern.internal.ResultHolder,spoon.support.util.ImmutableMap)
AbstractParameterInfo#getName()
AbstractParameterInfo#addValueAs(spoon.support.util.ImmutableMap,java.lang.Object)
AbstractParameterInfo#setMatchCondition(java.lang.Class,java.util.function.Predicate)
AbstractParameterInfo#getParameterValueType()
AbstractParameterInfo#setParameterValueType(java.lang.Class)
AbstractParameterInfo#isMultiple()
AbstractParameterInfo#setRepeatable(boolean)
AbstractParameterInfo#getMinOccurences()
AbstractParameterInfo#setMinOccurences(int)
AbstractParameterInfo#getMaxOccurences()
AbstractParameterInfo#setMaxOccurences(int)
AbstractParameterInfo#getMatchingStrategy()
AbstractParameterInfo#setMatchingStrategy(spoon.pattern.Quantifier)
AbstractParameterInfo#getValueConvertor()
AbstractParameterInfo#setValueConvertor(spoon.pattern.internal.ValueConvertor)
AbstractParameterInfo#isRepeatable()
AbstractParameterInfo#isMandatory(spoon.support.util.ImmutableMap)
AbstractParameterInfo#isTryNextMatch(spoon.support.util.ImmutableMap)
AbstractParameterInfo#getContainerKind()
AbstractParameterInfo#setContainerKind(spoon.reflect.meta.ContainerKind)
AbstractParameterInfo#getValueAs(spoon.reflect.factory.Factory,spoon.pattern.internal.ResultHolder,spoon.support.util.ImmutableMap)
AbstractParameterInfo#toString()
ParameterInfo#getName()
ParameterInfo#addValueAs(spoon.support.util.ImmutableMap,java.lang.Object)
ParameterInfo#getValueAs(spoon.reflect.factory.Factory,spoon.pattern.internal.ResultHolder,spoon.support.util.ImmutableMap)
ParameterInfo#isMultiple()
ParameterInfo#getParameterValueType()
ParameterInfo#getMatchingStrategy()
ParameterInfo#isRepeatable()
ParameterInfo#isMandatory(spoon.support.util.ImmutableMap)
ParameterInfo#isTryNextMatch(spoon.support.util.ImmutableMap)
DefaultGenerator#generateSingleTarget(spoon.pattern.internal.node.RootNode,spoon.support.util.ImmutableMap,java.lang.Class)
DefaultGenerator#generateTargets(spoon.pattern.internal.node.RootNode,spoon.support.util.ImmutableMap,java.lang.Class)
DefaultGenerator#generateTargets(spoon.pattern.internal.node.RootNode,spoon.pattern.internal.ResultHolder,spoon.support.util.ImmutableMap)
DefaultGenerator#getValueAs(spoon.pattern.internal.parameter.ParameterInfo,spoon.pattern.internal.ResultHolder,spoon.support.util.ImmutableMap)
DefaultGenerator#getFactory()
DefaultGenerator#setAddGeneratedBy(boolean)
DefaultGenerator#applyGeneratedBy(spoon.reflect.declaration.CtElement,java.lang.String)
DefaultGenerator#getGeneratedByComment(spoon.reflect.declaration.CtElement)
DefaultGenerator#generate(java.lang.Class,spoon.support.util.ImmutableMap)
DefaultGenerator#generate(java.lang.Class,java.util.Map)
DefaultGenerator#generateType(java.lang.String,java.util.Map)
DefaultGenerator#addToType(java.lang.Class,java.util.Map,spoon.reflect.declaration.CtType)
DefaultGenerator#isAddGeneratedBy()
PatternPrinter#printNode(spoon.pattern.internal.node.RootNode)
PatternPrinter#generateTargets(spoon.pattern.internal.node.RootNode,spoon.pattern.internal.ResultHolder,spoon.support.util.ImmutableMap)
PatternPrinter#getValueAs(spoon.pattern.internal.parameter.ParameterInfo,spoon.pattern.internal.ResultHolder,spoon.support.util.ImmutableMap)
ResultHolder#getRequiredClass()
ResultHolder#isMultiple()
ResultHolder#addResult(T)
ResultHolder#mapEachResult(java.util.function.Function)
ResultHolder#getResults()
SubstitutionRequestProvider#getTemplateValueResolver(java.lang.Object)
ValueConvertor#getValueAs(spoon.reflect.factory.Factory,java.lang.Object,java.lang.Class)
ValueConvertorImpl#getValueAs(spoon.reflect.factory.Factory,java.lang.Object,java.lang.Class)
Generator#getFactory()
Generator#generate(java.lang.Class,java.util.Map)
Generator#generate(java.lang.Class,spoon.support.util.ImmutableMap)
Generator#addToType(java.lang.Class,java.util.Map,spoon.reflect.declaration.CtType)
Generator#generateType(java.lang.String,java.util.Map)
InlinedStatementConfigurator#getConflictResolutionMode()
InlinedStatementConfigurator#setConflictResolutionMode(spoon.pattern.ConflictResolutionMode)
InlinedStatementConfigurator#inlineIfOrForeachReferringTo(java.lang.String)
InlinedStatementConfigurator#markAsInlined(spoon.reflect.code.CtForEach)
InlinedStatementConfigurator#markAsInlined(spoon.reflect.code.CtIf)
InlinedStatementConfigurator#isFailOnMissingParameter()
InlinedStatementConfigurator#setFailOnMissingParameter(boolean)
Match#getMatchingElements()
Match#getMatchingElements(java.lang.Class)
Match#getMatchingElement()
Match#getMatchingElement(java.lang.Class)
Match#getParameters()
Match#getParametersMap()
Match#toString()
Pattern#getParameterInfos()
Pattern#generator()
Pattern#forEachMatch(java.lang.Object,spoon.reflect.visitor.chain.CtConsumer)
Pattern#getMatches(spoon.reflect.declaration.CtElement)
Pattern#toString()
PatternBuilder#create(java.util.List)
PatternBuilder#create(spoon.reflect.declaration.CtElement[])
PatternBuilder#build()
PatternBuilder#configurePatternParameters()
PatternBuilder#configurePatternParameters(java.util.function.Consumer)
PatternBuilder#configureInlineStatements(java.util.function.Consumer)
PatternBuilder#setAddGeneratedBy(boolean)
PatternBuilder#isAutoSimplifySubstitutions()
PatternBuilder#setAutoSimplifySubstitutions(boolean)
PatternBuilderHelper#setTypeMember(java.lang.String)
PatternBuilderHelper#setBodyOfMethod(java.lang.String)
PatternBuilderHelper#setReturnExpressionOfMethod(java.lang.String)
PatternBuilderHelper#keepTypeMembers(spoon.reflect.visitor.Filter)
PatternBuilderHelper#removeSuperClass()
PatternBuilderHelper#getPatternElements()
PatternParameterConfigurator#getConflictResolutionMode()
PatternParameterConfigurator#setConflictResolutionMode(spoon.pattern.ConflictResolutionMode)
PatternParameterConfigurator#queryModel()
PatternParameterConfigurator#parameter(java.lang.String)
PatternParameterConfigurator#setMinOccurence(int)
PatternParameterConfigurator#setMaxOccurence(int)
PatternParameterConfigurator#setMatchingStrategy(spoon.pattern.Quantifier)
PatternParameterConfigurator#setValueType(java.lang.Class)
PatternParameterConfigurator#setContainerKind(spoon.reflect.meta.ContainerKind)
PatternParameterConfigurator#getCurrentParameter()
PatternParameterConfigurator#byType(java.lang.Class)
PatternParameterConfigurator#byType(java.lang.String)
PatternParameterConfigurator#byType(spoon.reflect.reference.CtTypeReference)
PatternParameterConfigurator#byLocalType(spoon.reflect.declaration.CtType,java.lang.String)
PatternParameterConfigurator#byVariable(java.lang.String)
PatternParameterConfigurator#byVariable(spoon.reflect.declaration.CtVariable)
PatternParameterConfigurator#byInvocation(spoon.reflect.declaration.CtMethod)
PatternParameterConfigurator#byFieldAccessOnVariable(java.lang.String)
PatternParameterConfigurator#byTemplateParameter()
PatternParameterConfigurator#byTemplateParameter(java.util.Map)
PatternParameterConfigurator#byParameterValues(java.util.Map)
PatternParameterConfigurator#byTemplateParameterReference(spoon.reflect.declaration.CtVariable)
PatternParameterConfigurator#byString(java.lang.String)
PatternParameterConfigurator#bySubstring(java.lang.String)
PatternParameterConfigurator#byNamedElement(java.lang.String)
PatternParameterConfigurator#byReferenceName(java.lang.String)
PatternParameterConfigurator#byFilter(spoon.reflect.visitor.Filter)
PatternParameterConfigurator#byRole(spoon.reflect.path.CtRole,spoon.reflect.visitor.Filter)
PatternParameterConfigurator#byCondition(java.lang.Class,java.util.function.Predicate)
PatternParameterConfigurator#matchInlinedStatements()
PatternParameterConfigurator#isSubstituted(java.lang.String)
AbstractAnnotationProcessor#getConsumedAnnotationTypes()
AbstractAnnotationProcessor#getProcessedAnnotationTypes()
AbstractAnnotationProcessor#inferConsumedAnnotationType()
AbstractAnnotationProcessor#isToBeProcessed(E extends spoon.reflect.declaration.CtElement)
AbstractAnnotationProcessor#process(E extends spoon.reflect.declaration.CtElement)
AbstractAnnotationProcessor#shoudBeConsumed(spoon.reflect.declaration.CtAnnotation)
AbstractManualProcessor#getEnvironment()
AbstractManualProcessor#getFactory()
AbstractManualProcessor#getProcessedElementTypes()
AbstractManualProcessor#getTraversalStrategy()
AbstractManualProcessor#init()
AbstractManualProcessor#isPrivileged()
AbstractManualProcessor#isToBeProcessed(spoon.reflect.declaration.CtElement)
AbstractManualProcessor#process(spoon.reflect.declaration.CtElement)
AbstractManualProcessor#processingDone()
AbstractManualProcessor#setFactory(spoon.reflect.factory.Factory)
AbstractManualProcessor#initProperties(spoon.processing.ProcessorProperties)
AbstractManualProcessor#interrupt()
AbstractProblemFixer#getFactory()
AbstractProblemFixer#setFactory(spoon.reflect.factory.Factory)
AbstractProcessor#getEnvironment()
AbstractProcessor#getFactory()
AbstractProcessor#getProcessedElementTypes()
AbstractProcessor#loadProperties()
AbstractProcessor#getTraversalStrategy()
AbstractProcessor#init()
AbstractProcessor#isToBeProcessed(E extends spoon.reflect.declaration.CtElement)
AbstractProcessor#initProperties(spoon.processing.ProcessorProperties)
AbstractProcessor#process()
AbstractProcessor#processingDone()
AbstractProcessor#setFactory(spoon.reflect.factory.Factory)
AbstractProcessor#interrupt()
AnnotationProcessor#process(A extends java.lang.annotation.Annotation,E extends spoon.reflect.declaration.CtElement)
AnnotationProcessor#getProcessedAnnotationTypes()
AnnotationProcessor#getConsumedAnnotationTypes()
AnnotationProcessor#inferConsumedAnnotationType()
AnnotationProcessor#shoudBeConsumed(spoon.reflect.declaration.CtAnnotation)
FactoryAccessor#getFactory()
FactoryAccessor#setFactory(spoon.reflect.factory.Factory)
FileGenerator#setOutputDirectory(java.io.File)
FileGenerator#getOutputDirectory()
FileGenerator#getCreatedFiles()
ProblemFixer#getDescription()
ProblemFixer#getLabel()
ProblemFixer#run(T extends spoon.reflect.declaration.CtElement)
ProcessingManager#addProcessor(java.lang.Class)
ProcessingManager#addProcessor(spoon.processing.Processor)
ProcessingManager#addProcessor(java.lang.String)
ProcessingManager#getProcessors()
ProcessingManager#process(java.util.Collection)
ProcessingManager#process(spoon.reflect.declaration.CtElement)
Processor#getTraversalStrategy()
Processor#getEnvironment()
Processor#isToBeProcessed(E extends spoon.reflect.declaration.CtElement)
Processor#process(E extends spoon.reflect.declaration.CtElement)
Processor#process()
Processor#getProcessedElementTypes()
Processor#processingDone()
Processor#init()
Processor#initProperties(spoon.processing.ProcessorProperties)
Processor#interrupt()
ProcessorProperties#get(java.lang.Class,java.lang.String)
ProcessorProperties#set(java.lang.String,java.lang.Object)
ProcessorProperties#getProcessorName()
ProcessorPropertiesImpl#get(java.lang.Class,java.lang.String)
ProcessorPropertiesImpl#set(java.lang.String,java.lang.Object)
ProcessorPropertiesImpl#getProcessorName()
SpoonTagger#process()
AbstractRenameRefactoring#refactor()
AbstractRenameRefactoring#getTarget()
AbstractRenameRefactoring#setTarget(T extends spoon.reflect.declaration.CtNamedElement)
AbstractRenameRefactoring#getNewName()
AbstractRenameRefactoring#setNewName(java.lang.String)
CtParameterRemoveRefactoring#getTarget()
CtParameterRemoveRefactoring#setTarget(spoon.reflect.declaration.CtParameter)
CtParameterRemoveRefactoring#getTargetExecutables()
CtParameterRemoveRefactoring#getTargetInvocations()
CtParameterRemoveRefactoring#refactor()
CtRefactoring#refactor()
CtRenameRefactoring#getTarget()
CtRenameRefactoring#setTarget(T extends spoon.reflect.declaration.CtNamedElement)
CtRenameRefactoring#getNewName()
CtRenameRefactoring#setNewName(java.lang.String)
Refactoring#changeTypeName(spoon.reflect.declaration.CtType,java.lang.String)
Refactoring#changeMethodName(spoon.reflect.declaration.CtMethod,java.lang.String)
Refactoring#copyMethod(spoon.reflect.declaration.CtMethod)
Refactoring#copyType(spoon.reflect.declaration.CtType)
Refactoring#changeLocalVariableName(spoon.reflect.code.CtLocalVariable,java.lang.String)
CtAbstractInvocation#getArguments()
CtAbstractInvocation#addArgument(spoon.reflect.code.CtExpression)
CtAbstractInvocation#removeArgument(spoon.reflect.code.CtExpression)
CtAbstractInvocation#setArguments(java.util.List)
CtAbstractInvocation#getExecutable()
CtAbstractInvocation#setExecutable(spoon.reflect.reference.CtExecutableReference)
CtAnnotationFieldAccess#getVariable()
CtAnnotationFieldAccess#clone()
CtArrayAccess#setIndexExpression(spoon.reflect.code.CtExpression)
CtArrayAccess#getIndexExpression()
CtArrayAccess#clone()
CtArrayRead#clone()
CtArrayWrite#clone()
CtAssert#getAssertExpression()
CtAssert#setAssertExpression(spoon.reflect.code.CtExpression)
CtAssert#getExpression()
CtAssert#setExpression(spoon.reflect.code.CtExpression)
CtAssert#clone()
CtAssignment#getAssigned()
CtAssignment#setAssigned(spoon.reflect.code.CtExpression)
CtAssignment#clone()
CtBinaryOperator#getLeftHandOperand()
CtBinaryOperator#getRightHandOperand()
CtBinaryOperator#setLeftHandOperand(spoon.reflect.code.CtExpression)
CtBinaryOperator#setRightHandOperand(spoon.reflect.code.CtExpression)
CtBinaryOperator#setKind(spoon.reflect.code.BinaryOperatorKind)
CtBinaryOperator#getKind()
CtBinaryOperator#clone()
CtBlock#clone()
CtBodyHolder#getBody()
CtBodyHolder#setBody(spoon.reflect.code.CtStatement)
CtBreak#clone()
CtCase#getCaseExpression()
CtCase#setCaseExpression(spoon.reflect.code.CtExpression)
CtCase#clone()
CtCatch#getParameter()
CtCatch#setParameter(spoon.reflect.code.CtCatchVariable)
CtCatch#getBody()
CtCatch#clone()
CtCatchVariable#getReference()
CtCatchVariable#clone()
CtCatchVariable#setDefaultExpression(spoon.reflect.code.CtExpression)
CtCatchVariable#getType()
CtCatchVariable#setType(spoon.reflect.reference.CtTypeReference)
CtCodeElement#partiallyEvaluate()
CtCodeElement#clone()
CtCodeSnippetExpression#compile()
CtCodeSnippetExpression#clone()
CtCodeSnippetStatement#compile()
CtCodeSnippetStatement#clone()
CtComment#getContent()
CtComment#setContent(java.lang.String)
CtComment#getCommentType()
CtComment#setCommentType(spoon.reflect.code.CtComment$CommentType)
CtComment#clone()
CtComment#asJavaDoc()
CtConditional#getElseExpression()
CtConditional#getThenExpression()
CtConditional#getCondition()
CtConditional#setElseExpression(spoon.reflect.code.CtExpression)
CtConditional#setThenExpression(spoon.reflect.code.CtExpression)
CtConditional#setCondition(spoon.reflect.code.CtExpression)
CtConditional#clone()
CtConstructorCall#getActualTypeArguments()
CtConstructorCall#setActualTypeArguments(java.util.List)
CtConstructorCall#addActualTypeArgument(spoon.reflect.reference.CtTypeReference)
CtConstructorCall#clone()
CtConstructorCall#getType()
CtContinue#clone()
CtDo#getLoopingExpression()
CtDo#setLoopingExpression(spoon.reflect.code.CtExpression)
CtDo#clone()
CtExecutableReferenceExpression#getExecutable()
CtExecutableReferenceExpression#setExecutable(spoon.reflect.reference.CtExecutableReference)
CtExecutableReferenceExpression#clone()
CtExpression#getTypeCasts()
CtExpression#setTypeCasts(java.util.List)
CtExpression#addTypeCast(spoon.reflect.reference.CtTypeReference)
CtExpression#clone()
CtFieldAccess#getVariable()
CtFieldAccess#clone()
CtFieldRead#clone()
CtFieldWrite#clone()
CtFor#getExpression()
CtFor#setExpression(spoon.reflect.code.CtExpression)
CtFor#getForInit()
CtFor#addForInit(spoon.reflect.code.CtStatement)
CtFor#setForInit(java.util.List)
CtFor#removeForInit(spoon.reflect.code.CtStatement)
CtFor#getForUpdate()
CtFor#addForUpdate(spoon.reflect.code.CtStatement)
CtFor#setForUpdate(java.util.List)
CtFor#removeForUpdate(spoon.reflect.code.CtStatement)
CtFor#clone()
CtForEach#getExpression()
CtForEach#getVariable()
CtForEach#setExpression(spoon.reflect.code.CtExpression)
CtForEach#setVariable(spoon.reflect.code.CtLocalVariable)
CtForEach#clone()
CtIf#getCondition()
CtIf#getElseStatement()
CtIf#getThenStatement()
CtIf#setCondition(spoon.reflect.code.CtExpression)
CtIf#setElseStatement(spoon.reflect.code.CtStatement)
CtIf#setThenStatement(spoon.reflect.code.CtStatement)
CtIf#clone()
CtInvocation#getActualTypeArguments()
CtInvocation#setActualTypeArguments(java.util.List)
CtInvocation#addActualTypeArgument(spoon.reflect.reference.CtTypeReference)
CtInvocation#getType()
CtInvocation#clone()
CtJavaDoc#getTags()
CtJavaDoc#setTags(java.util.List)
CtJavaDoc#addTag(spoon.reflect.code.CtJavaDocTag)
CtJavaDoc#addTag(int,spoon.reflect.code.CtJavaDocTag)
CtJavaDoc#removeTag(int)
CtJavaDoc#removeTag(spoon.reflect.code.CtJavaDocTag)
CtJavaDoc#getShortDescription()
CtJavaDoc#getLongDescription()
CtJavaDoc#clone()
CtJavaDocTag#getType()
CtJavaDocTag#setType(java.lang.String)
CtJavaDocTag#setType(spoon.reflect.code.CtJavaDocTag$TagType)
CtJavaDocTag#getContent()
CtJavaDocTag#setContent(java.lang.String)
CtJavaDocTag#getParam()
CtJavaDocTag#setParam(java.lang.String)
CtJavaDocTag#clone()
CtLabelledFlowBreak#getTargetLabel()
CtLabelledFlowBreak#setTargetLabel(java.lang.String)
CtLabelledFlowBreak#getLabelledStatement()
CtLambda#getExpression()
CtLambda#getOverriddenMethod()
CtLambda#setExpression(spoon.reflect.code.CtExpression)
CtLambda#clone()
CtLambda#setThrownTypes(java.util.Set)
CtLiteral#getValue()
CtLiteral#setValue(T)
CtLiteral#clone()
CtLocalVariable#getReference()
CtLocalVariable#getAssignment()
CtLocalVariable#clone()
CtLocalVariable#setAssignment(spoon.reflect.code.CtExpression)
CtLoop#getBody()
CtLoop#clone()
CtNewArray#getDimensionExpressions()
CtNewArray#setDimensionExpressions(java.util.List)
CtNewArray#addDimensionExpression(spoon.reflect.code.CtExpression)
CtNewArray#removeDimensionExpression(spoon.reflect.code.CtExpression)
CtNewArray#getElements()
CtNewArray#setElements(java.util.List)
CtNewArray#addElement(spoon.reflect.code.CtExpression)
CtNewArray#removeElement(spoon.reflect.code.CtExpression)
CtNewArray#clone()
CtNewClass#getActualTypeArguments()
CtNewClass#setActualTypeArguments(java.util.List)
CtNewClass#addActualTypeArgument(spoon.reflect.reference.CtTypeReference)
CtNewClass#getAnonymousClass()
CtNewClass#setAnonymousClass(spoon.reflect.declaration.CtClass)
CtNewClass#clone()
CtOperatorAssignment#setKind(spoon.reflect.code.BinaryOperatorKind)
CtOperatorAssignment#getKind()
CtOperatorAssignment#clone()
CtRHSReceiver#getAssignment()
CtRHSReceiver#setAssignment(spoon.reflect.code.CtExpression)
CtReturn#getReturnedExpression()
CtReturn#setReturnedExpression(spoon.reflect.code.CtExpression)
CtReturn#clone()
CtStatement#insertAfter(spoon.reflect.code.CtStatement)
CtStatement#insertAfter(spoon.reflect.code.CtStatementList)
CtStatement#insertBefore(spoon.reflect.code.CtStatement)
CtStatement#insertBefore(spoon.reflect.code.CtStatementList)
CtStatement#getLabel()
CtStatement#setLabel(java.lang.String)
CtStatement#clone()
CtStatementList#getStatements()
CtStatementList#setStatements(java.util.List)
CtStatementList#addStatement(spoon.reflect.code.CtStatement)
CtStatementList#addStatement(int,spoon.reflect.code.CtStatement)
CtStatementList#insertBegin(spoon.reflect.code.CtStatement)
CtStatementList#insertBegin(spoon.reflect.code.CtStatementList)
CtStatementList#insertEnd(spoon.reflect.code.CtStatement)
CtStatementList#insertEnd(spoon.reflect.code.CtStatementList)
CtStatementList#insertBefore(spoon.reflect.visitor.Filter,spoon.reflect.code.CtStatement)
CtStatementList#insertBefore(spoon.reflect.visitor.Filter,spoon.reflect.code.CtStatementList)
CtStatementList#insertAfter(spoon.reflect.visitor.Filter,spoon.reflect.code.CtStatement)
CtStatementList#insertAfter(spoon.reflect.visitor.Filter,spoon.reflect.code.CtStatementList)
CtStatementList#getStatement(int)
CtStatementList#getLastStatement()
CtStatementList#removeStatement(spoon.reflect.code.CtStatement)
CtStatementList#clone()
CtSuperAccess#clone()
CtSuperAccess#getType()
CtSwitch#getSelector()
CtSwitch#setSelector(spoon.reflect.code.CtExpression)
CtSwitch#getCases()
CtSwitch#setCases(java.util.List)
CtSwitch#addCase(spoon.reflect.code.CtCase)
CtSwitch#removeCase(spoon.reflect.code.CtCase)
CtSwitch#clone()
CtSynchronized#getExpression()
CtSynchronized#setExpression(spoon.reflect.code.CtExpression)
CtSynchronized#getBlock()
CtSynchronized#setBlock(spoon.reflect.code.CtBlock)
CtSynchronized#clone()
CtTargetedExpression#getTarget()
CtTargetedExpression#setTarget(E extends spoon.reflect.code.CtExpression)
CtTargetedExpression#clone()
CtThisAccess#clone()
CtThrow#getThrownExpression()
CtThrow#setThrownExpression(spoon.reflect.code.CtExpression)
CtThrow#clone()
CtTry#getCatchers()
CtTry#setCatchers(java.util.List)
CtTry#addCatcher(spoon.reflect.code.CtCatch)
CtTry#removeCatcher(spoon.reflect.code.CtCatch)
CtTry#getBody()
CtTry#getFinalizer()
CtTry#setFinalizer(spoon.reflect.code.CtBlock)
CtTry#clone()
CtTryWithResource#getResources()
CtTryWithResource#setResources(java.util.List)
CtTryWithResource#addResource(spoon.reflect.code.CtLocalVariable)
CtTryWithResource#removeResource(spoon.reflect.code.CtLocalVariable)
CtTryWithResource#clone()
CtTypeAccess#getAccessedType()
CtTypeAccess#setAccessedType(spoon.reflect.reference.CtTypeReference)
CtTypeAccess#getType()
CtTypeAccess#setType(spoon.reflect.reference.CtTypeReference)
CtTypeAccess#clone()
CtUnaryOperator#getOperand()
CtUnaryOperator#setOperand(spoon.reflect.code.CtExpression)
CtUnaryOperator#setKind(spoon.reflect.code.UnaryOperatorKind)
CtUnaryOperator#getKind()
CtUnaryOperator#clone()
CtVariableAccess#getVariable()
CtVariableAccess#setVariable(spoon.reflect.reference.CtVariableReference)
CtVariableAccess#clone()
CtVariableAccess#getType()
CtVariableRead#clone()
CtVariableWrite#clone()
CtWhile#getLoopingExpression()
CtWhile#setLoopingExpression(spoon.reflect.code.CtExpression)
CtWhile#clone()
BodyHolderSourcePosition#getBodyStart()
BodyHolderSourcePosition#getBodyEnd()
DeclarationSourcePosition#getModifierSourceStart()
DeclarationSourcePosition#getModifierSourceEnd()
DeclarationSourcePosition#getNameStart()
DeclarationSourcePosition#getNameEnd()
NoSourcePosition#getFile()
NoSourcePosition#getCompilationUnit()
NoSourcePosition#isValidPosition()
NoSourcePosition#getLine()
NoSourcePosition#getEndLine()
NoSourcePosition#getColumn()
NoSourcePosition#getEndColumn()
NoSourcePosition#getSourceEnd()
NoSourcePosition#getSourceStart()
NoSourcePosition#toString()
CompilationUnit#getUnitType()
CompilationUnit#getFile()
CompilationUnit#setFile(java.io.File)
CompilationUnit#getBinaryFiles()
CompilationUnit#getDeclaredTypes()
CompilationUnit#setDeclaredTypes(java.util.List)
CompilationUnit#addDeclaredType(spoon.reflect.declaration.CtType)
CompilationUnit#getDeclaredModule()
CompilationUnit#setDeclaredModule(spoon.reflect.declaration.CtModule)
CompilationUnit#getDeclaredPackage()
CompilationUnit#setDeclaredPackage(spoon.reflect.declaration.CtPackage)
CompilationUnit#getMainType()
CompilationUnit#getOriginalSourceCode()
CompilationUnit#beginOfLineIndex(int)
CompilationUnit#nextLineIndex(int)
CompilationUnit#getTabCount(int)
CompilationUnit#getImports()
CompilationUnit#setImports(java.util.Collection)
SourcePosition#isValidPosition()
SourcePosition#toString()
SourcePosition#getFile()
SourcePosition#getCompilationUnit()
SourcePosition#getLine()
SourcePosition#getEndLine()
SourcePosition#getColumn()
SourcePosition#getEndColumn()
SourcePosition#getSourceEnd()
SourcePosition#getSourceStart()
CtAnnotation#getActualAnnotation()
CtAnnotation#getAnnotationType()
CtAnnotation#getValue(java.lang.String)
CtAnnotation#getValueAsObject(java.lang.String)
CtAnnotation#getValueAsInt(java.lang.String)
CtAnnotation#getValueAsString(java.lang.String)
CtAnnotation#getWrappedValue(java.lang.String)
CtAnnotation#getValues()
CtAnnotation#getAllValues()
CtAnnotation#setAnnotationType(spoon.reflect.reference.CtTypeReference)
CtAnnotation#setElementValues(java.util.Map)
CtAnnotation#setValues(java.util.Map)
CtAnnotation#getAnnotatedElement()
CtAnnotation#getAnnotatedElementType()
CtAnnotation#addValue(java.lang.String,java.lang.Object)
CtAnnotation#addValue(java.lang.String,spoon.reflect.code.CtLiteral)
CtAnnotation#addValue(java.lang.String,spoon.reflect.code.CtNewArray)
CtAnnotation#addValue(java.lang.String,spoon.reflect.code.CtFieldAccess)
CtAnnotation#addValue(java.lang.String,spoon.reflect.declaration.CtAnnotation)
CtAnnotation#clone()
CtAnnotation#setTypeCasts(java.util.List)
CtAnnotation#getAnnotatedElementTypeForCtElement(spoon.reflect.declaration.CtElement)
CtAnnotationMethod#getDefaultExpression()
CtAnnotationMethod#setDefaultExpression(spoon.reflect.code.CtExpression)
CtAnnotationMethod#clone()
CtAnnotationMethod#setBody(spoon.reflect.code.CtStatement)
CtAnnotationMethod#setThrownTypes(java.util.Set)
CtAnnotationMethod#setFormalCtTypeParameters(java.util.List)
CtAnnotationMethod#setParameters(java.util.List)
CtAnnotationType#getAnnotationMethods()
CtAnnotationType#addMethod(spoon.reflect.declaration.CtMethod)
CtAnnotationType#setMethods(java.util.Set)
CtAnnotationType#clone()
CtAnnotationType#setFormalCtTypeParameters(java.util.List)
CtAnnotationType#setSuperInterfaces(java.util.Set)
CtAnnotationType#setSuperclass(spoon.reflect.reference.CtTypeReference)
CtAnonymousExecutable#clone()
CtAnonymousExecutable#setSimpleName(java.lang.String)
CtAnonymousExecutable#setThrownTypes(java.util.Set)
CtAnonymousExecutable#setParameters(java.util.List)
CtAnonymousExecutable#setType(spoon.reflect.reference.CtTypeReference)
CtAnonymousExecutable#addParameter(spoon.reflect.declaration.CtParameter)
CtAnonymousExecutable#addThrownType(spoon.reflect.reference.CtTypeReference)
CtClass#getAnonymousExecutables()
CtClass#getConstructor(spoon.reflect.reference.CtTypeReference[])
CtClass#getConstructors()
CtClass#setAnonymousExecutables(java.util.List)
CtClass#addAnonymousExecutable(spoon.reflect.declaration.CtAnonymousExecutable)
CtClass#removeAnonymousExecutable(spoon.reflect.declaration.CtAnonymousExecutable)
CtClass#setConstructors(java.util.Set)
CtClass#addConstructor(spoon.reflect.declaration.CtConstructor)
CtClass#removeConstructor(spoon.reflect.declaration.CtConstructor)
CtClass#isAnonymous()
CtClass#clone()
CtClass#newInstance()
CtClass#setLabel(java.lang.String)
CtCodeSnippet#setValue(java.lang.String)
CtCodeSnippet#getValue()
CtConstructor#getSimpleName()
CtConstructor#clone()
CtConstructor#setType(spoon.reflect.reference.CtTypeReference)
CtConstructor#setSimpleName(java.lang.String)
CtElement#getAnnotation(java.lang.Class)
CtElement#getAnnotation(spoon.reflect.reference.CtTypeReference)
CtElement#hasAnnotation(java.lang.Class)
CtElement#getAnnotations()
CtElement#getDocComment()
CtElement#getShortRepresentation()
CtElement#getPosition()
CtElement#replace(spoon.reflect.declaration.CtElement)
CtElement#replace(java.util.Collection)
CtElement#addAnnotation(spoon.reflect.declaration.CtAnnotation)
CtElement#removeAnnotation(spoon.reflect.declaration.CtAnnotation)
CtElement#setDocComment(java.lang.String)
CtElement#setPosition(spoon.reflect.cu.SourcePosition)
CtElement#getAnnotatedChildren(java.lang.Class)
CtElement#isImplicit()
CtElement#setImplicit(boolean)
CtElement#getReferencedTypes()
CtElement#getElements(spoon.reflect.visitor.Filter)
CtElement#setPositions(spoon.reflect.cu.SourcePosition)
CtElement#setAnnotations(java.util.List)
CtElement#getParent()
CtElement#getParent(java.lang.Class)
CtElement#getParent(spoon.reflect.visitor.Filter)
CtElement#setParent(E extends spoon.reflect.declaration.CtElement)
CtElement#isParentInitialized()
CtElement#hasParent(spoon.reflect.declaration.CtElement)
CtElement#updateAllParentsBelow()
CtElement#getRoleInParent()
CtElement#delete()
CtElement#putMetadata(java.lang.String,java.lang.Object)
CtElement#getMetadata(java.lang.String)
CtElement#getMetadataKeys()
CtElement#setComments(java.util.List)
CtElement#getComments()
CtElement#addComment(spoon.reflect.code.CtComment)
CtElement#removeComment(spoon.reflect.code.CtComment)
CtElement#clone()
CtElement#getValueByRole(spoon.reflect.path.CtRole)
CtElement#setValueByRole(spoon.reflect.path.CtRole,T)
CtElement#getPath()
CtElement#descendantIterator()
CtElement#asIterable()
CtEnum#addEnumValue(spoon.reflect.declaration.CtEnumValue)
CtEnum#removeEnumValue(spoon.reflect.declaration.CtEnumValue)
CtEnum#getEnumValue(java.lang.String)
CtEnum#getEnumValues()
CtEnum#setEnumValues(java.util.List)
CtEnum#clone()
CtEnum#setFormalCtTypeParameters(java.util.List)
CtEnum#setSuperclass(spoon.reflect.reference.CtTypeReference)
CtEnumValue#clone()
CtEnumValue#setAssignment(spoon.reflect.code.CtExpression)
CtExecutable#getReference()
CtExecutable#getBody()
CtExecutable#getParameters()
CtExecutable#setParameters(java.util.List)
CtExecutable#addParameter(spoon.reflect.declaration.CtParameter)
CtExecutable#removeParameter(spoon.reflect.declaration.CtParameter)
CtExecutable#getThrownTypes()
CtExecutable#setThrownTypes(java.util.Set)
CtExecutable#addThrownType(spoon.reflect.reference.CtTypeReference)
CtExecutable#removeThrownType(spoon.reflect.reference.CtTypeReference)
CtExecutable#getSignature()
CtExecutable#clone()
CtField#getReference()
CtField#getAssignment()
CtField#setAssignment(spoon.reflect.code.CtExpression)
CtField#clone()
CtFormalTypeDeclarer#getFormalCtTypeParameters()
CtFormalTypeDeclarer#setFormalCtTypeParameters(java.util.List)
CtFormalTypeDeclarer#addFormalCtTypeParameter(spoon.reflect.declaration.CtTypeParameter)
CtFormalTypeDeclarer#removeFormalCtTypeParameter(spoon.reflect.declaration.CtTypeParameter)
CtImport#getImportKind()
CtImport#getReference()
CtImport#setReference(spoon.reflect.reference.CtReference)
CtImport#clone()
CtInterface#clone()
CtInterface#setSuperclass(spoon.reflect.reference.CtTypeReference)
CtMethod#isOverriding(spoon.reflect.declaration.CtMethod)
CtMethod#isDefaultMethod()
CtMethod#setDefaultMethod(boolean)
CtMethod#clone()
CtMethod#getTopDefinitions()
CtMethod#copyMethod()
CtModifiable#getModifiers()
CtModifiable#hasModifier(spoon.reflect.declaration.ModifierKind)
CtModifiable#setModifiers(java.util.Set)
CtModifiable#addModifier(spoon.reflect.declaration.ModifierKind)
CtModifiable#removeModifier(spoon.reflect.declaration.ModifierKind)
CtModifiable#setVisibility(spoon.reflect.declaration.ModifierKind)
CtModifiable#getVisibility()
CtModifiable#getExtendedModifiers()
CtModifiable#setExtendedModifiers(java.util.Set)
CtModifiable#isPublic()
CtModifiable#isFinal()
CtModifiable#isStatic()
CtModifiable#isProtected()
CtModifiable#isPrivate()
CtModifiable#isAbstract()
CtModule#isUnnamedModule()
CtModule#isOpenModule()
CtModule#setIsOpenModule(boolean)
CtModule#setModuleDirectives(java.util.List)
CtModule#addModuleDirective(spoon.reflect.declaration.CtModuleDirective)
CtModule#addModuleDirectiveAt(int,spoon.reflect.declaration.CtModuleDirective)
CtModule#getModuleDirectives()
CtModule#removeModuleDirective(spoon.reflect.declaration.CtModuleDirective)
CtModule#getUsedServices()
CtModule#setUsedServices(java.util.List)
CtModule#addUsedService(spoon.reflect.declaration.CtUsedService)
CtModule#removeUsedService(spoon.reflect.declaration.CtUsedService)
CtModule#getExportedPackages()
CtModule#setExportedPackages(java.util.List)
CtModule#addExportedPackage(spoon.reflect.declaration.CtPackageExport)
CtModule#removeExportedPackage(spoon.reflect.declaration.CtPackageExport)
CtModule#getOpenedPackages()
CtModule#setOpenedPackages(java.util.List)
CtModule#addOpenedPackage(spoon.reflect.declaration.CtPackageExport)
CtModule#removeOpenedPackage(spoon.reflect.declaration.CtPackageExport)
CtModule#getRequiredModules()
CtModule#setRequiredModules(java.util.List)
CtModule#addRequiredModule(spoon.reflect.declaration.CtModuleRequirement)
CtModule#removeRequiredModule(spoon.reflect.declaration.CtModuleRequirement)
CtModule#getProvidedServices()
CtModule#setProvidedServices(java.util.List)
CtModule#addProvidedService(spoon.reflect.declaration.CtProvidedService)
CtModule#removeProvidedService(spoon.reflect.declaration.CtProvidedService)
CtModule#getRootPackage()
CtModule#setRootPackage(spoon.reflect.declaration.CtPackage)
CtModule#getReference()
CtModule#clone()
CtModuleRequirement#getRequiresModifiers()
CtModuleRequirement#setRequiresModifiers(java.util.Set)
CtModuleRequirement#getModuleReference()
CtModuleRequirement#setModuleReference(spoon.reflect.reference.CtModuleReference)
CtModuleRequirement#clone()
CtMultiTypedElement#addMultiType(spoon.reflect.reference.CtTypeReference)
CtMultiTypedElement#removeMultiType(spoon.reflect.reference.CtTypeReference)
CtMultiTypedElement#getMultiTypes()
CtMultiTypedElement#setMultiTypes(java.util.List)
CtNamedElement#getSimpleName()
CtNamedElement#setSimpleName(java.lang.String)
CtNamedElement#getReference()
CtNamedElement#clone()
CtPackage#getDeclaringModule()
CtPackage#getDeclaringPackage()
CtPackage#getPackage(java.lang.String)
CtPackage#getPackages()
CtPackage#getQualifiedName()
CtPackage#getReference()
CtPackage#getType(java.lang.String)
CtPackage#getTypes()
CtPackage#addType(spoon.reflect.declaration.CtType)
CtPackage#removeType(spoon.reflect.declaration.CtType)
CtPackage#setPackages(java.util.Set)
CtPackage#addPackage(spoon.reflect.declaration.CtPackage)
CtPackage#removePackage(spoon.reflect.declaration.CtPackage)
CtPackage#setTypes(java.util.Set)
CtPackage#clone()
CtPackage#isUnnamedPackage()
CtPackageExport#setOpenedPackage(boolean)
CtPackageExport#isOpenedPackage()
CtPackageExport#getPackageReference()
CtPackageExport#setPackageReference(spoon.reflect.reference.CtPackageReference)
CtPackageExport#getTargetExport()
CtPackageExport#setTargetExport(java.util.List)
CtPackageExport#addTargetExport(spoon.reflect.reference.CtModuleReference)
CtPackageExport#clone()
CtParameter#getParent()
CtParameter#isVarArgs()
CtParameter#setVarArgs(boolean)
CtParameter#getReference()
CtParameter#clone()
CtParameter#setDefaultExpression(spoon.reflect.code.CtExpression)
CtProvidedService#getServiceType()
CtProvidedService#setServiceType(spoon.reflect.reference.CtTypeReference)
CtProvidedService#getImplementationTypes()
CtProvidedService#setImplementationTypes(java.util.List)
CtProvidedService#addImplementationType(spoon.reflect.reference.CtTypeReference)
CtProvidedService#clone()
CtShadowable#isShadow()
CtShadowable#setShadow(boolean)
CtType#getSimpleName()
CtType#getUsedTypes(boolean)
CtType#getActualClass()
CtType#getField(java.lang.String)
CtType#getFields()
CtType#getNestedType(java.lang.String)
CtType#getNestedTypes()
CtType#getPackage()
CtType#getReference()
CtType#isTopLevel()
CtType#addFieldAtTop(spoon.reflect.declaration.CtField)
CtType#addField(spoon.reflect.declaration.CtField)
CtType#addField(int,spoon.reflect.declaration.CtField)
CtType#setFields(java.util.List)
CtType#removeField(spoon.reflect.declaration.CtField)
CtType#addNestedType(spoon.reflect.declaration.CtType)
CtType#removeNestedType(spoon.reflect.declaration.CtType)
CtType#setNestedTypes(java.util.Set)
CtType#compileAndReplaceSnippets()
CtType#getAllMethods()
CtType#getMethod(spoon.reflect.reference.CtTypeReference,java.lang.String,spoon.reflect.reference.CtTypeReference[])
CtType#getMethod(java.lang.String,spoon.reflect.reference.CtTypeReference[])
CtType#getMethods()
CtType#getMethodsAnnotatedWith(spoon.reflect.reference.CtTypeReference[])
CtType#getMethodsByName(java.lang.String)
CtType#hasMethod(spoon.reflect.declaration.CtMethod)
CtType#setMethods(java.util.Set)
CtType#addMethod(spoon.reflect.declaration.CtMethod)
CtType#removeMethod(spoon.reflect.declaration.CtMethod)
CtType#setSuperclass(spoon.reflect.reference.CtTypeReference)
CtType#setSuperInterfaces(java.util.Set)
CtType#addSuperInterface(spoon.reflect.reference.CtTypeReference)
CtType#removeSuperInterface(spoon.reflect.reference.CtTypeReference)
CtType#getTypeMembers()
CtType#addTypeMember(spoon.reflect.declaration.CtTypeMember)
CtType#addTypeMemberAt(int,spoon.reflect.declaration.CtTypeMember)
CtType#removeTypeMember(spoon.reflect.declaration.CtTypeMember)
CtType#setTypeMembers(java.util.List)
CtType#clone()
CtType#copyType()
CtTypeInformation#getSuperInterfaces()
CtTypeInformation#getQualifiedName()
CtTypeInformation#getModifiers()
CtTypeInformation#isPrimitive()
CtTypeInformation#isAnonymous()
CtTypeInformation#isLocalType()
CtTypeInformation#isClass()
CtTypeInformation#isInterface()
CtTypeInformation#isEnum()
CtTypeInformation#isAnnotationType()
CtTypeInformation#isGenerics()
CtTypeInformation#isSubtypeOf(spoon.reflect.reference.CtTypeReference)
CtTypeInformation#getSuperclass()
CtTypeInformation#getDeclaredFields()
CtTypeInformation#getAllFields()
CtTypeInformation#getDeclaredField(java.lang.String)
CtTypeInformation#getDeclaredOrInheritedField(java.lang.String)
CtTypeInformation#getDeclaredExecutables()
CtTypeInformation#getAllExecutables()
CtTypeInformation#getTypeErasure()
CtTypeMember#getDeclaringType()
CtTypeMember#getTopLevelType()
CtTypeParameter#getReference()
CtTypeParameter#getTypeParameterDeclarer()
CtTypeParameter#clone()
CtTypeParameter#setFormalCtTypeParameters(java.util.List)
CtTypeParameter#setSuperInterfaces(java.util.Set)
CtTypeParameter#addSuperInterface(spoon.reflect.reference.CtTypeReference)
CtTypeParameter#setTypeMembers(java.util.List)
CtTypeParameter#setFields(java.util.List)
CtTypeParameter#setMethods(java.util.Set)
CtTypeParameter#addMethod(spoon.reflect.declaration.CtMethod)
CtTypeParameter#setNestedTypes(java.util.Set)
CtTypeParameter#addNestedType(spoon.reflect.declaration.CtType)
CtTypeParameter#addFieldAtTop(spoon.reflect.declaration.CtField)
CtTypeParameter#setModifiers(java.util.Set)
CtTypedElement#getType()
CtTypedElement#setType(spoon.reflect.reference.CtTypeReference)
CtUsedService#getServiceType()
CtUsedService#setServiceType(spoon.reflect.reference.CtTypeReference)
CtUsedService#clone()
CtVariable#getDefaultExpression()
CtVariable#getReference()
CtVariable#setDefaultExpression(spoon.reflect.code.CtExpression)
ModifierKind#toString()
PartialEvaluator#evaluate(R extends spoon.reflect.declaration.CtElement)
AnnotationFactory#create(spoon.reflect.declaration.CtPackage,java.lang.String)
AnnotationFactory#create(java.lang.String)
AnnotationFactory#getAnnotationType(java.lang.String)
AnnotationFactory#annotate(spoon.reflect.declaration.CtElement,java.lang.Class,java.lang.String,java.lang.Object)
AnnotationFactory#annotate(spoon.reflect.declaration.CtElement,spoon.reflect.reference.CtTypeReference,java.lang.String,java.lang.Object)
AnnotationFactory#annotate(spoon.reflect.declaration.CtElement,java.lang.Class)
AnnotationFactory#annotate(spoon.reflect.declaration.CtElement,spoon.reflect.reference.CtTypeReference)
ClassFactory#create(spoon.reflect.declaration.CtClass,java.lang.String)
ClassFactory#create(spoon.reflect.declaration.CtPackage,java.lang.String)
ClassFactory#create(java.lang.String)
ClassFactory#get(java.lang.Class)
ClassFactory#get(java.lang.String)
CodeFactory#createBinaryOperator(spoon.reflect.code.CtExpression,spoon.reflect.code.CtExpression,spoon.reflect.code.BinaryOperatorKind)
CodeFactory#createTypeAccess(spoon.reflect.reference.CtTypeReference)
CodeFactory#createTypeAccess(spoon.reflect.reference.CtTypeReference,boolean)
CodeFactory#createTypeAccessWithoutCloningReference(spoon.reflect.reference.CtTypeReference)
CodeFactory#createClassAccess(spoon.reflect.reference.CtTypeReference)
CodeFactory#createConstructorCall(spoon.reflect.reference.CtTypeReference,spoon.reflect.code.CtExpression[])
CodeFactory#createNewClass(spoon.reflect.reference.CtTypeReference,spoon.reflect.declaration.CtClass,spoon.reflect.code.CtExpression[])
CodeFactory#createInvocation(spoon.reflect.code.CtExpression,spoon.reflect.reference.CtExecutableReference,spoon.reflect.code.CtExpression[])
CodeFactory#createInvocation(spoon.reflect.code.CtExpression,spoon.reflect.reference.CtExecutableReference,java.util.List)
CodeFactory#createLiteral(T)
CodeFactory#createLiteralArray(T[])
CodeFactory#createLocalVariable(spoon.reflect.reference.CtTypeReference,java.lang.String,spoon.reflect.code.CtExpression)
CodeFactory#createLocalVariableReference(spoon.reflect.code.CtLocalVariable)
CodeFactory#createLocalVariableReference(spoon.reflect.reference.CtTypeReference,java.lang.String)
CodeFactory#createCatchVariable(spoon.reflect.reference.CtTypeReference,java.lang.String,spoon.reflect.declaration.ModifierKind[])
CodeFactory#createCatchVariableReference(spoon.reflect.code.CtCatchVariable)
CodeFactory#createStatementList(spoon.reflect.code.CtBlock)
CodeFactory#createThisAccess(spoon.reflect.reference.CtTypeReference)
CodeFactory#createThisAccess(spoon.reflect.reference.CtTypeReference,boolean)
CodeFactory#createVariableRead(spoon.reflect.reference.CtVariableReference,boolean)
CodeFactory#createVariableReads(java.util.List)
CodeFactory#createVariableAssignment(spoon.reflect.reference.CtVariableReference,boolean,spoon.reflect.code.CtExpression)
CodeFactory#createVariableAssignments(java.util.List,java.util.List)
CodeFactory#createCtField(java.lang.String,spoon.reflect.reference.CtTypeReference,java.lang.String,spoon.reflect.declaration.ModifierKind[])
CodeFactory#createCtBlock(T extends spoon.reflect.code.CtStatement)
CodeFactory#getOrCreateCtBlock(T extends spoon.reflect.code.CtStatement)
CodeFactory#createCtThrow(java.lang.String)
CodeFactory#createCtCatch(java.lang.String,java.lang.Class,spoon.reflect.code.CtBlock)
CodeFactory#createCtTypeReference(java.lang.Class)
CodeFactory#createCtPackageReference(java.lang.Package)
CodeFactory#createAnnotation(spoon.reflect.reference.CtTypeReference)
CodeFactory#getReferences(java.util.List)
CodeFactory#modifiers(spoon.reflect.declaration.ModifierKind[])
CodeFactory#createCodeSnippetExpression(java.lang.String)
CodeFactory#createCodeSnippetStatement(java.lang.String)
CodeFactory#createComment(java.lang.String,spoon.reflect.code.CtComment$CommentType)
CodeFactory#createInlineComment(java.lang.String)
CodeFactory#createJavaDocTag(java.lang.String,spoon.reflect.code.CtJavaDocTag$TagType)
CompilationUnitFactory#getMap()
CompilationUnitFactory#create()
CompilationUnitFactory#getOrCreate(spoon.reflect.declaration.CtPackage)
CompilationUnitFactory#getOrCreate(spoon.reflect.declaration.CtType)
CompilationUnitFactory#getOrCreate(spoon.reflect.declaration.CtModule)
CompilationUnitFactory#getOrCreate(java.lang.String)
CompilationUnitFactory#removeFromCache(java.lang.String)
ConstructorFactory#create(spoon.reflect.declaration.CtClass,spoon.reflect.declaration.CtConstructor)
ConstructorFactory#create(spoon.reflect.declaration.CtClass,spoon.reflect.declaration.CtMethod)
ConstructorFactory#create(spoon.reflect.declaration.CtClass,java.util.Set,java.util.List,java.util.Set)
ConstructorFactory#createDefault(spoon.reflect.declaration.CtClass)
ConstructorFactory#create(spoon.reflect.declaration.CtClass,java.util.Set,java.util.List,java.util.Set,spoon.reflect.code.CtBlock)
ConstructorFactory#createReference(spoon.reflect.declaration.CtConstructor)
ConstructorFactory#createReference(java.lang.reflect.Constructor)
ConstructorFactory#createReference(spoon.reflect.reference.CtTypeReference,spoon.reflect.code.CtExpression[])
CoreFactory#clone(T extends spoon.reflect.declaration.CtElement)
CoreFactory#createAnnotation()
CoreFactory#createAnnotationType()
CoreFactory#createAnonymousExecutable()
CoreFactory#createArrayRead()
CoreFactory#createArrayWrite()
CoreFactory#createArrayTypeReference()
CoreFactory#createAssert()
CoreFactory#createAssignment()
CoreFactory#createBinaryOperator()
CoreFactory#createBlock()
CoreFactory#createBreak()
CoreFactory#createCase()
CoreFactory#createCatch()
CoreFactory#createClass()
CoreFactory#createTypeParameter()
CoreFactory#createConditional()
CoreFactory#createConstructor()
CoreFactory#createInvisibleArrayConstructor()
CoreFactory#createContinue()
CoreFactory#createDo()
CoreFactory#createEnum()
CoreFactory#createExecutableReference()
CoreFactory#createField()
CoreFactory#createEnumValue()
CoreFactory#createFieldRead()
CoreFactory#createFieldWrite()
CoreFactory#createThisAccess()
CoreFactory#createSuperAccess()
CoreFactory#createFieldReference()
CoreFactory#createFor()
CoreFactory#createForEach()
CoreFactory#createIf()
CoreFactory#createInterface()
CoreFactory#createInvocation()
CoreFactory#createLiteral()
CoreFactory#createLocalVariable()
CoreFactory#createLocalVariableReference()
CoreFactory#createCatchVariable()
CoreFactory#createCatchVariableReference()
CoreFactory#createMethod()
CoreFactory#createAnnotationMethod()
CoreFactory#createNewArray()
CoreFactory#createConstructorCall()
CoreFactory#createNewClass()
CoreFactory#createLambda()
CoreFactory#createExecutableReferenceExpression()
CoreFactory#createOperatorAssignment()
CoreFactory#createPackage()
CoreFactory#createPackageReference()
CoreFactory#createParameter()
CoreFactory#createParameterReference()
CoreFactory#createReturn()
CoreFactory#createSourcePosition(spoon.reflect.cu.CompilationUnit,int,int,int[])
CoreFactory#createPartialSourcePosition(spoon.reflect.cu.CompilationUnit)
CoreFactory#createDeclarationSourcePosition(spoon.reflect.cu.CompilationUnit,int,int,int,int,int,int,int[])
CoreFactory#createBodyHolderSourcePosition(spoon.reflect.cu.CompilationUnit,int,int,int,int,int,int,int,int,int[])
CoreFactory#createStatementList()
CoreFactory#createSwitch()
CoreFactory#createSynchronized()
CoreFactory#createThrow()
CoreFactory#createTry()
CoreFactory#createTryWithResource()
CoreFactory#createTypeParameterReference()
CoreFactory#createWildcardReference()
CoreFactory#createIntersectionTypeReference()
CoreFactory#createTypeReference()
CoreFactory#createTypeAccess()
CoreFactory#createUnaryOperator()
CoreFactory#createVariableRead()
CoreFactory#createVariableWrite()
CoreFactory#createWhile()
CoreFactory#createCodeSnippetExpression()
CoreFactory#createCodeSnippetStatement()
CoreFactory#createComment()
CoreFactory#createJavaDoc()
CoreFactory#createJavaDocTag()
CoreFactory#createImport()
CoreFactory#getMainFactory()
CoreFactory#setMainFactory(spoon.reflect.factory.Factory)
CoreFactory#createCompilationUnit()
CoreFactory#createAnnotationFieldAccess()
CoreFactory#createUnboundVariableReference()
CoreFactory#create(java.lang.Class)
CoreFactory#createWildcardStaticTypeMemberReference()
CoreFactory#createModule()
CoreFactory#createModuleReference()
CoreFactory#createModuleRequirement()
CoreFactory#createPackageExport()
CoreFactory#createProvidedService()
CoreFactory#createUsedService()
EnumFactory#create(spoon.reflect.declaration.CtPackage,java.lang.String)
EnumFactory#create(java.lang.String)
EnumFactory#get(java.lang.String)
EnumFactory#getEnum(java.lang.Class)
EvalFactory#createPartialEvaluator()
ExecutableFactory#createAnonymous(spoon.reflect.declaration.CtClass,spoon.reflect.code.CtBlock)
ExecutableFactory#createParameter(spoon.reflect.declaration.CtExecutable,spoon.reflect.reference.CtTypeReference,java.lang.String)
ExecutableFactory#createParameterReference(spoon.reflect.declaration.CtParameter)
ExecutableFactory#createReference(spoon.reflect.declaration.CtExecutable)
ExecutableFactory#createReference(spoon.reflect.reference.CtTypeReference,spoon.reflect.reference.CtTypeReference,java.lang.String,spoon.reflect.reference.CtTypeReference[])
ExecutableFactory#createReference(spoon.reflect.reference.CtTypeReference,boolean,spoon.reflect.reference.CtTypeReference,java.lang.String,spoon.reflect.reference.CtTypeReference[])
ExecutableFactory#createReference(spoon.reflect.reference.CtTypeReference,boolean,spoon.reflect.reference.CtTypeReference,java.lang.String,java.util.List)
ExecutableFactory#createReference(spoon.reflect.reference.CtTypeReference,spoon.reflect.reference.CtTypeReference,java.lang.String,java.util.List)
ExecutableFactory#createReference(java.lang.String)
Factory#getModel()
Factory#Core()
Factory#Type()
Factory#Enum()
Factory#getEnvironment()
Factory#Package()
Factory#Code()
Factory#Class()
Factory#Field()
Factory#Executable()
Factory#CompilationUnit()
Factory#Interface()
Factory#Method()
Factory#Annotation()
Factory#Eval()
Factory#Constructor()
Factory#Query()
Factory#Module()
Factory#createAnnotation(spoon.reflect.reference.CtTypeReference)
Factory#createVariableAssignment(spoon.reflect.reference.CtVariableReference,boolean,spoon.reflect.code.CtExpression)
Factory#createStatementList(spoon.reflect.code.CtBlock)
Factory#createCtBlock(T extends spoon.reflect.code.CtStatement)
Factory#createBinaryOperator(spoon.reflect.code.CtExpression,spoon.reflect.code.CtExpression,spoon.reflect.code.BinaryOperatorKind)
Factory#createCatchVariable(spoon.reflect.reference.CtTypeReference,java.lang.String,spoon.reflect.declaration.ModifierKind[])
Factory#createCodeSnippetExpression(java.lang.String)
Factory#createConstructorCall(spoon.reflect.reference.CtTypeReference,spoon.reflect.code.CtExpression[])
Factory#createClassAccess(spoon.reflect.reference.CtTypeReference)
Factory#createInvocation(spoon.reflect.code.CtExpression,spoon.reflect.reference.CtExecutableReference,java.util.List)
Factory#createInvocation(spoon.reflect.code.CtExpression,spoon.reflect.reference.CtExecutableReference,spoon.reflect.code.CtExpression[])
Factory#createLiteral(T)
Factory#createLocalVariable(spoon.reflect.reference.CtTypeReference,java.lang.String,spoon.reflect.code.CtExpression)
Factory#createLiteralArray(T[])
Factory#createNewClass(spoon.reflect.reference.CtTypeReference,spoon.reflect.declaration.CtClass,spoon.reflect.code.CtExpression[])
Factory#createVariableAssignments(java.util.List,java.util.List)
Factory#createThisAccess(spoon.reflect.reference.CtTypeReference)
Factory#createThisAccess(spoon.reflect.reference.CtTypeReference,boolean)
Factory#createTypeAccess(spoon.reflect.reference.CtTypeReference)
Factory#createTypeAccess(spoon.reflect.reference.CtTypeReference,boolean)
Factory#createTypeAccessWithoutCloningReference(spoon.reflect.reference.CtTypeReference)
Factory#createVariableRead(spoon.reflect.reference.CtVariableReference,boolean)
Factory#createCtField(java.lang.String,spoon.reflect.reference.CtTypeReference,java.lang.String,spoon.reflect.declaration.ModifierKind[])
Factory#createCatchVariableReference(spoon.reflect.code.CtCatchVariable)
Factory#createLocalVariableReference(spoon.reflect.code.CtLocalVariable)
Factory#createLocalVariableReference(spoon.reflect.reference.CtTypeReference,java.lang.String)
Factory#createCtTypeReference(java.lang.Class)
Factory#createVariableReads(java.util.List)
Factory#createCtCatch(java.lang.String,java.lang.Class,spoon.reflect.code.CtBlock)
Factory#createCodeSnippetStatement(java.lang.String)
Factory#createComment(java.lang.String,spoon.reflect.code.CtComment$CommentType)
Factory#createJavaDocTag(java.lang.String,spoon.reflect.code.CtJavaDocTag$TagType)
Factory#createInlineComment(java.lang.String)
Factory#createCtThrow(java.lang.String)
Factory#createCtPackageReference(java.lang.Package)
Factory#createDefault(spoon.reflect.declaration.CtClass)
Factory#createAnnotation()
Factory#createBlock()
Factory#createReturn()
Factory#createStatementList()
Factory#createCase()
Factory#createSwitch()
Factory#createEnum()
Factory#createAnnotationType()
Factory#createAssignment()
Factory#createOperatorAssignment()
Factory#createExecutableReferenceExpression()
Factory#createAnnotationFieldAccess()
Factory#createArrayRead()
Factory#createArrayWrite()
Factory#createAssert()
Factory#createBinaryOperator()
Factory#createCatchVariable()
Factory#createCodeSnippetExpression()
Factory#createConditional()
Factory#createConstructorCall()
Factory#createFieldRead()
Factory#createFieldWrite()
Factory#createInvocation()
Factory#createLambda()
Factory#createLiteral()
Factory#createLocalVariable()
Factory#createNewArray()
Factory#createNewClass()
Factory#createSuperAccess()
Factory#createThisAccess()
Factory#createTypeAccess()
Factory#createUnaryOperator()
Factory#createVariableRead()
Factory#createVariableWrite()
Factory#createAnnotationMethod()
Factory#createClass()
Factory#createConstructor()
Factory#createInvisibleArrayConstructor()
Factory#createEnumValue()
Factory#createField()
Factory#createInterface()
Factory#createMethod()
Factory#createParameter()
Factory#createArrayTypeReference()
Factory#createCatchVariableReference()
Factory#createExecutableReference()
Factory#createFieldReference()
Factory#createIntersectionTypeReference()
Factory#createLocalVariableReference()
Factory#createParameterReference()
Factory#createTypeReference()
Factory#createUnboundVariableReference()
Factory#createBreak()
Factory#createCatch()
Factory#createCodeSnippetStatement()
Factory#createComment()
Factory#createContinue()
Factory#createDo()
Factory#createFor()
Factory#createForEach()
Factory#createIf()
Factory#createSynchronized()
Factory#createThrow()
Factory#createTry()
Factory#createTryWithResource()
Factory#createWhile()
Factory#createCompilationUnit()
Factory#createSourcePosition(spoon.reflect.cu.CompilationUnit,int,int,int[])
Factory#createBodyHolderSourcePosition(spoon.reflect.cu.CompilationUnit,int,int,int,int,int,int,int,int,int[])
Factory#createDeclarationSourcePosition(spoon.reflect.cu.CompilationUnit,int,int,int,int,int,int,int[])
Factory#createAnonymousExecutable()
Factory#createPackage()
Factory#createTypeParameter()
Factory#createPackageReference()
Factory#createTypeParameterReference()
Factory#createWildcardReference()
Factory#createPartialEvaluator()
Factory#createParameter(spoon.reflect.declaration.CtExecutable,spoon.reflect.reference.CtTypeReference,java.lang.String)
Factory#createParameterReference(spoon.reflect.declaration.CtParameter)
Factory#createAnonymous(spoon.reflect.declaration.CtClass,spoon.reflect.code.CtBlock)
Factory#createArrayReference(java.lang.String)
Factory#createArrayReference(spoon.reflect.declaration.CtType)
Factory#createArrayReference(spoon.reflect.reference.CtTypeReference)
Factory#createIntersectionTypeReferenceWithBounds(java.util.List)
Factory#createTypeAdapter(spoon.reflect.declaration.CtFormalTypeDeclarer)
Factory#createReferences(java.util.List)
Factory#createArrayReference(spoon.reflect.reference.CtTypeReference,int)
Factory#createTypeParameterReference(java.lang.String)
Factory#createQuery()
Factory#createQuery(java.lang.Object)
Factory#createQuery(java.lang.Object[])
Factory#createQuery(java.lang.Iterable)
Factory#createAnnotationType(java.lang.String)
Factory#createAnnotationType(spoon.reflect.declaration.CtPackage,java.lang.String)
Factory#createClass(java.lang.String)
Factory#createClass(spoon.reflect.declaration.CtClass,java.lang.String)
Factory#createClass(spoon.reflect.declaration.CtPackage,java.lang.String)
Factory#createConstructor(spoon.reflect.declaration.CtClass,spoon.reflect.declaration.CtConstructor)
Factory#createConstructor(spoon.reflect.declaration.CtClass,spoon.reflect.declaration.CtMethod)
Factory#createConstructor(spoon.reflect.declaration.CtClass,java.util.Set,java.util.List,java.util.Set)
Factory#createConstructor(spoon.reflect.declaration.CtClass,java.util.Set,java.util.List,java.util.Set,spoon.reflect.code.CtBlock)
Factory#createEnum(java.lang.String)
Factory#createEnum(spoon.reflect.declaration.CtPackage,java.lang.String)
Factory#createField(spoon.reflect.declaration.CtType,java.util.Set,spoon.reflect.reference.CtTypeReference,java.lang.String)
Factory#createField(spoon.reflect.declaration.CtType,java.util.Set,spoon.reflect.reference.CtTypeReference,java.lang.String,spoon.reflect.code.CtExpression)
Factory#createField(spoon.reflect.declaration.CtType,spoon.reflect.declaration.CtField)
Factory#createInterface(spoon.reflect.declaration.CtPackage,java.lang.String)
Factory#createInterface(spoon.reflect.declaration.CtType,java.lang.String)
Factory#createInterface(java.lang.String)
Factory#createMethod(spoon.reflect.declaration.CtClass,java.util.Set,spoon.reflect.reference.CtTypeReference,java.lang.String,java.util.List,java.util.Set,spoon.reflect.code.CtBlock)
Factory#createMethod(spoon.reflect.declaration.CtType,spoon.reflect.declaration.CtMethod,boolean)
Factory#createMethod(spoon.reflect.declaration.CtType,java.util.Set,spoon.reflect.reference.CtTypeReference,java.lang.String,java.util.List,java.util.Set)
Factory#createPackage(spoon.reflect.declaration.CtPackage,java.lang.String)
Factory#createElement(java.lang.Class)
Factory#createImport(spoon.reflect.reference.CtReference)
Factory#createWildcardStaticTypeMemberReference(spoon.reflect.reference.CtTypeReference)
Factory#createPackageExport(spoon.reflect.reference.CtPackageReference)
Factory#createProvidedService(spoon.reflect.reference.CtTypeReference)
Factory#createModuleRequirement(spoon.reflect.reference.CtModuleReference)
Factory#createModule(java.lang.String)
Factory#createModuleReference(spoon.reflect.declaration.CtModule)
Factory#createUsedService(spoon.reflect.reference.CtTypeReference)
Factory#createPartialSourcePosition(spoon.reflect.cu.CompilationUnit)
FactoryImpl#getParentFactory()
FactoryImpl#Annotation()
FactoryImpl#Class()
FactoryImpl#Code()
FactoryImpl#Constructor()
FactoryImpl#Core()
FactoryImpl#Enum()
FactoryImpl#getEnvironment()
FactoryImpl#Executable()
FactoryImpl#Eval()
FactoryImpl#Field()
FactoryImpl#Interface()
FactoryImpl#Method()
FactoryImpl#Package()
FactoryImpl#CompilationUnit()
FactoryImpl#Type()
FactoryImpl#Query()
FactoryImpl#Module()
FactoryImpl#dedup(java.lang.String)
FactoryImpl#getModel()
FactoryImpl#createAnnotation(spoon.reflect.reference.CtTypeReference)
FactoryImpl#createVariableAssignment(spoon.reflect.reference.CtVariableReference,boolean,spoon.reflect.code.CtExpression)
FactoryImpl#createStatementList(spoon.reflect.code.CtBlock)
FactoryImpl#createCtBlock(T extends spoon.reflect.code.CtStatement)
FactoryImpl#createBinaryOperator(spoon.reflect.code.CtExpression,spoon.reflect.code.CtExpression,spoon.reflect.code.BinaryOperatorKind)
FactoryImpl#createCatchVariable(spoon.reflect.reference.CtTypeReference,java.lang.String,spoon.reflect.declaration.ModifierKind[])
FactoryImpl#createCodeSnippetExpression(java.lang.String)
FactoryImpl#createConstructorCall(spoon.reflect.reference.CtTypeReference,spoon.reflect.code.CtExpression[])
FactoryImpl#createClassAccess(spoon.reflect.reference.CtTypeReference)
FactoryImpl#createInvocation(spoon.reflect.code.CtExpression,spoon.reflect.reference.CtExecutableReference,java.util.List)
FactoryImpl#createInvocation(spoon.reflect.code.CtExpression,spoon.reflect.reference.CtExecutableReference,spoon.reflect.code.CtExpression[])
FactoryImpl#createLiteral(T)
FactoryImpl#createLocalVariable(spoon.reflect.reference.CtTypeReference,java.lang.String,spoon.reflect.code.CtExpression)
FactoryImpl#createLiteralArray(T[])
FactoryImpl#createNewClass(spoon.reflect.reference.CtTypeReference,spoon.reflect.declaration.CtClass,spoon.reflect.code.CtExpression[])
FactoryImpl#createVariableAssignments(java.util.List,java.util.List)
FactoryImpl#createThisAccess(spoon.reflect.reference.CtTypeReference)
FactoryImpl#createThisAccess(spoon.reflect.reference.CtTypeReference,boolean)
FactoryImpl#createTypeAccess(spoon.reflect.reference.CtTypeReference)
FactoryImpl#createTypeAccess(spoon.reflect.reference.CtTypeReference,boolean)
FactoryImpl#createTypeAccessWithoutCloningReference(spoon.reflect.reference.CtTypeReference)
FactoryImpl#createVariableRead(spoon.reflect.reference.CtVariableReference,boolean)
FactoryImpl#createCtField(java.lang.String,spoon.reflect.reference.CtTypeReference,java.lang.String,spoon.reflect.declaration.ModifierKind[])
FactoryImpl#createCatchVariableReference(spoon.reflect.code.CtCatchVariable)
FactoryImpl#createLocalVariableReference(spoon.reflect.code.CtLocalVariable)
FactoryImpl#createLocalVariableReference(spoon.reflect.reference.CtTypeReference,java.lang.String)
FactoryImpl#createCtTypeReference(java.lang.Class)
FactoryImpl#createVariableReads(java.util.List)
FactoryImpl#createCtCatch(java.lang.String,java.lang.Class,spoon.reflect.code.CtBlock)
FactoryImpl#createCodeSnippetStatement(java.lang.String)
FactoryImpl#createComment(java.lang.String,spoon.reflect.code.CtComment$CommentType)
FactoryImpl#createInlineComment(java.lang.String)
FactoryImpl#createJavaDocTag(java.lang.String,spoon.reflect.code.CtJavaDocTag$TagType)
FactoryImpl#createCtThrow(java.lang.String)
FactoryImpl#createCtPackageReference(java.lang.Package)
FactoryImpl#createDefault(spoon.reflect.declaration.CtClass)
FactoryImpl#createAnnotation()
FactoryImpl#createBlock()
FactoryImpl#createReturn()
FactoryImpl#createStatementList()
FactoryImpl#createCase()
FactoryImpl#createSwitch()
FactoryImpl#createEnum()
FactoryImpl#createAnnotationType()
FactoryImpl#createAssignment()
FactoryImpl#createOperatorAssignment()
FactoryImpl#createExecutableReferenceExpression()
FactoryImpl#createAnnotationFieldAccess()
FactoryImpl#createArrayRead()
FactoryImpl#createArrayWrite()
FactoryImpl#createAssert()
FactoryImpl#createBinaryOperator()
FactoryImpl#createCatchVariable()
FactoryImpl#createCodeSnippetExpression()
FactoryImpl#createConditional()
FactoryImpl#createConstructorCall()
FactoryImpl#createFieldRead()
FactoryImpl#createFieldWrite()
FactoryImpl#createInvocation()
FactoryImpl#createLambda()
FactoryImpl#createLiteral()
FactoryImpl#createLocalVariable()
FactoryImpl#createNewArray()
FactoryImpl#createNewClass()
FactoryImpl#createSuperAccess()
FactoryImpl#createThisAccess()
FactoryImpl#createTypeAccess()
FactoryImpl#createUnaryOperator()
FactoryImpl#createVariableRead()
FactoryImpl#createVariableWrite()
FactoryImpl#createAnnotationMethod()
FactoryImpl#createClass()
FactoryImpl#createConstructor()
FactoryImpl#createInvisibleArrayConstructor()
FactoryImpl#createEnumValue()
FactoryImpl#createField()
FactoryImpl#createInterface()
FactoryImpl#createMethod()
FactoryImpl#createParameter()
FactoryImpl#createArrayTypeReference()
FactoryImpl#createCatchVariableReference()
FactoryImpl#createExecutableReference()
FactoryImpl#createFieldReference()
FactoryImpl#createIntersectionTypeReference()
FactoryImpl#createLocalVariableReference()
FactoryImpl#createParameterReference()
FactoryImpl#createTypeReference()
FactoryImpl#createUnboundVariableReference()
FactoryImpl#createBreak()
FactoryImpl#createCatch()
FactoryImpl#createCodeSnippetStatement()
FactoryImpl#createComment()
FactoryImpl#createContinue()
FactoryImpl#createDo()
FactoryImpl#createFor()
FactoryImpl#createForEach()
FactoryImpl#createIf()
FactoryImpl#createSynchronized()
FactoryImpl#createThrow()
FactoryImpl#createTry()
FactoryImpl#createTryWithResource()
FactoryImpl#createWhile()
FactoryImpl#createCompilationUnit()
FactoryImpl#createSourcePosition(spoon.reflect.cu.CompilationUnit,int,int,int[])
FactoryImpl#createBodyHolderSourcePosition(spoon.reflect.cu.CompilationUnit,int,int,int,int,int,int,int,int,int[])
FactoryImpl#createDeclarationSourcePosition(spoon.reflect.cu.CompilationUnit,int,int,int,int,int,int,int[])
FactoryImpl#createAnonymousExecutable()
FactoryImpl#createPackage()
FactoryImpl#createTypeParameter()
FactoryImpl#createPackageReference()
FactoryImpl#createTypeParameterReference()
FactoryImpl#createWildcardReference()
FactoryImpl#createPartialEvaluator()
FactoryImpl#createParameter(spoon.reflect.declaration.CtExecutable,spoon.reflect.reference.CtTypeReference,java.lang.String)
FactoryImpl#createParameterReference(spoon.reflect.declaration.CtParameter)
FactoryImpl#createAnonymous(spoon.reflect.declaration.CtClass,spoon.reflect.code.CtBlock)
FactoryImpl#createArrayReference(java.lang.String)
FactoryImpl#createArrayReference(spoon.reflect.declaration.CtType)
FactoryImpl#createArrayReference(spoon.reflect.reference.CtTypeReference)
FactoryImpl#createIntersectionTypeReferenceWithBounds(java.util.List)
FactoryImpl#createTypeAdapter(spoon.reflect.declaration.CtFormalTypeDeclarer)
FactoryImpl#createReferences(java.util.List)
FactoryImpl#createArrayReference(spoon.reflect.reference.CtTypeReference,int)
FactoryImpl#createTypeParameterReference(java.lang.String)
FactoryImpl#createQuery()
FactoryImpl#createQuery(java.lang.Object)
FactoryImpl#createQuery(java.lang.Object[])
FactoryImpl#createQuery(java.lang.Iterable)
FactoryImpl#createAnnotationType(java.lang.String)
FactoryImpl#createAnnotationType(spoon.reflect.declaration.CtPackage,java.lang.String)
FactoryImpl#createClass(java.lang.String)
FactoryImpl#createClass(spoon.reflect.declaration.CtClass,java.lang.String)
FactoryImpl#createClass(spoon.reflect.declaration.CtPackage,java.lang.String)
FactoryImpl#createConstructor(spoon.reflect.declaration.CtClass,spoon.reflect.declaration.CtConstructor)
FactoryImpl#createConstructor(spoon.reflect.declaration.CtClass,spoon.reflect.declaration.CtMethod)
FactoryImpl#createConstructor(spoon.reflect.declaration.CtClass,java.util.Set,java.util.List,java.util.Set)
FactoryImpl#createConstructor(spoon.reflect.declaration.CtClass,java.util.Set,java.util.List,java.util.Set,spoon.reflect.code.CtBlock)
FactoryImpl#createEnum(java.lang.String)
FactoryImpl#createEnum(spoon.reflect.declaration.CtPackage,java.lang.String)
FactoryImpl#createField(spoon.reflect.declaration.CtType,java.util.Set,spoon.reflect.reference.CtTypeReference,java.lang.String)
FactoryImpl#createField(spoon.reflect.declaration.CtType,java.util.Set,spoon.reflect.reference.CtTypeReference,java.lang.String,spoon.reflect.code.CtExpression)
FactoryImpl#createField(spoon.reflect.declaration.CtType,spoon.reflect.declaration.CtField)
FactoryImpl#createInterface(spoon.reflect.declaration.CtPackage,java.lang.String)
FactoryImpl#createInterface(spoon.reflect.declaration.CtType,java.lang.String)
FactoryImpl#createInterface(java.lang.String)
FactoryImpl#createMethod(spoon.reflect.declaration.CtClass,java.util.Set,spoon.reflect.reference.CtTypeReference,java.lang.String,java.util.List,java.util.Set,spoon.reflect.code.CtBlock)
FactoryImpl#createMethod(spoon.reflect.declaration.CtType,spoon.reflect.declaration.CtMethod,boolean)
FactoryImpl#createMethod(spoon.reflect.declaration.CtType,java.util.Set,spoon.reflect.reference.CtTypeReference,java.lang.String,java.util.List,java.util.Set)
FactoryImpl#createPackage(spoon.reflect.declaration.CtPackage,java.lang.String)
FactoryImpl#createElement(java.lang.Class)
FactoryImpl#createImport(spoon.reflect.reference.CtReference)
FactoryImpl#createWildcardStaticTypeMemberReference(spoon.reflect.reference.CtTypeReference)
FactoryImpl#createPackageExport(spoon.reflect.reference.CtPackageReference)
FactoryImpl#createProvidedService(spoon.reflect.reference.CtTypeReference)
FactoryImpl#createModuleRequirement(spoon.reflect.reference.CtModuleReference)
FactoryImpl#createModule(java.lang.String)
FactoryImpl#createModuleReference(spoon.reflect.declaration.CtModule)
FactoryImpl#createUsedService(spoon.reflect.reference.CtTypeReference)
FactoryImpl#createPartialSourcePosition(spoon.reflect.cu.CompilationUnit)
FieldFactory#create(spoon.reflect.declaration.CtType,java.util.Set,spoon.reflect.reference.CtTypeReference,java.lang.String)
FieldFactory#create(spoon.reflect.declaration.CtType,java.util.Set,spoon.reflect.reference.CtTypeReference,java.lang.String,spoon.reflect.code.CtExpression)
FieldFactory#create(spoon.reflect.declaration.CtType,spoon.reflect.declaration.CtField)
FieldFactory#createReference(spoon.reflect.declaration.CtField)
FieldFactory#createReference(spoon.reflect.reference.CtTypeReference,spoon.reflect.reference.CtTypeReference,java.lang.String)
FieldFactory#createReference(java.lang.reflect.Field)
FieldFactory#createReference(java.lang.String)
InterfaceFactory#create(spoon.reflect.declaration.CtPackage,java.lang.String)
InterfaceFactory#create(spoon.reflect.declaration.CtType,java.lang.String)
InterfaceFactory#create(java.lang.String)
InterfaceFactory#get(java.lang.String)
InterfaceFactory#get(java.lang.Class)
MethodFactory#create(spoon.reflect.declaration.CtClass,java.util.Set,spoon.reflect.reference.CtTypeReference,java.lang.String,java.util.List,java.util.Set,spoon.reflect.code.CtBlock)
MethodFactory#create(spoon.reflect.declaration.CtType,spoon.reflect.declaration.CtMethod,boolean)
MethodFactory#create(spoon.reflect.declaration.CtType,java.util.Set,spoon.reflect.reference.CtTypeReference,java.lang.String,java.util.List,java.util.Set)
MethodFactory#createReference(spoon.reflect.declaration.CtMethod)
MethodFactory#createReference(java.lang.reflect.Method)
MethodFactory#getMainMethods()
ModuleFactory#getUnnamedModule()
ModuleFactory#getAllModules()
ModuleFactory#getModule(java.lang.String)
ModuleFactory#getOrCreate(java.lang.String)
ModuleFactory#createReference(spoon.reflect.declaration.CtModule)
ModuleFactory#createModuleRequirement(spoon.reflect.reference.CtModuleReference)
ModuleFactory#createPackageExport(spoon.reflect.reference.CtPackageReference)
ModuleFactory#createProvidedService(spoon.reflect.reference.CtTypeReference)
ModuleFactory#createUsedService(spoon.reflect.reference.CtTypeReference)
PackageFactory#createReference(spoon.reflect.declaration.CtPackage)
PackageFactory#createReference(java.lang.Package)
PackageFactory#topLevel()
PackageFactory#createReference(java.lang.String)
PackageFactory#create(spoon.reflect.declaration.CtPackage,java.lang.String)
PackageFactory#getOrCreate(java.lang.String)
PackageFactory#getOrCreate(java.lang.String,spoon.reflect.declaration.CtModule)
PackageFactory#get(java.lang.String)
PackageFactory#getAll()
PackageFactory#getRootPackage()
QueryFactory#createQuery()
QueryFactory#createQuery(java.lang.Object)
QueryFactory#createQuery(java.lang.Iterable)
QueryFactory#createQuery(java.lang.Object[])
TypeFactory#nullType()
TypeFactory#voidType()
TypeFactory#voidPrimitiveType()
TypeFactory#stringType()
TypeFactory#booleanType()
TypeFactory#booleanPrimitiveType()
TypeFactory#byteType()
TypeFactory#bytePrimitiveType()
TypeFactory#characterType()
TypeFactory#characterPrimitiveType()
TypeFactory#integerType()
TypeFactory#integerPrimitiveType()
TypeFactory#longType()
TypeFactory#longPrimitiveType()
TypeFactory#floatType()
TypeFactory#floatPrimitiveType()
TypeFactory#doubleType()
TypeFactory#doublePrimitiveType()
TypeFactory#shortType()
TypeFactory#shortPrimitiveType()
TypeFactory#dateType()
TypeFactory#objectType()
TypeFactory#createArrayReference(spoon.reflect.declaration.CtType)
TypeFactory#createArrayReference(spoon.reflect.reference.CtTypeReference)
TypeFactory#createArrayReference(spoon.reflect.reference.CtTypeReference,int)
TypeFactory#createArrayReference(java.lang.String)
TypeFactory#createReference(java.lang.Class)
TypeFactory#createReference(java.lang.Class,boolean)
TypeFactory#createReference(spoon.reflect.declaration.CtType)
TypeFactory#createWildcardStaticTypeMemberReference(spoon.reflect.reference.CtTypeReference)
TypeFactory#createReference(spoon.reflect.declaration.CtType,boolean)
TypeFactory#createReference(spoon.reflect.declaration.CtTypeParameter)
TypeFactory#createReference(java.lang.String)
TypeFactory#get(java.lang.String)
TypeFactory#getAll()
TypeFactory#getAll(boolean)
TypeFactory#get(java.lang.Class)
TypeFactory#createReferences(java.util.List)
TypeFactory#createTypeParameterReference(java.lang.String)
TypeFactory#createTypeAdapter(spoon.reflect.declaration.CtFormalTypeDeclarer)
TypeFactory#createIntersectionTypeReferenceWithBounds(java.util.List)
TypeFactory#getDefaultBoundingType()
TypeFactory#createImport(spoon.reflect.reference.CtReference)
AbstractRoleHandler#getRole()
AbstractRoleHandler#getTargetType()
AbstractRoleHandler#setValue(W,X)
AbstractRoleHandler#getValueClass()
AbstractRoleHandler#asList(W)
AbstractRoleHandler#asSet(W)
AbstractRoleHandler#asMap(W)
AbstractRoleHandler#toString()
ListHandler#getContainerKind()
ListHandler#asCollection(W)
ListHandler#asList(W)
MapHandler#getContainerKind()
MapHandler#asCollection(W)
MapHandler#asMap(W)
RoleHandlerHelper#getRoleHandler(java.lang.Class,spoon.reflect.path.CtRole)
RoleHandlerHelper#getOptionalRoleHandler(java.lang.Class,spoon.reflect.path.CtRole)
RoleHandlerHelper#getRoleHandlers(java.lang.Class)
RoleHandlerHelper#forEachRoleHandler(java.util.function.Consumer)
RoleHandlerHelper#getRoleHandlerWrtParent(spoon.reflect.declaration.CtElement)
SetHandler#getContainerKind()
SetHandler#asCollection(W)
SetHandler#asSet(W)
SingleHandler#getContainerKind()
SingleHandler#asCollection(W)
SingleHandler#asList(W)
SingleHandler#asSet(W)
RoleHandler#getValue(T)
RoleHandler#setValue(T,U)
RoleHandler#getRole()
RoleHandler#getTargetType()
RoleHandler#getValueClass()
RoleHandler#getContainerKind()
RoleHandler#asCollection(T)
RoleHandler#asSet(T)
RoleHandler#asList(T)
RoleHandler#asMap(T)
AbstractPathElement#getArguments()
AbstractPathElement#addArgument(java.lang.String,java.lang.String)
CtNamedPathElement#getPattern()
CtNamedPathElement#toString()
CtNamedPathElement#getElements(java.util.Collection)
CtNamedPathElement#scanElements(java.util.Collection)
CtPathElement#getElements(java.util.Collection)
CtPathElement#addArgument(java.lang.String,java.lang.String)
CtPathImpl#getElements()
CtPathImpl#evaluateOn(spoon.reflect.declaration.CtElement[])
CtPathImpl#addFirst(spoon.reflect.path.impl.CtPathElement)
CtPathImpl#addLast(spoon.reflect.path.impl.CtPathElement)
CtPathImpl#toString()
CtRolePathElement#getRole()
CtRolePathElement#toString()
CtRolePathElement#getElements(java.util.Collection)
CtTypedNameElement#getType()
CtTypedNameElement#toString()
CtTypedNameElement#getElements(java.util.Collection)
CtElementPathBuilder#fromElement(spoon.reflect.declaration.CtElement,spoon.reflect.declaration.CtElement)
CtPath#evaluateOn(spoon.reflect.declaration.CtElement[])
CtPathBuilder#name(java.lang.String,java.lang.String[][])
CtPathBuilder#wildcard()
CtPathBuilder#recursiveWildcard()
CtPathBuilder#type(java.lang.Class,java.lang.String[][])
CtPathBuilder#role(spoon.reflect.path.CtRole,java.lang.String[][])
CtPathBuilder#build()
CtPathStringBuilder#fromString(java.lang.String)
CtRole#fromName(java.lang.String)
CtRole#getCamelCaseName()
CtRole#toString()
CtRole#getSuperRole()
CtRole#getSubRoles()
CtActualTypeContainer#getActualTypeArguments()
CtActualTypeContainer#setActualTypeArguments(java.util.List)
CtActualTypeContainer#addActualTypeArgument(spoon.reflect.reference.CtTypeReference)
CtActualTypeContainer#removeActualTypeArgument(spoon.reflect.reference.CtTypeReference)
CtArrayTypeReference#getComponentType()
CtArrayTypeReference#getArrayType()
CtArrayTypeReference#setComponentType(spoon.reflect.reference.CtTypeReference)
CtArrayTypeReference#getDimensionCount()
CtArrayTypeReference#getSimpleName()
CtArrayTypeReference#clone()
CtCatchVariableReference#getDeclaration()
CtCatchVariableReference#clone()
CtExecutableReference#isConstructor()
CtExecutableReference#getActualMethod()
CtExecutableReference#getActualConstructor()
CtExecutableReference#getDeclaration()
CtExecutableReference#getExecutableDeclaration()
CtExecutableReference#getDeclaringType()
CtExecutableReference#getType()
CtExecutableReference#getParameters()
CtExecutableReference#setParameters(java.util.List)
CtExecutableReference#isOverriding(spoon.reflect.reference.CtExecutableReference)
CtExecutableReference#getOverridingExecutable()
CtExecutableReference#getOverridingExecutable(spoon.reflect.reference.CtTypeReference)
CtExecutableReference#isStatic()
CtExecutableReference#setDeclaringType(spoon.reflect.reference.CtTypeReference)
CtExecutableReference#setStatic(boolean)
CtExecutableReference#setType(spoon.reflect.reference.CtTypeReference)
CtExecutableReference#isFinal()
CtExecutableReference#getSignature()
CtExecutableReference#clone()
CtFieldReference#getActualField()
CtFieldReference#getDeclaration()
CtFieldReference#getFieldDeclaration()
CtFieldReference#getDeclaringType()
CtFieldReference#getQualifiedName()
CtFieldReference#isFinal()
CtFieldReference#isStatic()
CtFieldReference#setDeclaringType(spoon.reflect.reference.CtTypeReference)
CtFieldReference#setFinal(boolean)
CtFieldReference#setStatic(boolean)
CtFieldReference#clone()
CtIntersectionTypeReference#getBounds()
CtIntersectionTypeReference#setBounds(java.util.List)
CtIntersectionTypeReference#addBound(spoon.reflect.reference.CtTypeReference)
CtIntersectionTypeReference#removeBound(spoon.reflect.reference.CtTypeReference)
CtIntersectionTypeReference#clone()
CtLocalVariableReference#getDeclaration()
CtLocalVariableReference#clone()
CtModuleReference#getDeclaration()
CtModuleReference#clone()
CtPackageReference#getDeclaration()
CtPackageReference#getActualPackage()
CtPackageReference#isUnnamedPackage()
CtPackageReference#clone()
CtPackageReference#getSimpleName()
CtPackageReference#getQualifiedName()
CtParameterReference#getDeclaringExecutable()
CtParameterReference#getDeclaration()
CtParameterReference#clone()
CtReference#getSimpleName()
CtReference#setSimpleName(java.lang.String)
CtReference#getDeclaration()
CtReference#clone()
CtReference#setComments(java.util.List)
CtTypeParameterReference#isUpper()
CtTypeParameterReference#setBounds(java.util.List)
CtTypeParameterReference#setUpper(boolean)
CtTypeParameterReference#addBound(spoon.reflect.reference.CtTypeReference)
CtTypeParameterReference#removeBound(spoon.reflect.reference.CtTypeReference)
CtTypeParameterReference#getBoundingType()
CtTypeParameterReference#setBoundingType(spoon.reflect.reference.CtTypeReference)
CtTypeParameterReference#getDeclaration()
CtTypeParameterReference#clone()
CtTypeParameterReference#setActualTypeArguments(java.util.List)
CtTypeParameterReference#isDefaultBoundingType()
CtTypeReference#getSimpleName()
CtTypeReference#getActualClass()
CtTypeReference#getDeclaration()
CtTypeReference#getTypeDeclaration()
CtTypeReference#getDeclaringType()
CtTypeReference#getPackage()
CtTypeReference#box()
CtTypeReference#unbox()
CtTypeReference#setDeclaringType(spoon.reflect.reference.CtTypeReference)
CtTypeReference#setPackage(spoon.reflect.reference.CtPackageReference)
CtTypeReference#asCtIntersectionTypeReference()
CtTypeReference#clone()
CtTypeReference#getSuperInterfaces()
CtTypeReference#getSuperclass()
CtTypeReference#getModifiers()
CtTypeReference#canAccess(spoon.reflect.reference.CtTypeReference)
CtTypeReference#getTopLevelType()
CtTypeReference#getAccessType()
CtTypeReference#getTypeParameterDeclaration()
CtUnboundVariableReference#clone()
CtUnboundVariableReference#setAnnotations(java.util.List)
CtVariableReference#getType()
CtVariableReference#setType(spoon.reflect.reference.CtTypeReference)
CtVariableReference#getDeclaration()
CtVariableReference#getModifiers()
CtVariableReference#clone()
CtWildcardReference#clone()
CtWildcardReference#setSimpleName(java.lang.String)
CtConsumableFunction#apply(T,spoon.reflect.visitor.chain.CtConsumer)
CtConsumer#accept(T)
CtFunction#apply(T)
CtQuery#filterChildren(spoon.reflect.visitor.Filter)
CtQuery#select(spoon.reflect.visitor.Filter)
CtQuery#map(spoon.reflect.visitor.chain.CtFunction)
CtQuery#setInput(java.lang.Object[])
CtQuery#forEach(spoon.reflect.visitor.chain.CtConsumer)
CtQuery#list()
CtQuery#list(java.lang.Class)
CtQuery#first()
CtQuery#first(java.lang.Class)
CtQuery#failurePolicy(spoon.reflect.visitor.chain.QueryFailurePolicy)
CtQuery#name(java.lang.String)
CtQuery#map(spoon.reflect.visitor.chain.CtConsumableFunction)
CtQuery#terminate()
CtQuery#isTerminated()
CtQueryAware#setQuery(spoon.reflect.visitor.chain.CtQuery)
CtQueryImpl#getInputs()
CtQueryImpl#setInput(java.lang.Object[])
CtQueryImpl#addInput(java.lang.Object[])
CtQueryImpl#addInput(java.lang.Iterable)
CtQueryImpl#forEach(spoon.reflect.visitor.chain.CtConsumer)
CtQueryImpl#list()
CtQueryImpl#list(java.lang.Class)
CtQueryImpl#first()
CtQueryImpl#first(java.lang.Class)
CtQueryImpl#map(spoon.reflect.visitor.chain.CtConsumableFunction)
CtQueryImpl#map(spoon.reflect.visitor.chain.CtFunction)
CtQueryImpl#filterChildren(spoon.reflect.visitor.Filter)
CtQueryImpl#select(spoon.reflect.visitor.Filter)
CtQueryImpl#isTerminated()
CtQueryImpl#terminate()
CtQueryImpl#evaluate(I,spoon.reflect.visitor.chain.CtConsumer)
CtQueryImpl#name(java.lang.String)
CtQueryImpl#failurePolicy(spoon.reflect.visitor.chain.QueryFailurePolicy)
CtQueryImpl#stepFailurePolicy(spoon.reflect.visitor.chain.QueryFailurePolicy)
CtQueryImpl#logging(boolean)
CtQueryable#filterChildren(spoon.reflect.visitor.Filter)
CtQueryable#map(spoon.reflect.visitor.chain.CtFunction)
CtQueryable#map(spoon.reflect.visitor.chain.CtConsumableFunction)
CtScannerListener#enter(spoon.reflect.declaration.CtElement)
CtScannerListener#exit(spoon.reflect.declaration.CtElement)
AbstractFilter#getType()
AbstractFilter#matches(T extends spoon.reflect.declaration.CtElement)
AllMethodsSameSignatureFunction#includingSelf(boolean)
AllMethodsSameSignatureFunction#includingLambdas(boolean)
AllMethodsSameSignatureFunction#apply(spoon.reflect.declaration.CtExecutable,spoon.reflect.visitor.chain.CtConsumer)
AllMethodsSameSignatureFunction#setQuery(spoon.reflect.visitor.chain.CtQuery)
AllTypeMembersFunction#distinctSet(java.util.Set)
AllTypeMembersFunction#apply(spoon.reflect.declaration.CtTypeInformation,spoon.reflect.visitor.chain.CtConsumer)
AllTypeMembersFunction#setQuery(spoon.reflect.visitor.chain.CtQuery)
AnnotationFilter#matches(E extends spoon.reflect.declaration.CtElement)
CatchVariableScopeFunction#apply(spoon.reflect.code.CtCatchVariable,spoon.reflect.visitor.chain.CtConsumer)
CompositeFilter#matches(T extends spoon.reflect.declaration.CtElement)
CompositeFilter#getType()
CtScannerFunction#includingSelf(boolean)
CtScannerFunction#setListener(spoon.reflect.visitor.chain.CtScannerListener)
CtScannerFunction#apply(spoon.reflect.declaration.CtElement,spoon.reflect.visitor.chain.CtConsumer)
CtScannerFunction#setQuery(spoon.reflect.visitor.chain.CtQuery)
DirectReferenceFilter#matches(T extends spoon.reflect.reference.CtReference)
ExecutableReferenceFilter#addExecutable(spoon.reflect.declaration.CtExecutable)
ExecutableReferenceFilter#matches(spoon.reflect.reference.CtExecutableReference)
FieldReferenceFunction#apply(spoon.reflect.declaration.CtElement,spoon.reflect.visitor.chain.CtConsumer)
FieldScopeFunction#apply(spoon.reflect.declaration.CtField,spoon.reflect.visitor.chain.CtConsumer)
InvocationFilter#matches(spoon.reflect.code.CtInvocation)
LambdaFilter#addImplementingInterface(spoon.reflect.declaration.CtTypeInformation)
LambdaFilter#matches(spoon.reflect.code.CtLambda)
LineFilter#matches(spoon.reflect.code.CtStatement)
LocalVariableReferenceFunction#apply(spoon.reflect.declaration.CtElement,spoon.reflect.visitor.chain.CtConsumer)
LocalVariableScopeFunction#apply(spoon.reflect.code.CtLocalVariable,spoon.reflect.visitor.chain.CtConsumer)
NamedElementFilter#matches(T extends spoon.reflect.declaration.CtNamedElement)
NamedElementFilter#getType()
OverriddenMethodFilter#includingSelf(boolean)
OverriddenMethodFilter#matches(spoon.reflect.declaration.CtMethod)
OverriddenMethodQuery#apply(spoon.reflect.declaration.CtMethod,spoon.reflect.visitor.chain.CtConsumer)
OverridingMethodFilter#includingSelf(boolean)
OverridingMethodFilter#matches(spoon.reflect.declaration.CtMethod)
ParameterScopeFunction#apply(spoon.reflect.declaration.CtParameter,spoon.reflect.visitor.chain.CtConsumer)
ParentFunction#includingSelf(boolean)
ParentFunction#apply(spoon.reflect.declaration.CtElement,spoon.reflect.visitor.chain.CtConsumer)
ParentFunction#setQuery(spoon.reflect.visitor.chain.CtQuery)
PotentialVariableDeclarationFunction#apply(spoon.reflect.declaration.CtElement,spoon.reflect.visitor.chain.CtConsumer)
PotentialVariableDeclarationFunction#isTypeOnTheWay()
PotentialVariableDeclarationFunction#setQuery(spoon.reflect.visitor.chain.CtQuery)
RegexFilter#matches(E extends spoon.reflect.declaration.CtElement)
RegexFilter#getType()
ReturnOrThrowFilter#matches(spoon.reflect.code.CtCFlowBreak)
SiblingsFunction#includingSelf(boolean)
SiblingsFunction#mode(spoon.reflect.visitor.filter.SiblingsFunction$Mode)
SiblingsFunction#apply(spoon.reflect.declaration.CtElement,spoon.reflect.visitor.chain.CtConsumer)
SubInheritanceHierarchyFunction#includingSelf(boolean)
SubInheritanceHierarchyFunction#includingInterfaces(boolean)
SubInheritanceHierarchyFunction#failOnClassNotFound(boolean)
SubInheritanceHierarchyFunction#apply(spoon.reflect.declaration.CtTypeInformation,spoon.reflect.visitor.chain.CtConsumer)
SubInheritanceHierarchyFunction#setQuery(spoon.reflect.visitor.chain.CtQuery)
SubtypeFilter#includingSelf(boolean)
SubtypeFilter#matches(spoon.reflect.declaration.CtType)
SuperInheritanceHierarchyFunction#includingSelf(boolean)
SuperInheritanceHierarchyFunction#includingInterfaces(boolean)
SuperInheritanceHierarchyFunction#returnTypeReferences(boolean)
SuperInheritanceHierarchyFunction#interfacesExtendObject(boolean)
SuperInheritanceHierarchyFunction#setListener(spoon.reflect.visitor.chain.CtScannerListener)
SuperInheritanceHierarchyFunction#failOnClassNotFound(boolean)
SuperInheritanceHierarchyFunction#apply(spoon.reflect.declaration.CtTypeInformation,spoon.reflect.visitor.chain.CtConsumer)
SuperInheritanceHierarchyFunction#setQuery(spoon.reflect.visitor.chain.CtQuery)
VariableAccessFilter#matches(T extends spoon.reflect.code.CtVariableAccess)
VariableReferenceFunction#apply(spoon.reflect.declaration.CtElement,spoon.reflect.visitor.chain.CtConsumer)
VariableScopeFunction#apply(spoon.reflect.declaration.CtVariable,spoon.reflect.visitor.chain.CtConsumer)
AccessibleVariablesFinder#find()
AstParentConsistencyChecker#scan(spoon.reflect.declaration.CtElement)
CtAbstractBiScanner#biScan(spoon.reflect.declaration.CtElement,spoon.reflect.declaration.CtElement)
CtAbstractBiScanner#biScan(spoon.reflect.path.CtRole,spoon.reflect.declaration.CtElement,spoon.reflect.declaration.CtElement)
CtAbstractVisitor#visitCtAnnotation(spoon.reflect.declaration.CtAnnotation)
CtAbstractVisitor#visitCtCodeSnippetExpression(spoon.reflect.code.CtCodeSnippetExpression)
CtAbstractVisitor#visitCtCodeSnippetStatement(spoon.reflect.code.CtCodeSnippetStatement)
CtAbstractVisitor#visitCtAnnotationType(spoon.reflect.declaration.CtAnnotationType)
CtAbstractVisitor#visitCtAnonymousExecutable(spoon.reflect.declaration.CtAnonymousExecutable)
CtAbstractVisitor#visitCtArrayRead(spoon.reflect.code.CtArrayRead)
CtAbstractVisitor#visitCtArrayWrite(spoon.reflect.code.CtArrayWrite)
CtAbstractVisitor#visitCtArrayTypeReference(spoon.reflect.reference.CtArrayTypeReference)
CtAbstractVisitor#visitCtAssert(spoon.reflect.code.CtAssert)
CtAbstractVisitor#visitCtAssignment(spoon.reflect.code.CtAssignment)
CtAbstractVisitor#visitCtBinaryOperator(spoon.reflect.code.CtBinaryOperator)
CtAbstractVisitor#visitCtBlock(spoon.reflect.code.CtBlock)
CtAbstractVisitor#visitCtBreak(spoon.reflect.code.CtBreak)
CtAbstractVisitor#visitCtCase(spoon.reflect.code.CtCase)
CtAbstractVisitor#visitCtCatch(spoon.reflect.code.CtCatch)
CtAbstractVisitor#visitCtClass(spoon.reflect.declaration.CtClass)
CtAbstractVisitor#visitCtTypeParameter(spoon.reflect.declaration.CtTypeParameter)
CtAbstractVisitor#visitCtConditional(spoon.reflect.code.CtConditional)
CtAbstractVisitor#visitCtConstructor(spoon.reflect.declaration.CtConstructor)
CtAbstractVisitor#visitCtContinue(spoon.reflect.code.CtContinue)
CtAbstractVisitor#visitCtDo(spoon.reflect.code.CtDo)
CtAbstractVisitor#visitCtEnum(spoon.reflect.declaration.CtEnum)
CtAbstractVisitor#visitCtExecutableReference(spoon.reflect.reference.CtExecutableReference)
CtAbstractVisitor#visitCtField(spoon.reflect.declaration.CtField)
CtAbstractVisitor#visitCtEnumValue(spoon.reflect.declaration.CtEnumValue)
CtAbstractVisitor#visitCtFieldReference(spoon.reflect.reference.CtFieldReference)
CtAbstractVisitor#visitCtFor(spoon.reflect.code.CtFor)
CtAbstractVisitor#visitCtForEach(spoon.reflect.code.CtForEach)
CtAbstractVisitor#visitCtIf(spoon.reflect.code.CtIf)
CtAbstractVisitor#visitCtInterface(spoon.reflect.declaration.CtInterface)
CtAbstractVisitor#visitCtInvocation(spoon.reflect.code.CtInvocation)
CtAbstractVisitor#visitCtLiteral(spoon.reflect.code.CtLiteral)
CtAbstractVisitor#visitCtLocalVariable(spoon.reflect.code.CtLocalVariable)
CtAbstractVisitor#visitCtLocalVariableReference(spoon.reflect.reference.CtLocalVariableReference)
CtAbstractVisitor#visitCtCatchVariable(spoon.reflect.code.CtCatchVariable)
CtAbstractVisitor#visitCtMethod(spoon.reflect.declaration.CtMethod)
CtAbstractVisitor#visitCtAnnotationMethod(spoon.reflect.declaration.CtAnnotationMethod)
CtAbstractVisitor#visitCtNewArray(spoon.reflect.code.CtNewArray)
CtAbstractVisitor#visitCtConstructorCall(spoon.reflect.code.CtConstructorCall)
CtAbstractVisitor#visitCtNewClass(spoon.reflect.code.CtNewClass)
CtAbstractVisitor#visitCtLambda(spoon.reflect.code.CtLambda)
CtAbstractVisitor#visitCtExecutableReferenceExpression(spoon.reflect.code.CtExecutableReferenceExpression)
CtAbstractVisitor#visitCtOperatorAssignment(spoon.reflect.code.CtOperatorAssignment)
CtAbstractVisitor#visitCtPackage(spoon.reflect.declaration.CtPackage)
CtAbstractVisitor#visitCtPackageReference(spoon.reflect.reference.CtPackageReference)
CtAbstractVisitor#visitCtParameter(spoon.reflect.declaration.CtParameter)
CtAbstractVisitor#visitCtParameterReference(spoon.reflect.reference.CtParameterReference)
CtAbstractVisitor#visitCtReturn(spoon.reflect.code.CtReturn)
CtAbstractVisitor#visitCtStatementList(spoon.reflect.code.CtStatementList)
CtAbstractVisitor#visitCtSwitch(spoon.reflect.code.CtSwitch)
CtAbstractVisitor#visitCtSynchronized(spoon.reflect.code.CtSynchronized)
CtAbstractVisitor#visitCtThrow(spoon.reflect.code.CtThrow)
CtAbstractVisitor#visitCtTry(spoon.reflect.code.CtTry)
CtAbstractVisitor#visitCtTryWithResource(spoon.reflect.code.CtTryWithResource)
CtAbstractVisitor#visitCtTypeParameterReference(spoon.reflect.reference.CtTypeParameterReference)
CtAbstractVisitor#visitCtWildcardReference(spoon.reflect.reference.CtWildcardReference)
CtAbstractVisitor#visitCtIntersectionTypeReference(spoon.reflect.reference.CtIntersectionTypeReference)
CtAbstractVisitor#visitCtTypeReference(spoon.reflect.reference.CtTypeReference)
CtAbstractVisitor#visitCtTypeAccess(spoon.reflect.code.CtTypeAccess)
CtAbstractVisitor#visitCtUnaryOperator(spoon.reflect.code.CtUnaryOperator)
CtAbstractVisitor#visitCtVariableRead(spoon.reflect.code.CtVariableRead)
CtAbstractVisitor#visitCtVariableWrite(spoon.reflect.code.CtVariableWrite)
CtAbstractVisitor#visitCtWhile(spoon.reflect.code.CtWhile)
CtAbstractVisitor#visitCtAnnotationFieldAccess(spoon.reflect.code.CtAnnotationFieldAccess)
CtAbstractVisitor#visitCtThisAccess(spoon.reflect.code.CtThisAccess)
CtAbstractVisitor#visitCtCatchVariableReference(spoon.reflect.reference.CtCatchVariableReference)
CtAbstractVisitor#visitCtUnboundVariableReference(spoon.reflect.reference.CtUnboundVariableReference)
CtAbstractVisitor#visitCtFieldRead(spoon.reflect.code.CtFieldRead)
CtAbstractVisitor#visitCtFieldWrite(spoon.reflect.code.CtFieldWrite)
CtAbstractVisitor#visitCtSuperAccess(spoon.reflect.code.CtSuperAccess)
CtAbstractVisitor#visitCtComment(spoon.reflect.code.CtComment)
CtAbstractVisitor#visitCtJavaDoc(spoon.reflect.code.CtJavaDoc)
CtAbstractVisitor#visitCtJavaDocTag(spoon.reflect.code.CtJavaDocTag)
CtAbstractVisitor#visitCtImport(spoon.reflect.declaration.CtImport)
CtAbstractVisitor#visitCtModule(spoon.reflect.declaration.CtModule)
CtAbstractVisitor#visitCtModuleReference(spoon.reflect.reference.CtModuleReference)
CtAbstractVisitor#visitCtPackageExport(spoon.reflect.declaration.CtPackageExport)
CtAbstractVisitor#visitCtModuleRequirement(spoon.reflect.declaration.CtModuleRequirement)
CtAbstractVisitor#visitCtProvidedService(spoon.reflect.declaration.CtProvidedService)
CtAbstractVisitor#visitCtUsedService(spoon.reflect.declaration.CtUsedService)
CtBiScannerDefault#biScan(spoon.reflect.declaration.CtElement,spoon.reflect.declaration.CtElement)
CtBiScannerDefault#biScan(spoon.reflect.path.CtRole,spoon.reflect.declaration.CtElement,spoon.reflect.declaration.CtElement)
CtBiScannerDefault#visitCtAnnotation(spoon.reflect.declaration.CtAnnotation)
CtBiScannerDefault#visitCtAnnotationType(spoon.reflect.declaration.CtAnnotationType)
CtBiScannerDefault#visitCtAnonymousExecutable(spoon.reflect.declaration.CtAnonymousExecutable)
CtBiScannerDefault#visitCtArrayRead(spoon.reflect.code.CtArrayRead)
CtBiScannerDefault#visitCtArrayWrite(spoon.reflect.code.CtArrayWrite)
CtBiScannerDefault#visitCtArrayTypeReference(spoon.reflect.reference.CtArrayTypeReference)
CtBiScannerDefault#visitCtAssert(spoon.reflect.code.CtAssert)
CtBiScannerDefault#visitCtAssignment(spoon.reflect.code.CtAssignment)
CtBiScannerDefault#visitCtBinaryOperator(spoon.reflect.code.CtBinaryOperator)
CtBiScannerDefault#visitCtBlock(spoon.reflect.code.CtBlock)
CtBiScannerDefault#visitCtBreak(spoon.reflect.code.CtBreak)
CtBiScannerDefault#visitCtCase(spoon.reflect.code.CtCase)
CtBiScannerDefault#visitCtCatch(spoon.reflect.code.CtCatch)
CtBiScannerDefault#visitCtClass(spoon.reflect.declaration.CtClass)
CtBiScannerDefault#visitCtTypeParameter(spoon.reflect.declaration.CtTypeParameter)
CtBiScannerDefault#visitCtConditional(spoon.reflect.code.CtConditional)
CtBiScannerDefault#visitCtConstructor(spoon.reflect.declaration.CtConstructor)
CtBiScannerDefault#visitCtContinue(spoon.reflect.code.CtContinue)
CtBiScannerDefault#visitCtDo(spoon.reflect.code.CtDo)
CtBiScannerDefault#visitCtEnum(spoon.reflect.declaration.CtEnum)
CtBiScannerDefault#visitCtExecutableReference(spoon.reflect.reference.CtExecutableReference)
CtBiScannerDefault#visitCtField(spoon.reflect.declaration.CtField)
CtBiScannerDefault#visitCtEnumValue(spoon.reflect.declaration.CtEnumValue)
CtBiScannerDefault#visitCtThisAccess(spoon.reflect.code.CtThisAccess)
CtBiScannerDefault#visitCtAnnotationFieldAccess(spoon.reflect.code.CtAnnotationFieldAccess)
CtBiScannerDefault#visitCtFieldReference(spoon.reflect.reference.CtFieldReference)
CtBiScannerDefault#visitCtFor(spoon.reflect.code.CtFor)
CtBiScannerDefault#visitCtForEach(spoon.reflect.code.CtForEach)
CtBiScannerDefault#visitCtIf(spoon.reflect.code.CtIf)
CtBiScannerDefault#visitCtInterface(spoon.reflect.declaration.CtInterface)
CtBiScannerDefault#visitCtInvocation(spoon.reflect.code.CtInvocation)
CtBiScannerDefault#visitCtLiteral(spoon.reflect.code.CtLiteral)
CtBiScannerDefault#visitCtLocalVariable(spoon.reflect.code.CtLocalVariable)
CtBiScannerDefault#visitCtLocalVariableReference(spoon.reflect.reference.CtLocalVariableReference)
CtBiScannerDefault#visitCtCatchVariable(spoon.reflect.code.CtCatchVariable)
CtBiScannerDefault#visitCtCatchVariableReference(spoon.reflect.reference.CtCatchVariableReference)
CtBiScannerDefault#visitCtMethod(spoon.reflect.declaration.CtMethod)
CtBiScannerDefault#visitCtAnnotationMethod(spoon.reflect.declaration.CtAnnotationMethod)
CtBiScannerDefault#visitCtNewArray(spoon.reflect.code.CtNewArray)
CtBiScannerDefault#visitCtConstructorCall(spoon.reflect.code.CtConstructorCall)
CtBiScannerDefault#visitCtNewClass(spoon.reflect.code.CtNewClass)
CtBiScannerDefault#visitCtLambda(spoon.reflect.code.CtLambda)
CtBiScannerDefault#visitCtExecutableReferenceExpression(spoon.reflect.code.CtExecutableReferenceExpression)
CtBiScannerDefault#visitCtOperatorAssignment(spoon.reflect.code.CtOperatorAssignment)
CtBiScannerDefault#visitCtPackage(spoon.reflect.declaration.CtPackage)
CtBiScannerDefault#visitCtPackageReference(spoon.reflect.reference.CtPackageReference)
CtBiScannerDefault#visitCtParameter(spoon.reflect.declaration.CtParameter)
CtBiScannerDefault#visitCtParameterReference(spoon.reflect.reference.CtParameterReference)
CtBiScannerDefault#visitCtReturn(spoon.reflect.code.CtReturn)
CtBiScannerDefault#visitCtStatementList(spoon.reflect.code.CtStatementList)
CtBiScannerDefault#visitCtSwitch(spoon.reflect.code.CtSwitch)
CtBiScannerDefault#visitCtSynchronized(spoon.reflect.code.CtSynchronized)
CtBiScannerDefault#visitCtThrow(spoon.reflect.code.CtThrow)
CtBiScannerDefault#visitCtTry(spoon.reflect.code.CtTry)
CtBiScannerDefault#visitCtTryWithResource(spoon.reflect.code.CtTryWithResource)
CtBiScannerDefault#visitCtTypeParameterReference(spoon.reflect.reference.CtTypeParameterReference)
CtBiScannerDefault#visitCtWildcardReference(spoon.reflect.reference.CtWildcardReference)
CtBiScannerDefault#visitCtIntersectionTypeReference(spoon.reflect.reference.CtIntersectionTypeReference)
CtBiScannerDefault#visitCtTypeReference(spoon.reflect.reference.CtTypeReference)
CtBiScannerDefault#visitCtTypeAccess(spoon.reflect.code.CtTypeAccess)
CtBiScannerDefault#visitCtUnaryOperator(spoon.reflect.code.CtUnaryOperator)
CtBiScannerDefault#visitCtVariableRead(spoon.reflect.code.CtVariableRead)
CtBiScannerDefault#visitCtVariableWrite(spoon.reflect.code.CtVariableWrite)
CtBiScannerDefault#visitCtWhile(spoon.reflect.code.CtWhile)
CtBiScannerDefault#visitCtCodeSnippetExpression(spoon.reflect.code.CtCodeSnippetExpression)
CtBiScannerDefault#visitCtCodeSnippetStatement(spoon.reflect.code.CtCodeSnippetStatement)
CtBiScannerDefault#visitCtUnboundVariableReference(spoon.reflect.reference.CtUnboundVariableReference)
CtBiScannerDefault#visitCtFieldRead(spoon.reflect.code.CtFieldRead)
CtBiScannerDefault#visitCtFieldWrite(spoon.reflect.code.CtFieldWrite)
CtBiScannerDefault#visitCtSuperAccess(spoon.reflect.code.CtSuperAccess)
CtBiScannerDefault#visitCtComment(spoon.reflect.code.CtComment)
CtBiScannerDefault#visitCtJavaDoc(spoon.reflect.code.CtJavaDoc)
CtBiScannerDefault#visitCtJavaDocTag(spoon.reflect.code.CtJavaDocTag)
CtBiScannerDefault#visitCtImport(spoon.reflect.declaration.CtImport)
CtBiScannerDefault#visitCtModule(spoon.reflect.declaration.CtModule)
CtBiScannerDefault#visitCtModuleReference(spoon.reflect.reference.CtModuleReference)
CtBiScannerDefault#visitCtPackageExport(spoon.reflect.declaration.CtPackageExport)
CtBiScannerDefault#visitCtModuleRequirement(spoon.reflect.declaration.CtModuleRequirement)
CtBiScannerDefault#visitCtProvidedService(spoon.reflect.declaration.CtProvidedService)
CtBiScannerDefault#visitCtUsedService(spoon.reflect.declaration.CtUsedService)
CtInheritanceScanner#visitCtCodeSnippetExpression(spoon.reflect.code.CtCodeSnippetExpression)
CtInheritanceScanner#visitCtCodeSnippetStatement(spoon.reflect.code.CtCodeSnippetStatement)
CtInheritanceScanner#scan(java.util.Collection)
CtInheritanceScanner#scan(spoon.reflect.declaration.CtElement)
CtInheritanceScanner#scanCtAbstractInvocation(spoon.reflect.code.CtAbstractInvocation)
CtInheritanceScanner#scanCtCFlowBreak(spoon.reflect.code.CtCFlowBreak)
CtInheritanceScanner#scanCtLabelledFlowBreak(spoon.reflect.code.CtLabelledFlowBreak)
CtInheritanceScanner#scanCtCodeElement(spoon.reflect.code.CtCodeElement)
CtInheritanceScanner#scanCtTypeMember(spoon.reflect.declaration.CtTypeMember)
CtInheritanceScanner#scanCtModuleDirective(spoon.reflect.declaration.CtModuleDirective)
CtInheritanceScanner#scanCtElement(spoon.reflect.declaration.CtElement)
CtInheritanceScanner#scanCtExecutable(spoon.reflect.declaration.CtExecutable)
CtInheritanceScanner#scanCtExpression(spoon.reflect.code.CtExpression)
CtInheritanceScanner#scanCtFormalTypeDeclarer(spoon.reflect.declaration.CtFormalTypeDeclarer)
CtInheritanceScanner#scanCtVisitable(spoon.reflect.visitor.CtVisitable)
CtInheritanceScanner#scanCtActualTypeContainer(spoon.reflect.reference.CtActualTypeContainer)
CtInheritanceScanner#scanCtLoop(spoon.reflect.code.CtLoop)
CtInheritanceScanner#scanCtModifiable(spoon.reflect.declaration.CtModifiable)
CtInheritanceScanner#scanCtNamedElement(spoon.reflect.declaration.CtNamedElement)
CtInheritanceScanner#scanCtReference(spoon.reflect.reference.CtReference)
CtInheritanceScanner#scanCtStatement(spoon.reflect.code.CtStatement)
CtInheritanceScanner#scanCtTargetedExpression(spoon.reflect.code.CtTargetedExpression)
CtInheritanceScanner#scanCtType(spoon.reflect.declaration.CtType)
CtInheritanceScanner#scanCtTypedElement(spoon.reflect.declaration.CtTypedElement)
CtInheritanceScanner#scanCtVariable(spoon.reflect.declaration.CtVariable)
CtInheritanceScanner#scanCtArrayAccess(spoon.reflect.code.CtArrayAccess)
CtInheritanceScanner#scanCtFieldAccess(spoon.reflect.code.CtFieldAccess)
CtInheritanceScanner#scanCtVariableAccess(spoon.reflect.code.CtVariableAccess)
CtInheritanceScanner#scanCtRHSReceiver(spoon.reflect.code.CtRHSReceiver)
CtInheritanceScanner#scanCtShadowable(spoon.reflect.declaration.CtShadowable)
CtInheritanceScanner#scanCtBodyHolder(spoon.reflect.code.CtBodyHolder)
CtInheritanceScanner#visitCtFieldRead(spoon.reflect.code.CtFieldRead)
CtInheritanceScanner#visitCtFieldWrite(spoon.reflect.code.CtFieldWrite)
CtInheritanceScanner#visitCtSuperAccess(spoon.reflect.code.CtSuperAccess)
CtInheritanceScanner#scanCtMultiTypedElement(spoon.reflect.declaration.CtMultiTypedElement)
CtInheritanceScanner#visitCtOperatorAssignment(spoon.reflect.code.CtOperatorAssignment)
CtInheritanceScanner#scanCtVariableReference(spoon.reflect.reference.CtVariableReference)
CtInheritanceScanner#scanCtTypeInformation(spoon.reflect.declaration.CtTypeInformation)
CtInheritanceScanner#visitCtAnnotation(spoon.reflect.declaration.CtAnnotation)
CtInheritanceScanner#visitCtAnnotationType(spoon.reflect.declaration.CtAnnotationType)
CtInheritanceScanner#visitCtAnonymousExecutable(spoon.reflect.declaration.CtAnonymousExecutable)
CtInheritanceScanner#visitCtArrayRead(spoon.reflect.code.CtArrayRead)
CtInheritanceScanner#visitCtArrayWrite(spoon.reflect.code.CtArrayWrite)
CtInheritanceScanner#visitCtArrayTypeReference(spoon.reflect.reference.CtArrayTypeReference)
CtInheritanceScanner#visitCtAssert(spoon.reflect.code.CtAssert)
CtInheritanceScanner#visitCtAssignment(spoon.reflect.code.CtAssignment)
CtInheritanceScanner#visitCtBinaryOperator(spoon.reflect.code.CtBinaryOperator)
CtInheritanceScanner#visitCtBlock(spoon.reflect.code.CtBlock)
CtInheritanceScanner#visitCtBreak(spoon.reflect.code.CtBreak)
CtInheritanceScanner#visitCtCase(spoon.reflect.code.CtCase)
CtInheritanceScanner#visitCtCatch(spoon.reflect.code.CtCatch)
CtInheritanceScanner#visitCtClass(spoon.reflect.declaration.CtClass)
CtInheritanceScanner#visitCtTypeParameter(spoon.reflect.declaration.CtTypeParameter)
CtInheritanceScanner#visitCtConditional(spoon.reflect.code.CtConditional)
CtInheritanceScanner#visitCtConstructor(spoon.reflect.declaration.CtConstructor)
CtInheritanceScanner#visitCtContinue(spoon.reflect.code.CtContinue)
CtInheritanceScanner#visitCtDo(spoon.reflect.code.CtDo)
CtInheritanceScanner#visitCtEnum(spoon.reflect.declaration.CtEnum)
CtInheritanceScanner#visitCtExecutableReference(spoon.reflect.reference.CtExecutableReference)
CtInheritanceScanner#visitCtField(spoon.reflect.declaration.CtField)
CtInheritanceScanner#visitCtEnumValue(spoon.reflect.declaration.CtEnumValue)
CtInheritanceScanner#visitCtThisAccess(spoon.reflect.code.CtThisAccess)
CtInheritanceScanner#visitCtFieldReference(spoon.reflect.reference.CtFieldReference)
CtInheritanceScanner#visitCtFor(spoon.reflect.code.CtFor)
CtInheritanceScanner#visitCtForEach(spoon.reflect.code.CtForEach)
CtInheritanceScanner#visitCtIf(spoon.reflect.code.CtIf)
CtInheritanceScanner#visitCtInterface(spoon.reflect.declaration.CtInterface)
CtInheritanceScanner#visitCtInvocation(spoon.reflect.code.CtInvocation)
CtInheritanceScanner#visitCtLiteral(spoon.reflect.code.CtLiteral)
CtInheritanceScanner#visitCtLocalVariable(spoon.reflect.code.CtLocalVariable)
CtInheritanceScanner#visitCtLocalVariableReference(spoon.reflect.reference.CtLocalVariableReference)
CtInheritanceScanner#visitCtCatchVariable(spoon.reflect.code.CtCatchVariable)
CtInheritanceScanner#visitCtCatchVariableReference(spoon.reflect.reference.CtCatchVariableReference)
CtInheritanceScanner#visitCtMethod(spoon.reflect.declaration.CtMethod)
CtInheritanceScanner#visitCtAnnotationMethod(spoon.reflect.declaration.CtAnnotationMethod)
CtInheritanceScanner#visitCtNewArray(spoon.reflect.code.CtNewArray)
CtInheritanceScanner#visitCtConstructorCall(spoon.reflect.code.CtConstructorCall)
CtInheritanceScanner#visitCtNewClass(spoon.reflect.code.CtNewClass)
CtInheritanceScanner#visitCtLambda(spoon.reflect.code.CtLambda)
CtInheritanceScanner#visitCtExecutableReferenceExpression(spoon.reflect.code.CtExecutableReferenceExpression)
CtInheritanceScanner#visitCtOperatorAssignement(spoon.reflect.code.CtOperatorAssignment)
CtInheritanceScanner#visitCtPackage(spoon.reflect.declaration.CtPackage)
CtInheritanceScanner#visitCtPackageReference(spoon.reflect.reference.CtPackageReference)
CtInheritanceScanner#visitCtParameter(spoon.reflect.declaration.CtParameter)
CtInheritanceScanner#visitCtParameterReference(spoon.reflect.reference.CtParameterReference)
CtInheritanceScanner#visitCtReturn(spoon.reflect.code.CtReturn)
CtInheritanceScanner#visitCtStatementList(spoon.reflect.code.CtStatementList)
CtInheritanceScanner#visitCtSwitch(spoon.reflect.code.CtSwitch)
CtInheritanceScanner#visitCtSynchronized(spoon.reflect.code.CtSynchronized)
CtInheritanceScanner#visitCtThrow(spoon.reflect.code.CtThrow)
CtInheritanceScanner#visitCtTry(spoon.reflect.code.CtTry)
CtInheritanceScanner#visitCtTryWithResource(spoon.reflect.code.CtTryWithResource)
CtInheritanceScanner#visitCtTypeParameterReference(spoon.reflect.reference.CtTypeParameterReference)
CtInheritanceScanner#visitCtWildcardReference(spoon.reflect.reference.CtWildcardReference)
CtInheritanceScanner#visitCtIntersectionTypeReference(spoon.reflect.reference.CtIntersectionTypeReference)
CtInheritanceScanner#visitCtTypeReference(spoon.reflect.reference.CtTypeReference)
CtInheritanceScanner#visitCtTypeAccess(spoon.reflect.code.CtTypeAccess)
CtInheritanceScanner#visitCtUnaryOperator(spoon.reflect.code.CtUnaryOperator)
CtInheritanceScanner#visitCtVariableRead(spoon.reflect.code.CtVariableRead)
CtInheritanceScanner#visitCtVariableWrite(spoon.reflect.code.CtVariableWrite)
CtInheritanceScanner#visitCtComment(spoon.reflect.code.CtComment)
CtInheritanceScanner#visitCtJavaDoc(spoon.reflect.code.CtJavaDoc)
CtInheritanceScanner#visitCtJavaDocTag(spoon.reflect.code.CtJavaDocTag)
CtInheritanceScanner#visitCtAnnotationFieldAccess(spoon.reflect.code.CtAnnotationFieldAccess)
CtInheritanceScanner#visitCtWhile(spoon.reflect.code.CtWhile)
CtInheritanceScanner#visitCtUnboundVariableReference(spoon.reflect.reference.CtUnboundVariableReference)
CtInheritanceScanner#scanCtCodeSnippet(spoon.reflect.declaration.CtCodeSnippet)
CtInheritanceScanner#visitCtImport(spoon.reflect.declaration.CtImport)
CtInheritanceScanner#visitCtModule(spoon.reflect.declaration.CtModule)
CtInheritanceScanner#visitCtModuleReference(spoon.reflect.reference.CtModuleReference)
CtInheritanceScanner#visitCtPackageExport(spoon.reflect.declaration.CtPackageExport)
CtInheritanceScanner#visitCtModuleRequirement(spoon.reflect.declaration.CtModuleRequirement)
CtInheritanceScanner#visitCtProvidedService(spoon.reflect.declaration.CtProvidedService)
CtInheritanceScanner#visitCtUsedService(spoon.reflect.declaration.CtUsedService)
CtIterator#scan(spoon.reflect.declaration.CtElement)
CtIterator#hasNext()
CtIterator#next()
CtScanner#scan(spoon.reflect.path.CtRole,java.util.Collection)
CtScanner#scan(spoon.reflect.path.CtRole,java.util.Map)
CtScanner#scan(java.util.Collection)
CtScanner#scan(spoon.reflect.path.CtRole,spoon.reflect.declaration.CtElement)
CtScanner#scan(spoon.reflect.declaration.CtElement)
CtScanner#visitCtAnnotation(spoon.reflect.declaration.CtAnnotation)
CtScanner#scan(java.lang.Object)
CtScanner#scan(spoon.reflect.path.CtRole,java.lang.Object)
CtScanner#visitCtAnnotationType(spoon.reflect.declaration.CtAnnotationType)
CtScanner#visitCtAnonymousExecutable(spoon.reflect.declaration.CtAnonymousExecutable)
CtScanner#visitCtArrayRead(spoon.reflect.code.CtArrayRead)
CtScanner#visitCtArrayWrite(spoon.reflect.code.CtArrayWrite)
CtScanner#visitCtArrayTypeReference(spoon.reflect.reference.CtArrayTypeReference)
CtScanner#visitCtAssert(spoon.reflect.code.CtAssert)
CtScanner#visitCtAssignment(spoon.reflect.code.CtAssignment)
CtScanner#visitCtBinaryOperator(spoon.reflect.code.CtBinaryOperator)
CtScanner#visitCtBlock(spoon.reflect.code.CtBlock)
CtScanner#visitCtBreak(spoon.reflect.code.CtBreak)
CtScanner#visitCtCase(spoon.reflect.code.CtCase)
CtScanner#visitCtCatch(spoon.reflect.code.CtCatch)
CtScanner#visitCtClass(spoon.reflect.declaration.CtClass)
CtScanner#visitCtTypeParameter(spoon.reflect.declaration.CtTypeParameter)
CtScanner#visitCtConditional(spoon.reflect.code.CtConditional)
CtScanner#visitCtConstructor(spoon.reflect.declaration.CtConstructor)
CtScanner#visitCtContinue(spoon.reflect.code.CtContinue)
CtScanner#visitCtDo(spoon.reflect.code.CtDo)
CtScanner#visitCtEnum(spoon.reflect.declaration.CtEnum)
CtScanner#visitCtExecutableReference(spoon.reflect.reference.CtExecutableReference)
CtScanner#visitCtField(spoon.reflect.declaration.CtField)
CtScanner#visitCtEnumValue(spoon.reflect.declaration.CtEnumValue)
CtScanner#visitCtThisAccess(spoon.reflect.code.CtThisAccess)
CtScanner#visitCtAnnotationFieldAccess(spoon.reflect.code.CtAnnotationFieldAccess)
CtScanner#visitCtFieldReference(spoon.reflect.reference.CtFieldReference)
CtScanner#visitCtFor(spoon.reflect.code.CtFor)
CtScanner#visitCtForEach(spoon.reflect.code.CtForEach)
CtScanner#visitCtIf(spoon.reflect.code.CtIf)
CtScanner#visitCtInterface(spoon.reflect.declaration.CtInterface)
CtScanner#visitCtInvocation(spoon.reflect.code.CtInvocation)
CtScanner#visitCtLiteral(spoon.reflect.code.CtLiteral)
CtScanner#visitCtLocalVariable(spoon.reflect.code.CtLocalVariable)
CtScanner#visitCtLocalVariableReference(spoon.reflect.reference.CtLocalVariableReference)
CtScanner#visitCtCatchVariable(spoon.reflect.code.CtCatchVariable)
CtScanner#visitCtCatchVariableReference(spoon.reflect.reference.CtCatchVariableReference)
CtScanner#visitCtMethod(spoon.reflect.declaration.CtMethod)
CtScanner#visitCtAnnotationMethod(spoon.reflect.declaration.CtAnnotationMethod)
CtScanner#visitCtNewArray(spoon.reflect.code.CtNewArray)
CtScanner#visitCtConstructorCall(spoon.reflect.code.CtConstructorCall)
CtScanner#visitCtNewClass(spoon.reflect.code.CtNewClass)
CtScanner#visitCtLambda(spoon.reflect.code.CtLambda)
CtScanner#visitCtExecutableReferenceExpression(spoon.reflect.code.CtExecutableReferenceExpression)
CtScanner#visitCtOperatorAssignment(spoon.reflect.code.CtOperatorAssignment)
CtScanner#visitCtPackage(spoon.reflect.declaration.CtPackage)
CtScanner#visitCtPackageReference(spoon.reflect.reference.CtPackageReference)
CtScanner#visitCtParameter(spoon.reflect.declaration.CtParameter)
CtScanner#visitCtParameterReference(spoon.reflect.reference.CtParameterReference)
CtScanner#visitCtReturn(spoon.reflect.code.CtReturn)
CtScanner#visitCtStatementList(spoon.reflect.code.CtStatementList)
CtScanner#visitCtSwitch(spoon.reflect.code.CtSwitch)
CtScanner#visitCtSynchronized(spoon.reflect.code.CtSynchronized)
CtScanner#visitCtThrow(spoon.reflect.code.CtThrow)
CtScanner#visitCtTry(spoon.reflect.code.CtTry)
CtScanner#visitCtTryWithResource(spoon.reflect.code.CtTryWithResource)
CtScanner#visitCtTypeParameterReference(spoon.reflect.reference.CtTypeParameterReference)
CtScanner#visitCtWildcardReference(spoon.reflect.reference.CtWildcardReference)
CtScanner#visitCtIntersectionTypeReference(spoon.reflect.reference.CtIntersectionTypeReference)
CtScanner#visitCtTypeReference(spoon.reflect.reference.CtTypeReference)
CtScanner#visitCtTypeAccess(spoon.reflect.code.CtTypeAccess)
CtScanner#visitCtUnaryOperator(spoon.reflect.code.CtUnaryOperator)
CtScanner#visitCtVariableRead(spoon.reflect.code.CtVariableRead)
CtScanner#visitCtVariableWrite(spoon.reflect.code.CtVariableWrite)
CtScanner#visitCtWhile(spoon.reflect.code.CtWhile)
CtScanner#visitCtCodeSnippetExpression(spoon.reflect.code.CtCodeSnippetExpression)
CtScanner#visitCtCodeSnippetStatement(spoon.reflect.code.CtCodeSnippetStatement)
CtScanner#visitCtUnboundVariableReference(spoon.reflect.reference.CtUnboundVariableReference)
CtScanner#visitCtFieldRead(spoon.reflect.code.CtFieldRead)
CtScanner#visitCtFieldWrite(spoon.reflect.code.CtFieldWrite)
CtScanner#visitCtSuperAccess(spoon.reflect.code.CtSuperAccess)
CtScanner#visitCtComment(spoon.reflect.code.CtComment)
CtScanner#visitCtJavaDoc(spoon.reflect.code.CtJavaDoc)
CtScanner#visitCtJavaDocTag(spoon.reflect.code.CtJavaDocTag)
CtScanner#visitCtImport(spoon.reflect.declaration.CtImport)
CtScanner#visitCtModule(spoon.reflect.declaration.CtModule)
CtScanner#visitCtModuleReference(spoon.reflect.reference.CtModuleReference)
CtScanner#visitCtPackageExport(spoon.reflect.declaration.CtPackageExport)
CtScanner#visitCtModuleRequirement(spoon.reflect.declaration.CtModuleRequirement)
CtScanner#visitCtProvidedService(spoon.reflect.declaration.CtProvidedService)
CtScanner#visitCtUsedService(spoon.reflect.declaration.CtUsedService)
CtVisitable#accept(spoon.reflect.visitor.CtVisitor)
CtVisitor#visitCtAnnotation(spoon.reflect.declaration.CtAnnotation)
CtVisitor#visitCtCodeSnippetExpression(spoon.reflect.code.CtCodeSnippetExpression)
CtVisitor#visitCtCodeSnippetStatement(spoon.reflect.code.CtCodeSnippetStatement)
CtVisitor#visitCtAnnotationType(spoon.reflect.declaration.CtAnnotationType)
CtVisitor#visitCtAnonymousExecutable(spoon.reflect.declaration.CtAnonymousExecutable)
CtVisitor#visitCtArrayRead(spoon.reflect.code.CtArrayRead)
CtVisitor#visitCtArrayWrite(spoon.reflect.code.CtArrayWrite)
CtVisitor#visitCtArrayTypeReference(spoon.reflect.reference.CtArrayTypeReference)
CtVisitor#visitCtAssert(spoon.reflect.code.CtAssert)
CtVisitor#visitCtAssignment(spoon.reflect.code.CtAssignment)
CtVisitor#visitCtBinaryOperator(spoon.reflect.code.CtBinaryOperator)
CtVisitor#visitCtBlock(spoon.reflect.code.CtBlock)
CtVisitor#visitCtBreak(spoon.reflect.code.CtBreak)
CtVisitor#visitCtCase(spoon.reflect.code.CtCase)
CtVisitor#visitCtCatch(spoon.reflect.code.CtCatch)
CtVisitor#visitCtClass(spoon.reflect.declaration.CtClass)
CtVisitor#visitCtTypeParameter(spoon.reflect.declaration.CtTypeParameter)
CtVisitor#visitCtConditional(spoon.reflect.code.CtConditional)
CtVisitor#visitCtConstructor(spoon.reflect.declaration.CtConstructor)
CtVisitor#visitCtContinue(spoon.reflect.code.CtContinue)
CtVisitor#visitCtDo(spoon.reflect.code.CtDo)
CtVisitor#visitCtEnum(spoon.reflect.declaration.CtEnum)
CtVisitor#visitCtExecutableReference(spoon.reflect.reference.CtExecutableReference)
CtVisitor#visitCtField(spoon.reflect.declaration.CtField)
CtVisitor#visitCtEnumValue(spoon.reflect.declaration.CtEnumValue)
CtVisitor#visitCtThisAccess(spoon.reflect.code.CtThisAccess)
CtVisitor#visitCtFieldReference(spoon.reflect.reference.CtFieldReference)
CtVisitor#visitCtUnboundVariableReference(spoon.reflect.reference.CtUnboundVariableReference)
CtVisitor#visitCtFor(spoon.reflect.code.CtFor)
CtVisitor#visitCtForEach(spoon.reflect.code.CtForEach)
CtVisitor#visitCtIf(spoon.reflect.code.CtIf)
CtVisitor#visitCtInterface(spoon.reflect.declaration.CtInterface)
CtVisitor#visitCtInvocation(spoon.reflect.code.CtInvocation)
CtVisitor#visitCtLiteral(spoon.reflect.code.CtLiteral)
CtVisitor#visitCtLocalVariable(spoon.reflect.code.CtLocalVariable)
CtVisitor#visitCtLocalVariableReference(spoon.reflect.reference.CtLocalVariableReference)
CtVisitor#visitCtCatchVariable(spoon.reflect.code.CtCatchVariable)
CtVisitor#visitCtCatchVariableReference(spoon.reflect.reference.CtCatchVariableReference)
CtVisitor#visitCtMethod(spoon.reflect.declaration.CtMethod)
CtVisitor#visitCtAnnotationMethod(spoon.reflect.declaration.CtAnnotationMethod)
CtVisitor#visitCtNewArray(spoon.reflect.code.CtNewArray)
CtVisitor#visitCtConstructorCall(spoon.reflect.code.CtConstructorCall)
CtVisitor#visitCtNewClass(spoon.reflect.code.CtNewClass)
CtVisitor#visitCtLambda(spoon.reflect.code.CtLambda)
CtVisitor#visitCtExecutableReferenceExpression(spoon.reflect.code.CtExecutableReferenceExpression)
CtVisitor#visitCtOperatorAssignment(spoon.reflect.code.CtOperatorAssignment)
CtVisitor#visitCtPackage(spoon.reflect.declaration.CtPackage)
CtVisitor#visitCtPackageReference(spoon.reflect.reference.CtPackageReference)
CtVisitor#visitCtParameter(spoon.reflect.declaration.CtParameter)
CtVisitor#visitCtParameterReference(spoon.reflect.reference.CtParameterReference)
CtVisitor#visitCtReturn(spoon.reflect.code.CtReturn)
CtVisitor#visitCtStatementList(spoon.reflect.code.CtStatementList)
CtVisitor#visitCtSwitch(spoon.reflect.code.CtSwitch)
CtVisitor#visitCtSynchronized(spoon.reflect.code.CtSynchronized)
CtVisitor#visitCtThrow(spoon.reflect.code.CtThrow)
CtVisitor#visitCtTry(spoon.reflect.code.CtTry)
CtVisitor#visitCtTryWithResource(spoon.reflect.code.CtTryWithResource)
CtVisitor#visitCtTypeParameterReference(spoon.reflect.reference.CtTypeParameterReference)
CtVisitor#visitCtWildcardReference(spoon.reflect.reference.CtWildcardReference)
CtVisitor#visitCtIntersectionTypeReference(spoon.reflect.reference.CtIntersectionTypeReference)
CtVisitor#visitCtTypeReference(spoon.reflect.reference.CtTypeReference)
CtVisitor#visitCtTypeAccess(spoon.reflect.code.CtTypeAccess)
CtVisitor#visitCtUnaryOperator(spoon.reflect.code.CtUnaryOperator)
CtVisitor#visitCtVariableRead(spoon.reflect.code.CtVariableRead)
CtVisitor#visitCtVariableWrite(spoon.reflect.code.CtVariableWrite)
CtVisitor#visitCtWhile(spoon.reflect.code.CtWhile)
CtVisitor#visitCtAnnotationFieldAccess(spoon.reflect.code.CtAnnotationFieldAccess)
CtVisitor#visitCtFieldRead(spoon.reflect.code.CtFieldRead)
CtVisitor#visitCtFieldWrite(spoon.reflect.code.CtFieldWrite)
CtVisitor#visitCtSuperAccess(spoon.reflect.code.CtSuperAccess)
CtVisitor#visitCtComment(spoon.reflect.code.CtComment)
CtVisitor#visitCtJavaDoc(spoon.reflect.code.CtJavaDoc)
CtVisitor#visitCtJavaDocTag(spoon.reflect.code.CtJavaDocTag)
CtVisitor#visitCtImport(spoon.reflect.declaration.CtImport)
CtVisitor#visitCtModule(spoon.reflect.declaration.CtModule)
CtVisitor#visitCtModuleReference(spoon.reflect.reference.CtModuleReference)
CtVisitor#visitCtPackageExport(spoon.reflect.declaration.CtPackageExport)
CtVisitor#visitCtModuleRequirement(spoon.reflect.declaration.CtModuleRequirement)
CtVisitor#visitCtProvidedService(spoon.reflect.declaration.CtProvidedService)
CtVisitor#visitCtUsedService(spoon.reflect.declaration.CtUsedService)
DefaultJavaPrettyPrinter#getLineSeparator()
DefaultJavaPrettyPrinter#setLineSeparator(java.lang.String)
DefaultJavaPrettyPrinter#computeImports(spoon.reflect.declaration.CtType)
DefaultJavaPrettyPrinter#computeImports(spoon.reflect.declaration.CtElement)
DefaultJavaPrettyPrinter#scan(spoon.reflect.declaration.CtElement)
DefaultJavaPrettyPrinter#toString()
DefaultJavaPrettyPrinter#visitCtAnnotation(spoon.reflect.declaration.CtAnnotation)
DefaultJavaPrettyPrinter#visitCtAnnotationType(spoon.reflect.declaration.CtAnnotationType)
DefaultJavaPrettyPrinter#visitCtAnonymousExecutable(spoon.reflect.declaration.CtAnonymousExecutable)
DefaultJavaPrettyPrinter#visitCtArrayRead(spoon.reflect.code.CtArrayRead)
DefaultJavaPrettyPrinter#visitCtArrayWrite(spoon.reflect.code.CtArrayWrite)
DefaultJavaPrettyPrinter#visitCtArrayTypeReference(spoon.reflect.reference.CtArrayTypeReference)
DefaultJavaPrettyPrinter#visitCtAssert(spoon.reflect.code.CtAssert)
DefaultJavaPrettyPrinter#visitCtAssignment(spoon.reflect.code.CtAssignment)
DefaultJavaPrettyPrinter#visitCtBinaryOperator(spoon.reflect.code.CtBinaryOperator)
DefaultJavaPrettyPrinter#visitCtBlock(spoon.reflect.code.CtBlock)
DefaultJavaPrettyPrinter#visitCtBreak(spoon.reflect.code.CtBreak)
DefaultJavaPrettyPrinter#visitCtCase(spoon.reflect.code.CtCase)
DefaultJavaPrettyPrinter#visitCtCatch(spoon.reflect.code.CtCatch)
DefaultJavaPrettyPrinter#visitCtClass(spoon.reflect.declaration.CtClass)
DefaultJavaPrettyPrinter#visitCtTypeParameter(spoon.reflect.declaration.CtTypeParameter)
DefaultJavaPrettyPrinter#visitCtConditional(spoon.reflect.code.CtConditional)
DefaultJavaPrettyPrinter#visitCtConstructor(spoon.reflect.declaration.CtConstructor)
DefaultJavaPrettyPrinter#visitCtContinue(spoon.reflect.code.CtContinue)
DefaultJavaPrettyPrinter#visitCtDo(spoon.reflect.code.CtDo)
DefaultJavaPrettyPrinter#visitCtEnum(spoon.reflect.declaration.CtEnum)
DefaultJavaPrettyPrinter#visitCtExecutableReference(spoon.reflect.reference.CtExecutableReference)
DefaultJavaPrettyPrinter#visitCtField(spoon.reflect.declaration.CtField)
DefaultJavaPrettyPrinter#visitCtEnumValue(spoon.reflect.declaration.CtEnumValue)
DefaultJavaPrettyPrinter#visitCtFieldRead(spoon.reflect.code.CtFieldRead)
DefaultJavaPrettyPrinter#visitCtFieldWrite(spoon.reflect.code.CtFieldWrite)
DefaultJavaPrettyPrinter#visitCtThisAccess(spoon.reflect.code.CtThisAccess)
DefaultJavaPrettyPrinter#visitCtSuperAccess(spoon.reflect.code.CtSuperAccess)
DefaultJavaPrettyPrinter#visitCtJavaDoc(spoon.reflect.code.CtJavaDoc)
DefaultJavaPrettyPrinter#visitCtJavaDocTag(spoon.reflect.code.CtJavaDocTag)
DefaultJavaPrettyPrinter#visitCtImport(spoon.reflect.declaration.CtImport)
DefaultJavaPrettyPrinter#visitCtModule(spoon.reflect.declaration.CtModule)
DefaultJavaPrettyPrinter#visitCtModuleReference(spoon.reflect.reference.CtModuleReference)
DefaultJavaPrettyPrinter#visitCtPackageExport(spoon.reflect.declaration.CtPackageExport)
DefaultJavaPrettyPrinter#visitCtModuleRequirement(spoon.reflect.declaration.CtModuleRequirement)
DefaultJavaPrettyPrinter#visitCtProvidedService(spoon.reflect.declaration.CtProvidedService)
DefaultJavaPrettyPrinter#visitCtUsedService(spoon.reflect.declaration.CtUsedService)
DefaultJavaPrettyPrinter#visitCtComment(spoon.reflect.code.CtComment)
DefaultJavaPrettyPrinter#visitCtAnnotationFieldAccess(spoon.reflect.code.CtAnnotationFieldAccess)
DefaultJavaPrettyPrinter#visitCtFieldReference(spoon.reflect.reference.CtFieldReference)
DefaultJavaPrettyPrinter#visitCtFor(spoon.reflect.code.CtFor)
DefaultJavaPrettyPrinter#visitCtForEach(spoon.reflect.code.CtForEach)
DefaultJavaPrettyPrinter#visitCtIf(spoon.reflect.code.CtIf)
DefaultJavaPrettyPrinter#visitCtInterface(spoon.reflect.declaration.CtInterface)
DefaultJavaPrettyPrinter#visitCtInvocation(spoon.reflect.code.CtInvocation)
DefaultJavaPrettyPrinter#visitCtLiteral(spoon.reflect.code.CtLiteral)
DefaultJavaPrettyPrinter#visitCtLocalVariable(spoon.reflect.code.CtLocalVariable)
DefaultJavaPrettyPrinter#visitCtLocalVariableReference(spoon.reflect.reference.CtLocalVariableReference)
DefaultJavaPrettyPrinter#visitCtCatchVariable(spoon.reflect.code.CtCatchVariable)
DefaultJavaPrettyPrinter#visitCtCatchVariableReference(spoon.reflect.reference.CtCatchVariableReference)
DefaultJavaPrettyPrinter#visitCtMethod(spoon.reflect.declaration.CtMethod)
DefaultJavaPrettyPrinter#visitCtAnnotationMethod(spoon.reflect.declaration.CtAnnotationMethod)
DefaultJavaPrettyPrinter#visitCtNewArray(spoon.reflect.code.CtNewArray)
DefaultJavaPrettyPrinter#visitCtConstructorCall(spoon.reflect.code.CtConstructorCall)
DefaultJavaPrettyPrinter#visitCtNewClass(spoon.reflect.code.CtNewClass)
DefaultJavaPrettyPrinter#visitCtLambda(spoon.reflect.code.CtLambda)
DefaultJavaPrettyPrinter#visitCtExecutableReferenceExpression(spoon.reflect.code.CtExecutableReferenceExpression)
DefaultJavaPrettyPrinter#visitCtOperatorAssignment(spoon.reflect.code.CtOperatorAssignment)
DefaultJavaPrettyPrinter#visitCtPackage(spoon.reflect.declaration.CtPackage)
DefaultJavaPrettyPrinter#visitCtPackageReference(spoon.reflect.reference.CtPackageReference)
DefaultJavaPrettyPrinter#visitCtParameter(spoon.reflect.declaration.CtParameter)
DefaultJavaPrettyPrinter#visitCtParameterReference(spoon.reflect.reference.CtParameterReference)
DefaultJavaPrettyPrinter#visitCtReturn(spoon.reflect.code.CtReturn)
DefaultJavaPrettyPrinter#visitCtStatementList(spoon.reflect.code.CtStatementList)
DefaultJavaPrettyPrinter#visitCtSwitch(spoon.reflect.code.CtSwitch)
DefaultJavaPrettyPrinter#visitCtSynchronized(spoon.reflect.code.CtSynchronized)
DefaultJavaPrettyPrinter#visitCtThrow(spoon.reflect.code.CtThrow)
DefaultJavaPrettyPrinter#visitCtTry(spoon.reflect.code.CtTry)
DefaultJavaPrettyPrinter#visitCtTryWithResource(spoon.reflect.code.CtTryWithResource)
DefaultJavaPrettyPrinter#visitCtTypeParameterReference(spoon.reflect.reference.CtTypeParameterReference)
DefaultJavaPrettyPrinter#visitCtWildcardReference(spoon.reflect.reference.CtWildcardReference)
DefaultJavaPrettyPrinter#visitCtIntersectionTypeReference(spoon.reflect.reference.CtIntersectionTypeReference)
DefaultJavaPrettyPrinter#visitCtTypeReference(spoon.reflect.reference.CtTypeReference)
DefaultJavaPrettyPrinter#visitCtTypeAccess(spoon.reflect.code.CtTypeAccess)
DefaultJavaPrettyPrinter#visitCtUnaryOperator(spoon.reflect.code.CtUnaryOperator)
DefaultJavaPrettyPrinter#visitCtVariableRead(spoon.reflect.code.CtVariableRead)
DefaultJavaPrettyPrinter#visitCtVariableWrite(spoon.reflect.code.CtVariableWrite)
DefaultJavaPrettyPrinter#visitCtWhile(spoon.reflect.code.CtWhile)
DefaultJavaPrettyPrinter#visitCtCodeSnippetExpression(spoon.reflect.code.CtCodeSnippetExpression)
DefaultJavaPrettyPrinter#visitCtCodeSnippetStatement(spoon.reflect.code.CtCodeSnippetStatement)
DefaultJavaPrettyPrinter#getElementPrinterHelper()
DefaultJavaPrettyPrinter#getContext()
DefaultJavaPrettyPrinter#visitCtUnboundVariableReference(spoon.reflect.reference.CtUnboundVariableReference)
DefaultJavaPrettyPrinter#printPackageInfo(spoon.reflect.declaration.CtPackage)
DefaultJavaPrettyPrinter#printModuleInfo(spoon.reflect.declaration.CtModule)
DefaultJavaPrettyPrinter#getResult()
DefaultJavaPrettyPrinter#writeHeader(java.util.List,java.util.Collection)
DefaultJavaPrettyPrinter#writeFooter(java.util.List)
DefaultJavaPrettyPrinter#calculate(spoon.reflect.cu.CompilationUnit,java.util.List)
DefaultJavaPrettyPrinter#getLineNumberMapping()
DefaultJavaPrettyPrinter#setPrinterTokenWriter(spoon.reflect.visitor.TokenWriter)
DefaultTokenWriter#writeOperator(java.lang.String)
DefaultTokenWriter#writeSeparator(java.lang.String)
DefaultTokenWriter#writeLiteral(java.lang.String)
DefaultTokenWriter#writeKeyword(java.lang.String)
DefaultTokenWriter#writeIdentifier(java.lang.String)
DefaultTokenWriter#writeCodeSnippet(java.lang.String)
DefaultTokenWriter#writeComment(spoon.reflect.code.CtComment)
DefaultTokenWriter#writeln()
DefaultTokenWriter#incTab()
DefaultTokenWriter#decTab()
DefaultTokenWriter#reset()
DefaultTokenWriter#writeSpace()
DefaultTokenWriter#getPrinterHelper()
EarlyTerminatingScanner#getResult()
EarlyTerminatingScanner#getListener()
EarlyTerminatingScanner#setListener(spoon.reflect.visitor.chain.CtScannerListener)
EarlyTerminatingScanner#scan(spoon.reflect.path.CtRole,java.util.Collection)
EarlyTerminatingScanner#scan(spoon.reflect.path.CtRole,java.util.Map)
EarlyTerminatingScanner#scan(spoon.reflect.path.CtRole,spoon.reflect.declaration.CtElement)
EarlyTerminatingScanner#scan(spoon.reflect.declaration.CtElement)
EarlyTerminatingScanner#scan(spoon.reflect.path.CtRole,java.lang.Object)
ElementPrinterHelper#writeAnnotations(spoon.reflect.declaration.CtElement)
ElementPrinterHelper#writeModifiers(spoon.reflect.declaration.CtModifiable)
ElementPrinterHelper#visitCtNamedElement(spoon.reflect.declaration.CtNamedElement,spoon.reflect.cu.CompilationUnit)
ElementPrinterHelper#writeExtendsClause(spoon.reflect.declaration.CtType)
ElementPrinterHelper#writeImplementsClause(spoon.reflect.declaration.CtType)
ElementPrinterHelper#writeExecutableParameters(spoon.reflect.declaration.CtExecutable)
ElementPrinterHelper#writeThrowsClause(spoon.reflect.declaration.CtExecutable)
ElementPrinterHelper#writeStatement(spoon.reflect.code.CtStatement)
ElementPrinterHelper#writeElementList(java.util.List)
ElementPrinterHelper#writeAnnotationElement(spoon.reflect.factory.Factory,java.lang.Object)
ElementPrinterHelper#writeFormalTypeParameters(spoon.reflect.declaration.CtFormalTypeDeclarer)
ElementPrinterHelper#writeActualTypeArguments(spoon.reflect.reference.CtActualTypeContainer)
ElementPrinterHelper#writeImports(java.util.Collection)
ElementPrinterHelper#writeHeader(java.util.List,java.util.Collection)
ElementPrinterHelper#writeFooter(java.util.List)
ElementPrinterHelper#writePackageLine(java.lang.String)
ElementPrinterHelper#writeComment(spoon.reflect.code.CtComment)
ElementPrinterHelper#writeComment(spoon.reflect.declaration.CtElement)
ElementPrinterHelper#writeComment(spoon.reflect.declaration.CtElement,spoon.reflect.visitor.printer.CommentOffset)
ElementPrinterHelper#getComments(spoon.reflect.declaration.CtElement,spoon.reflect.visitor.printer.CommentOffset)
ElementPrinterHelper#writeIfOrLoopBlock(spoon.reflect.code.CtStatement)
ElementPrinterHelper#writeQualifiedName(java.lang.String)
ElementPrinterHelper#printList(java.lang.Iterable,java.lang.String,boolean,java.lang.String,boolean,boolean,java.lang.String,boolean,boolean,java.lang.String,java.util.function.Consumer)
Filter#matches(T extends spoon.reflect.declaration.CtElement)
ImportScanner#computeImports(spoon.reflect.declaration.CtElement)
ImportScanner#getAllImports()
ImportScanner#isImported(spoon.reflect.reference.CtReference)
ImportScannerImpl#visitCtFieldRead(spoon.reflect.code.CtFieldRead)
ImportScannerImpl#visitCtFieldReference(spoon.reflect.reference.CtFieldReference)
ImportScannerImpl#visitCtExecutableReference(spoon.reflect.reference.CtExecutableReference)
ImportScannerImpl#visitCtTypeReference(spoon.reflect.reference.CtTypeReference)
ImportScannerImpl#scan(spoon.reflect.declaration.CtElement)
ImportScannerImpl#visitCtAnnotationType(spoon.reflect.declaration.CtAnnotationType)
ImportScannerImpl#visitCtEnum(spoon.reflect.declaration.CtEnum)
ImportScannerImpl#visitCtInterface(spoon.reflect.declaration.CtInterface)
ImportScannerImpl#visitCtClass(spoon.reflect.declaration.CtClass)
ImportScannerImpl#visitCtCatchVariable(spoon.reflect.code.CtCatchVariable)
ImportScannerImpl#getAllImports()
ImportScannerImpl#computeImports(spoon.reflect.declaration.CtElement)
ImportScannerImpl#isImported(spoon.reflect.reference.CtReference)
JavaIdentifiers#isLegalJavaIdentifier(java.lang.String)
JavaIdentifiers#isLegalJavaPackageIdentifier(java.lang.String)
JavaIdentifiers#isLegalJavaExecutableIdentifier(java.lang.String)
ListPrinter#printSeparatorIfAppropriate()
ListPrinter#close()
LiteralHelper#getLiteralToken(spoon.reflect.code.CtLiteral)
ModelConsistencyChecker#enter(spoon.reflect.declaration.CtElement)
OperatorHelper#isPrefixOperator(spoon.reflect.code.UnaryOperatorKind)
OperatorHelper#isSufixOperator(spoon.reflect.code.UnaryOperatorKind)
OperatorHelper#getOperatorText(spoon.reflect.code.UnaryOperatorKind)
OperatorHelper#getOperatorText(spoon.reflect.code.BinaryOperatorKind)
PrettyPrinter#printPackageInfo(spoon.reflect.declaration.CtPackage)
PrettyPrinter#printModuleInfo(spoon.reflect.declaration.CtModule)
PrettyPrinter#getResult()
PrettyPrinter#calculate(spoon.reflect.cu.CompilationUnit,java.util.List)
PrettyPrinter#getLineNumberMapping()
PrinterHelper#reset()
PrinterHelper#write(java.lang.String)
PrinterHelper#write(char)
PrinterHelper#writeln()
PrinterHelper#writeTabs()
PrinterHelper#incTab()
PrinterHelper#decTab()
PrinterHelper#getTabCount()
PrinterHelper#setTabCount(int)
PrinterHelper#removeLine()
PrinterHelper#adjustStartPosition(spoon.reflect.declaration.CtElement)
PrinterHelper#adjustEndPosition(spoon.reflect.declaration.CtElement)
PrinterHelper#undefineLine()
PrinterHelper#mapLine(spoon.reflect.declaration.CtElement,spoon.reflect.cu.CompilationUnit)
PrinterHelper#putLineNumberMapping(int)
PrinterHelper#getLineNumberMapping()
PrinterHelper#toString()
PrinterHelper#getLineSeparator()
PrinterHelper#setLineSeparator(java.lang.String)
PrinterHelper#writeSpace()
PrintingContext#noTypeDecl()
PrintingContext#ignoreGenerics()
PrintingContext#skipArray()
PrintingContext#ignoreStaticAccess()
PrintingContext#ignoreEnclosingClass()
PrintingContext#forceWildcardGenerics()
PrintingContext#modify()
PrintingContext#getCurrentTypeReference()
PrintingContext#pushCurrentThis(spoon.reflect.declaration.CtType)
PrintingContext#popCurrentThis()
PrintingContext#toString()
PrintingContext#isInCurrentScope(spoon.reflect.reference.CtTypeReference)
Query#getElements(spoon.reflect.factory.Factory,spoon.reflect.visitor.Filter)
Query#getElements(spoon.reflect.declaration.CtElement,spoon.reflect.visitor.Filter)
Query#getReferences(spoon.reflect.declaration.CtElement,spoon.reflect.visitor.Filter)
Query#getReferences(spoon.reflect.factory.Factory,spoon.reflect.visitor.Filter)
TokenWriter#writeSeparator(java.lang.String)
TokenWriter#writeOperator(java.lang.String)
TokenWriter#writeLiteral(java.lang.String)
TokenWriter#writeKeyword(java.lang.String)
TokenWriter#writeIdentifier(java.lang.String)
TokenWriter#writeCodeSnippet(java.lang.String)
TokenWriter#writeComment(spoon.reflect.code.CtComment)
TokenWriter#writeln()
TokenWriter#incTab()
TokenWriter#decTab()
TokenWriter#getPrinterHelper()
TokenWriter#reset()
TokenWriter#writeSpace()
TypeContext#isNameConflict(java.lang.String)
TypeContext#getSimpleName()
TypeContext#getPackage()
Changes#getAdded()
Changes#getRemoved()
Changes#getModified()
Changes#hasAdded()
Changes#hasModified()
Changes#hasRemoved()
CtModel#getRootPackage()
CtModel#getAllTypes()
CtModel#getAllPackages()
CtModel#getUnnamedModule()
CtModel#getAllModules()
CtModel#processWith(spoon.processing.Processor)
CtModel#getElements(spoon.reflect.visitor.Filter)
CtModelImpl#filterChildren(spoon.reflect.visitor.Filter)
CtModelImpl#map(spoon.reflect.visitor.chain.CtFunction)
CtModelImpl#map(spoon.reflect.visitor.chain.CtConsumableFunction)
CtModelImpl#getRootPackage()
CtModelImpl#getAllTypes()
CtModelImpl#getAllPackages()
CtModelImpl#getUnnamedModule()
CtModelImpl#getAllModules()
CtModelImpl#processWith(spoon.processing.Processor)
CtModelImpl#getElements(spoon.reflect.visitor.Filter)
ModelStreamer#save(spoon.reflect.factory.Factory,java.io.OutputStream)
ModelStreamer#load(java.io.InputStream)
CtLineElementComparator#compare(spoon.reflect.declaration.CtElement,spoon.reflect.declaration.CtElement)
DeepRepresentationComparator#compare(spoon.reflect.declaration.CtElement,spoon.reflect.declaration.CtElement)
FixedOrderBasedOnFileNameCompilationUnitComparator#compare(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration)
QualifiedNameComparator#compare(spoon.reflect.declaration.CtElement,spoon.reflect.declaration.CtElement)
SignatureComparator#compare(spoon.reflect.declaration.CtElement,spoon.reflect.declaration.CtElement)
ASTPair#toString()
CompilationUnitFilter#exclude(java.lang.String)
CompilationUnitWrapper#getContents()
FactoryCompilerConfig#initializeCompiler(spoon.support.compiler.jdt.JDTBatchCompiler)
FileCompilerConfig#initializeCompiler(spoon.support.compiler.jdt.JDTBatchCompiler)
JDTBasedSpoonCompiler#build()
JDTBasedSpoonCompiler#build(spoon.compiler.builder.JDTBuilder)
JDTBasedSpoonCompiler#compile(spoon.SpoonModelBuilder$InputType[])
JDTBasedSpoonCompiler#instantiateAndProcess(java.util.List)
JDTBasedSpoonCompiler#process(java.util.Collection)
JDTBasedSpoonCompiler#generateProcessedSourceFiles(spoon.OutputType)
JDTBasedSpoonCompiler#generateProcessedSourceFiles(spoon.OutputType,spoon.reflect.visitor.Filter)
JDTBasedSpoonCompiler#addInputSource(java.io.File)
JDTBasedSpoonCompiler#addInputSource(spoon.compiler.SpoonResource)
JDTBasedSpoonCompiler#addInputSources(java.util.List)
JDTBasedSpoonCompiler#getInputSources()
JDTBasedSpoonCompiler#addTemplateSource(spoon.compiler.SpoonResource)
JDTBasedSpoonCompiler#addTemplateSource(java.io.File)
JDTBasedSpoonCompiler#addTemplateSources(java.util.List)
JDTBasedSpoonCompiler#getTemplateSources()
JDTBasedSpoonCompiler#setSourceOutputDirectory(java.io.File)
JDTBasedSpoonCompiler#getSourceOutputDirectory()
JDTBasedSpoonCompiler#setBinaryOutputDirectory(java.io.File)
JDTBasedSpoonCompiler#getBinaryOutputDirectory()
JDTBasedSpoonCompiler#getSourceClasspath()
JDTBasedSpoonCompiler#setSourceClasspath(java.lang.String[])
JDTBasedSpoonCompiler#getTemplateClasspath()
JDTBasedSpoonCompiler#setTemplateClasspath(java.lang.String[])
JDTBasedSpoonCompiler#getFactory()
JDTBasedSpoonCompiler#setEnvironment(org.eclipse.jdt.internal.compiler.env.INameEnvironment)
JDTBasedSpoonCompiler#reportProblem(org.eclipse.jdt.core.compiler.CategorizedProblem)
JDTBasedSpoonCompiler#reportProblems(spoon.compiler.Environment)
JDTBasedSpoonCompiler#getProblems()
JDTBasedSpoonCompiler#getSource()
JDTBasedSpoonCompiler#getTemplates()
JDTBasedSpoonCompiler#addCompilationUnitFilter(spoon.support.compiler.jdt.CompilationUnitFilter)
JDTBasedSpoonCompiler#removeCompilationUnitFilter(spoon.support.compiler.jdt.CompilationUnitFilter)
JDTBasedSpoonCompiler#getCompilationUnitFilter()
JDTBatchCompiler#getCompilationUnits()
JDTBatchCompiler#setCompilationUnits(org.eclipse.jdt.internal.compiler.batch.CompilationUnit[])
JDTBatchCompiler#getBatchRequestor()
JDTBatchCompiler#ignoreFile(java.lang.String)
JDTBatchCompiler#getUnits()
JDTBatchCompiler#getJdtCompiler()
JDTCommentBuilder#build()
JDTCommentBuilder#cleanComment(java.lang.String)
JDTSnippetCompiler#build()
JDTSnippetCompiler#build(spoon.compiler.builder.JDTBuilder)
JDTSnippetCompiler#getSnippetCompilationUnit()
JDTTreeBuilder#getLogger()
JDTTreeBuilder#getPositionBuilder()
JDTTreeBuilder#getContextBuilder()
JDTTreeBuilder#getReferencesBuilder()
JDTTreeBuilder#getHelper()
JDTTreeBuilder#getExiter()
JDTTreeBuilder#getFactory()
JDTTreeBuilder#endVisit(org.eclipse.jdt.internal.compiler.ast.AllocationExpression,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#endVisit(org.eclipse.jdt.internal.compiler.ast.AND_AND_Expression,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#endVisit(org.eclipse.jdt.internal.compiler.ast.AnnotationMethodDeclaration,org.eclipse.jdt.internal.compiler.lookup.ClassScope)
JDTTreeBuilder#endVisit(org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#endVisit(org.eclipse.jdt.internal.compiler.ast.ArrayAllocationExpression,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#endVisit(org.eclipse.jdt.internal.compiler.ast.ArrayInitializer,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#endVisit(org.eclipse.jdt.internal.compiler.ast.ArrayReference,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#endVisit(org.eclipse.jdt.internal.compiler.ast.ArrayTypeReference,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#endVisit(org.eclipse.jdt.internal.compiler.ast.ArrayTypeReference,org.eclipse.jdt.internal.compiler.lookup.ClassScope)
JDTTreeBuilder#endVisit(org.eclipse.jdt.internal.compiler.ast.ArrayQualifiedTypeReference,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#endVisit(org.eclipse.jdt.internal.compiler.ast.ArrayQualifiedTypeReference,org.eclipse.jdt.internal.compiler.lookup.ClassScope)
JDTTreeBuilder#endVisit(org.eclipse.jdt.internal.compiler.ast.AssertStatement,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#endVisit(org.eclipse.jdt.internal.compiler.ast.Assignment,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#endVisit(org.eclipse.jdt.internal.compiler.ast.BinaryExpression,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#endVisit(org.eclipse.jdt.internal.compiler.ast.Block,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#endVisit(org.eclipse.jdt.internal.compiler.ast.BreakStatement,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#endVisit(org.eclipse.jdt.internal.compiler.ast.CaseStatement,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#endVisit(org.eclipse.jdt.internal.compiler.ast.CharLiteral,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#endVisit(org.eclipse.jdt.internal.compiler.ast.ClassLiteralAccess,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#endVisit(org.eclipse.jdt.internal.compiler.ast.CompoundAssignment,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#endVisit(org.eclipse.jdt.internal.compiler.ast.ConditionalExpression,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#endVisit(org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration,org.eclipse.jdt.internal.compiler.lookup.ClassScope)
JDTTreeBuilder#endVisit(org.eclipse.jdt.internal.compiler.ast.ContinueStatement,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#endVisit(org.eclipse.jdt.internal.compiler.ast.DoStatement,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#endVisit(org.eclipse.jdt.internal.compiler.ast.DoubleLiteral,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#endVisit(org.eclipse.jdt.internal.compiler.ast.EqualExpression,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#endVisit(org.eclipse.jdt.internal.compiler.ast.ExplicitConstructorCall,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#endVisit(org.eclipse.jdt.internal.compiler.ast.ExtendedStringLiteral,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#endVisit(org.eclipse.jdt.internal.compiler.ast.FalseLiteral,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#endVisit(org.eclipse.jdt.internal.compiler.ast.FieldDeclaration,org.eclipse.jdt.internal.compiler.lookup.MethodScope)
JDTTreeBuilder#endVisit(org.eclipse.jdt.internal.compiler.ast.FieldReference,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#endVisit(org.eclipse.jdt.internal.compiler.ast.FloatLiteral,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#endVisit(org.eclipse.jdt.internal.compiler.ast.ForeachStatement,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#endVisit(org.eclipse.jdt.internal.compiler.ast.ForStatement,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#endVisit(org.eclipse.jdt.internal.compiler.ast.IfStatement,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#endVisit(org.eclipse.jdt.internal.compiler.ast.Initializer,org.eclipse.jdt.internal.compiler.lookup.MethodScope)
JDTTreeBuilder#endVisit(org.eclipse.jdt.internal.compiler.ast.InstanceOfExpression,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#endVisit(org.eclipse.jdt.internal.compiler.ast.IntLiteral,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#endVisit(org.eclipse.jdt.internal.compiler.ast.LocalDeclaration,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#endVisit(org.eclipse.jdt.internal.compiler.ast.LongLiteral,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#endVisit(org.eclipse.jdt.internal.compiler.ast.NormalAnnotation,org.eclipse.jdt.internal.compiler.lookup.ClassScope)
JDTTreeBuilder#endVisit(org.eclipse.jdt.internal.compiler.ast.MarkerAnnotation,org.eclipse.jdt.internal.compiler.lookup.ClassScope)
JDTTreeBuilder#endVisit(org.eclipse.jdt.internal.compiler.ast.MarkerAnnotation,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#endVisit(org.eclipse.jdt.internal.compiler.ast.MemberValuePair,org.eclipse.jdt.internal.compiler.lookup.ClassScope)
JDTTreeBuilder#endVisit(org.eclipse.jdt.internal.compiler.ast.MemberValuePair,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#endVisit(org.eclipse.jdt.internal.compiler.ast.MessageSend,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#endVisit(org.eclipse.jdt.internal.compiler.ast.MethodDeclaration,org.eclipse.jdt.internal.compiler.lookup.ClassScope)
JDTTreeBuilder#endVisit(org.eclipse.jdt.internal.compiler.ast.NormalAnnotation,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#endVisit(org.eclipse.jdt.internal.compiler.ast.NullLiteral,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#endVisit(org.eclipse.jdt.internal.compiler.ast.OR_OR_Expression,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#endVisit(org.eclipse.jdt.internal.compiler.ast.ParameterizedQualifiedTypeReference,org.eclipse.jdt.internal.compiler.lookup.ClassScope)
JDTTreeBuilder#endVisit(org.eclipse.jdt.internal.compiler.ast.ParameterizedQualifiedTypeReference,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#endVisit(org.eclipse.jdt.internal.compiler.ast.ParameterizedSingleTypeReference,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#endVisit(org.eclipse.jdt.internal.compiler.ast.ParameterizedSingleTypeReference,org.eclipse.jdt.internal.compiler.lookup.ClassScope)
JDTTreeBuilder#endVisit(org.eclipse.jdt.internal.compiler.ast.PostfixExpression,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#endVisit(org.eclipse.jdt.internal.compiler.ast.PrefixExpression,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#endVisit(org.eclipse.jdt.internal.compiler.ast.QualifiedAllocationExpression,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#endVisit(org.eclipse.jdt.internal.compiler.ast.QualifiedNameReference,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#endVisit(org.eclipse.jdt.internal.compiler.ast.QualifiedThisReference,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#endVisit(org.eclipse.jdt.internal.compiler.ast.QualifiedTypeReference,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#endVisit(org.eclipse.jdt.internal.compiler.ast.QualifiedTypeReference,org.eclipse.jdt.internal.compiler.lookup.ClassScope)
JDTTreeBuilder#endVisit(org.eclipse.jdt.internal.compiler.ast.ReturnStatement,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#endVisit(org.eclipse.jdt.internal.compiler.ast.SingleMemberAnnotation,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#endVisit(org.eclipse.jdt.internal.compiler.ast.SingleNameReference,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#endVisit(org.eclipse.jdt.internal.compiler.ast.SingleTypeReference,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#endVisit(org.eclipse.jdt.internal.compiler.ast.SingleTypeReference,org.eclipse.jdt.internal.compiler.lookup.ClassScope)
JDTTreeBuilder#endVisit(org.eclipse.jdt.internal.compiler.ast.StringLiteral,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#endVisit(org.eclipse.jdt.internal.compiler.ast.StringLiteralConcatenation,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#endVisit(org.eclipse.jdt.internal.compiler.ast.QualifiedSuperReference,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#endVisit(org.eclipse.jdt.internal.compiler.ast.SuperReference,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#endVisit(org.eclipse.jdt.internal.compiler.ast.QualifiedThisReference,org.eclipse.jdt.internal.compiler.lookup.ClassScope)
JDTTreeBuilder#endVisit(org.eclipse.jdt.internal.compiler.ast.ThisReference,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#endVisit(org.eclipse.jdt.internal.compiler.ast.SwitchStatement,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#endVisit(org.eclipse.jdt.internal.compiler.ast.SynchronizedStatement,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#endVisit(org.eclipse.jdt.internal.compiler.ast.ThrowStatement,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#endVisit(org.eclipse.jdt.internal.compiler.ast.TrueLiteral,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#endVisit(org.eclipse.jdt.internal.compiler.ast.TryStatement,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#endVisit(org.eclipse.jdt.internal.compiler.ast.TypeParameter,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#endVisit(org.eclipse.jdt.internal.compiler.ast.TypeParameter,org.eclipse.jdt.internal.compiler.lookup.ClassScope)
JDTTreeBuilder#endVisit(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#endVisit(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration,org.eclipse.jdt.internal.compiler.lookup.ClassScope)
JDTTreeBuilder#endVisit(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration,org.eclipse.jdt.internal.compiler.lookup.CompilationUnitScope)
JDTTreeBuilder#endVisit(org.eclipse.jdt.internal.compiler.ast.UnaryExpression,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#endVisit(org.eclipse.jdt.internal.compiler.ast.WhileStatement,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#endVisit(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,org.eclipse.jdt.internal.compiler.lookup.CompilationUnitScope)
JDTTreeBuilder#visit(org.eclipse.jdt.internal.compiler.ast.Javadoc,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#visit(org.eclipse.jdt.internal.compiler.ast.Javadoc,org.eclipse.jdt.internal.compiler.lookup.ClassScope)
JDTTreeBuilder#visit(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,org.eclipse.jdt.internal.compiler.lookup.CompilationUnitScope)
JDTTreeBuilder#visit(org.eclipse.jdt.internal.compiler.ast.ReferenceExpression,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#endVisit(org.eclipse.jdt.internal.compiler.ast.ReferenceExpression,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#visit(org.eclipse.jdt.internal.compiler.ast.LambdaExpression,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#endVisit(org.eclipse.jdt.internal.compiler.ast.LambdaExpression,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#visit(org.eclipse.jdt.internal.compiler.ast.AllocationExpression,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#visit(org.eclipse.jdt.internal.compiler.ast.QualifiedAllocationExpression,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#visit(org.eclipse.jdt.internal.compiler.ast.AND_AND_Expression,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#visit(org.eclipse.jdt.internal.compiler.ast.AnnotationMethodDeclaration,org.eclipse.jdt.internal.compiler.lookup.ClassScope)
JDTTreeBuilder#visit(org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#visit(org.eclipse.jdt.internal.compiler.ast.ArrayAllocationExpression,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#visit(org.eclipse.jdt.internal.compiler.ast.ArrayInitializer,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#visit(org.eclipse.jdt.internal.compiler.ast.ArrayReference,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#visit(org.eclipse.jdt.internal.compiler.ast.ArrayTypeReference,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#visit(org.eclipse.jdt.internal.compiler.ast.ArrayTypeReference,org.eclipse.jdt.internal.compiler.lookup.ClassScope)
JDTTreeBuilder#visit(org.eclipse.jdt.internal.compiler.ast.ArrayQualifiedTypeReference,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#visit(org.eclipse.jdt.internal.compiler.ast.ArrayQualifiedTypeReference,org.eclipse.jdt.internal.compiler.lookup.ClassScope)
JDTTreeBuilder#visit(org.eclipse.jdt.internal.compiler.ast.AssertStatement,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#visit(org.eclipse.jdt.internal.compiler.ast.Assignment,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#visit(org.eclipse.jdt.internal.compiler.ast.CompoundAssignment,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#visit(org.eclipse.jdt.internal.compiler.ast.BinaryExpression,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#visit(org.eclipse.jdt.internal.compiler.ast.Block,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#visit(org.eclipse.jdt.internal.compiler.ast.BreakStatement,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#visit(org.eclipse.jdt.internal.compiler.ast.CastExpression,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#visit(org.eclipse.jdt.internal.compiler.ast.CharLiteral,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#visit(org.eclipse.jdt.internal.compiler.ast.ClassLiteralAccess,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#visit(org.eclipse.jdt.internal.compiler.ast.ConditionalExpression,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#visit(org.eclipse.jdt.internal.compiler.ast.MethodDeclaration,org.eclipse.jdt.internal.compiler.lookup.ClassScope)
JDTTreeBuilder#visit(org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration,org.eclipse.jdt.internal.compiler.lookup.ClassScope)
JDTTreeBuilder#visit(org.eclipse.jdt.internal.compiler.ast.TypeParameter,org.eclipse.jdt.internal.compiler.lookup.ClassScope)
JDTTreeBuilder#visit(org.eclipse.jdt.internal.compiler.ast.TypeParameter,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#visit(org.eclipse.jdt.internal.compiler.ast.ContinueStatement,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#visit(org.eclipse.jdt.internal.compiler.ast.DoStatement,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#visit(org.eclipse.jdt.internal.compiler.ast.DoubleLiteral,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#visit(org.eclipse.jdt.internal.compiler.ast.EqualExpression,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#visit(org.eclipse.jdt.internal.compiler.ast.ExplicitConstructorCall,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#visit(org.eclipse.jdt.internal.compiler.ast.ExtendedStringLiteral,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#visit(org.eclipse.jdt.internal.compiler.ast.FalseLiteral,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#visit(org.eclipse.jdt.internal.compiler.ast.FieldDeclaration,org.eclipse.jdt.internal.compiler.lookup.MethodScope)
JDTTreeBuilder#visit(org.eclipse.jdt.internal.compiler.ast.FieldReference,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#visit(org.eclipse.jdt.internal.compiler.ast.FloatLiteral,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#visit(org.eclipse.jdt.internal.compiler.ast.ForeachStatement,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#visit(org.eclipse.jdt.internal.compiler.ast.ForStatement,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#visit(org.eclipse.jdt.internal.compiler.ast.IfStatement,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#visit(org.eclipse.jdt.internal.compiler.ast.Initializer,org.eclipse.jdt.internal.compiler.lookup.MethodScope)
JDTTreeBuilder#visit(org.eclipse.jdt.internal.compiler.ast.InstanceOfExpression,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#visit(org.eclipse.jdt.internal.compiler.ast.IntLiteral,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#visit(org.eclipse.jdt.internal.compiler.ast.LabeledStatement,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#visit(org.eclipse.jdt.internal.compiler.ast.LocalDeclaration,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#visit(org.eclipse.jdt.internal.compiler.ast.LongLiteral,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#visit(org.eclipse.jdt.internal.compiler.ast.NormalAnnotation,org.eclipse.jdt.internal.compiler.lookup.ClassScope)
JDTTreeBuilder#visit(org.eclipse.jdt.internal.compiler.ast.NormalAnnotation,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#visit(org.eclipse.jdt.internal.compiler.ast.MarkerAnnotation,org.eclipse.jdt.internal.compiler.lookup.ClassScope)
JDTTreeBuilder#visit(org.eclipse.jdt.internal.compiler.ast.MarkerAnnotation,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#visit(org.eclipse.jdt.internal.compiler.ast.SingleMemberAnnotation,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#visit(org.eclipse.jdt.internal.compiler.ast.MemberValuePair,org.eclipse.jdt.internal.compiler.lookup.ClassScope)
JDTTreeBuilder#visit(org.eclipse.jdt.internal.compiler.ast.MemberValuePair,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#visit(org.eclipse.jdt.internal.compiler.ast.MessageSend,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#visit(org.eclipse.jdt.internal.compiler.ast.NullLiteral,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#visit(org.eclipse.jdt.internal.compiler.ast.OR_OR_Expression,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#visit(org.eclipse.jdt.internal.compiler.ast.ParameterizedQualifiedTypeReference,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#visit(org.eclipse.jdt.internal.compiler.ast.ParameterizedQualifiedTypeReference,org.eclipse.jdt.internal.compiler.lookup.ClassScope)
JDTTreeBuilder#visit(org.eclipse.jdt.internal.compiler.ast.ParameterizedSingleTypeReference,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#visit(org.eclipse.jdt.internal.compiler.ast.ParameterizedSingleTypeReference,org.eclipse.jdt.internal.compiler.lookup.ClassScope)
JDTTreeBuilder#visit(org.eclipse.jdt.internal.compiler.ast.PostfixExpression,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#visit(org.eclipse.jdt.internal.compiler.ast.PrefixExpression,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#visit(org.eclipse.jdt.internal.compiler.ast.QualifiedNameReference,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#visit(org.eclipse.jdt.internal.compiler.ast.QualifiedTypeReference,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#visit(org.eclipse.jdt.internal.compiler.ast.QualifiedTypeReference,org.eclipse.jdt.internal.compiler.lookup.ClassScope)
JDTTreeBuilder#visit(org.eclipse.jdt.internal.compiler.ast.ReturnStatement,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#visit(org.eclipse.jdt.internal.compiler.ast.SingleNameReference,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#visit(org.eclipse.jdt.internal.compiler.ast.QualifiedSuperReference,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#visit(org.eclipse.jdt.internal.compiler.ast.SuperReference,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#visit(org.eclipse.jdt.internal.compiler.ast.QualifiedThisReference,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#visit(org.eclipse.jdt.internal.compiler.ast.ThisReference,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#endVisit(org.eclipse.jdt.internal.compiler.ast.UnionTypeReference,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#endVisit(org.eclipse.jdt.internal.compiler.ast.UnionTypeReference,org.eclipse.jdt.internal.compiler.lookup.ClassScope)
JDTTreeBuilder#visit(org.eclipse.jdt.internal.compiler.ast.UnionTypeReference,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#visit(org.eclipse.jdt.internal.compiler.ast.UnionTypeReference,org.eclipse.jdt.internal.compiler.lookup.ClassScope)
JDTTreeBuilder#visit(org.eclipse.jdt.internal.compiler.ast.SingleTypeReference,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#visit(org.eclipse.jdt.internal.compiler.ast.SingleTypeReference,org.eclipse.jdt.internal.compiler.lookup.ClassScope)
JDTTreeBuilder#visit(org.eclipse.jdt.internal.compiler.ast.StringLiteral,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#visit(org.eclipse.jdt.internal.compiler.ast.StringLiteralConcatenation,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#visit(org.eclipse.jdt.internal.compiler.ast.CaseStatement,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#visit(org.eclipse.jdt.internal.compiler.ast.SwitchStatement,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#visit(org.eclipse.jdt.internal.compiler.ast.SynchronizedStatement,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#visit(org.eclipse.jdt.internal.compiler.ast.ThrowStatement,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#visit(org.eclipse.jdt.internal.compiler.ast.TrueLiteral,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#visit(org.eclipse.jdt.internal.compiler.ast.TryStatement,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#visit(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#visit(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration,org.eclipse.jdt.internal.compiler.lookup.ClassScope)
JDTTreeBuilder#visit(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration,org.eclipse.jdt.internal.compiler.lookup.CompilationUnitScope)
JDTTreeBuilder#visit(org.eclipse.jdt.internal.compiler.ast.UnaryExpression,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#visit(org.eclipse.jdt.internal.compiler.ast.WhileStatement,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#visit(org.eclipse.jdt.internal.compiler.ast.ModuleDeclaration,org.eclipse.jdt.internal.compiler.lookup.CompilationUnitScope)
JDTTreeBuilderHelper#createVariableAccess(spoon.reflect.reference.CtVariableReference,boolean)
JDTTreeBuilderHelper#createFieldAccess(spoon.reflect.reference.CtVariableReference,spoon.reflect.code.CtExpression,boolean)
ParentExiter#setChild(spoon.reflect.declaration.CtElement)
ParentExiter#setChild(org.eclipse.jdt.internal.compiler.ast.ASTNode)
ParentExiter#scanCtElement(spoon.reflect.declaration.CtElement)
ParentExiter#scanCtExecutable(spoon.reflect.declaration.CtExecutable)
ParentExiter#scanCtFormalTypeDeclarer(spoon.reflect.declaration.CtFormalTypeDeclarer)
ParentExiter#scanCtLoop(spoon.reflect.code.CtLoop)
ParentExiter#scanCtTargetedExpression(spoon.reflect.code.CtTargetedExpression)
ParentExiter#scanCtType(spoon.reflect.declaration.CtType)
ParentExiter#scanCtVariable(spoon.reflect.declaration.CtVariable)
ParentExiter#visitCtAnnotation(spoon.reflect.declaration.CtAnnotation)
ParentExiter#visitCtConstructor(spoon.reflect.declaration.CtConstructor)
ParentExiter#visitCtMethod(spoon.reflect.declaration.CtMethod)
ParentExiter#visitCtAnnotationMethod(spoon.reflect.declaration.CtAnnotationMethod)
ParentExiter#visitCtAnonymousExecutable(spoon.reflect.declaration.CtAnonymousExecutable)
ParentExiter#visitCtArrayRead(spoon.reflect.code.CtArrayRead)
ParentExiter#visitCtArrayWrite(spoon.reflect.code.CtArrayWrite)
ParentExiter#visitCtAssert(spoon.reflect.code.CtAssert)
ParentExiter#visitCtAssignment(spoon.reflect.code.CtAssignment)
ParentExiter#visitCtBinaryOperator(spoon.reflect.code.CtBinaryOperator)
ParentExiter#visitCtBlock(spoon.reflect.code.CtBlock)
ParentExiter#visitCtCase(spoon.reflect.code.CtCase)
ParentExiter#visitCtCatch(spoon.reflect.code.CtCatch)
ParentExiter#visitCtCatchVariable(spoon.reflect.code.CtCatchVariable)
ParentExiter#visitCtClass(spoon.reflect.declaration.CtClass)
ParentExiter#visitCtTypeParameter(spoon.reflect.declaration.CtTypeParameter)
ParentExiter#visitCtConditional(spoon.reflect.code.CtConditional)
ParentExiter#visitCtDo(spoon.reflect.code.CtDo)
ParentExiter#visitCtFor(spoon.reflect.code.CtFor)
ParentExiter#visitCtForEach(spoon.reflect.code.CtForEach)
ParentExiter#visitCtWhile(spoon.reflect.code.CtWhile)
ParentExiter#visitCtIf(spoon.reflect.code.CtIf)
ParentExiter#visitCtSuperAccess(spoon.reflect.code.CtSuperAccess)
ParentExiter#visitCtInvocation(spoon.reflect.code.CtInvocation)
ParentExiter#visitCtNewArray(spoon.reflect.code.CtNewArray)
ParentExiter#visitCtConstructorCall(spoon.reflect.code.CtConstructorCall)
ParentExiter#visitCtNewClass(spoon.reflect.code.CtNewClass)
ParentExiter#visitCtLambda(spoon.reflect.code.CtLambda)
ParentExiter#visitCtExecutableReferenceExpression(spoon.reflect.code.CtExecutableReferenceExpression)
ParentExiter#visitCtPackage(spoon.reflect.declaration.CtPackage)
ParentExiter#visitCtReturn(spoon.reflect.code.CtReturn)
ParentExiter#visitCtSwitch(spoon.reflect.code.CtSwitch)
ParentExiter#visitCtSynchronized(spoon.reflect.code.CtSynchronized)
ParentExiter#visitCtThrow(spoon.reflect.code.CtThrow)
ParentExiter#visitCtTry(spoon.reflect.code.CtTry)
ParentExiter#visitCtTryWithResource(spoon.reflect.code.CtTryWithResource)
ParentExiter#visitCtUnaryOperator(spoon.reflect.code.CtUnaryOperator)
ParentExiter#visitCtTypeParameterReference(spoon.reflect.reference.CtTypeParameterReference)
ReferenceBuilder#getPackageReference(java.lang.String)
ReferenceBuilder#getLambdaExecutableReference(org.eclipse.jdt.internal.compiler.ast.SingleNameReference)
ReferenceBuilder#getModuleReference(org.eclipse.jdt.internal.compiler.ast.ModuleReference)
TreeBuilderRequestor#acceptResult(org.eclipse.jdt.internal.compiler.CompilationResult)
FileSystemFile#getContent()
FileSystemFile#getName()
FileSystemFile#getParent()
FileSystemFile#getFileSystemParent()
FileSystemFile#isFile()
FileSystemFile#isJava()
FileSystemFile#getPath()
FileSystemFile#toString()
FileSystemFile#isArchive()
FileSystemFile#toFile()
FileSystemFile#isActualFile()
FileSystemFile#equals(java.lang.Object)
FileSystemFile#hashCode()
FileSystemFolder#getAllFiles()
FileSystemFolder#getFiles()
FileSystemFolder#getName()
FileSystemFolder#getParent()
FileSystemFolder#getSubFolders()
FileSystemFolder#isFile()
FileSystemFolder#toString()
FileSystemFolder#getAllJavaFiles()
FileSystemFolder#getPath()
FileSystemFolder#isArchive()
FileSystemFolder#getFileSystemParent()
FileSystemFolder#toFile()
FileSystemFolder#equals(java.lang.Object)
FileSystemFolder#hashCode()
FileSystemFolder#addFile(spoon.compiler.SpoonFile)
FileSystemFolder#addFolder(spoon.compiler.SpoonFolder)
FilteringFolder#removeAllThatMatch(java.lang.String)
ProgressLogger#start(spoon.support.compiler.SpoonProgress$Process)
ProgressLogger#step(spoon.support.compiler.SpoonProgress$Process,java.lang.String,int,int)
ProgressLogger#step(spoon.support.compiler.SpoonProgress$Process,java.lang.String)
ProgressLogger#end(spoon.support.compiler.SpoonProgress$Process)
SnippetCompilationHelper#compileAndReplaceSnippetsIn(spoon.reflect.declaration.CtType)
SnippetCompilationHelper#compileStatement(spoon.reflect.code.CtCodeSnippetStatement)
SnippetCompilationHelper#compileStatement(spoon.reflect.code.CtCodeSnippetStatement,spoon.reflect.reference.CtTypeReference)
SnippetCompilationHelper#compileExpression(spoon.reflect.code.CtCodeSnippetExpression)
SpoonProgress#start(spoon.support.compiler.SpoonProgress$Process)
SpoonProgress#step(spoon.support.compiler.SpoonProgress$Process,java.lang.String,int,int)
SpoonProgress#step(spoon.support.compiler.SpoonProgress$Process,java.lang.String)
SpoonProgress#end(spoon.support.compiler.SpoonProgress$Process)
VirtualFile#getContent()
VirtualFile#isJava()
VirtualFile#getName()
VirtualFile#getParent()
VirtualFile#getFileSystemParent()
VirtualFile#getPath()
VirtualFile#isFile()
VirtualFile#isArchive()
VirtualFile#toFile()
VirtualFile#isActualFile()
VirtualFolder#addFile(spoon.compiler.SpoonFile)
VirtualFolder#addFolder(spoon.compiler.SpoonFolder)
VirtualFolder#getAllFiles()
VirtualFolder#getAllJavaFiles()
VirtualFolder#getFiles()
VirtualFolder#getName()
VirtualFolder#getParent()
VirtualFolder#getSubFolders()
VirtualFolder#isFile()
VirtualFolder#getPath()
VirtualFolder#getFileSystemParent()
VirtualFolder#isArchive()
VirtualFolder#toFile()
VirtualFolder#toString()
ZipFile#getContent()
ZipFile#getName()
ZipFile#getParent()
ZipFile#getFileSystemParent()
ZipFile#isFile()
ZipFile#isJava()
ZipFile#getPath()
ZipFile#toString()
ZipFile#isArchive()
ZipFile#toFile()
ZipFile#isActualFile()
ZipFile#equals(java.lang.Object)
ZipFile#hashCode()
ZipFolder#getAllFiles()
ZipFolder#getAllJavaFiles()
ZipFolder#getFiles()
ZipFolder#getName()
ZipFolder#getParent()
ZipFolder#getSubFolders()
ZipFolder#isFile()
ZipFolder#toString()
ZipFolder#getPath()
ZipFolder#isArchive()
ZipFolder#getFileSystemParent()
ZipFolder#toFile()
ZipFolder#equals(java.lang.Object)
ZipFolder#hashCode()
ZipFolder#addFile(spoon.compiler.SpoonFile)
ZipFolder#addFolder(spoon.compiler.SpoonFolder)
ZipFolder#extract(java.io.File)
SpoonModelTree#keyPressed(java.awt.event.KeyEvent)
SpoonModelTree#keyReleased(java.awt.event.KeyEvent)
SpoonModelTree#keyTyped(java.awt.event.KeyEvent)
SpoonModelTree#mouseClicked(java.awt.event.MouseEvent)
SpoonModelTree#mouseEntered(java.awt.event.MouseEvent)
SpoonModelTree#mouseExited(java.awt.event.MouseEvent)
SpoonModelTree#mousePressed(java.awt.event.MouseEvent)
SpoonModelTree#mouseReleased(java.awt.event.MouseEvent)
SpoonModelTree#next()
SpoonModelTree#search()
SpoonModelTree#expandAll(javax.swing.tree.DefaultMutableTreeNode)
SpoonModelTree#expand(javax.swing.tree.DefaultMutableTreeNode)
SpoonModelTree#setVisible(javax.swing.tree.DefaultMutableTreeNode)
SpoonTreeBuilder#scan(spoon.reflect.path.CtRole,spoon.reflect.declaration.CtElement)
SpoonTreeBuilder#enter(spoon.reflect.declaration.CtElement)
SpoonTreeBuilder#exit(spoon.reflect.declaration.CtElement)
SpoonTreeBuilder#getRoot()
CtAnnotationFieldAccessImpl#accept(spoon.reflect.visitor.CtVisitor)
CtAnnotationFieldAccessImpl#clone()
CtArrayAccessImpl#getIndexExpression()
CtArrayAccessImpl#setIndexExpression(spoon.reflect.code.CtExpression)
CtArrayAccessImpl#clone()
CtArrayReadImpl#accept(spoon.reflect.visitor.CtVisitor)
CtArrayReadImpl#clone()
CtArrayWriteImpl#accept(spoon.reflect.visitor.CtVisitor)
CtArrayWriteImpl#clone()
CtAssertImpl#accept(spoon.reflect.visitor.CtVisitor)
CtAssertImpl#getAssertExpression()
CtAssertImpl#setAssertExpression(spoon.reflect.code.CtExpression)
CtAssertImpl#getExpression()
CtAssertImpl#setExpression(spoon.reflect.code.CtExpression)
CtAssertImpl#clone()
CtAssignmentImpl#accept(spoon.reflect.visitor.CtVisitor)
CtAssignmentImpl#getAssigned()
CtAssignmentImpl#getAssignment()
CtAssignmentImpl#getType()
CtAssignmentImpl#getTypeCasts()
CtAssignmentImpl#setAssigned(spoon.reflect.code.CtExpression)
CtAssignmentImpl#setAssignment(spoon.reflect.code.CtExpression)
CtAssignmentImpl#setType(spoon.reflect.reference.CtTypeReference)
CtAssignmentImpl#setTypeCasts(java.util.List)
CtAssignmentImpl#addTypeCast(spoon.reflect.reference.CtTypeReference)
CtAssignmentImpl#S()
CtAssignmentImpl#clone()
CtBinaryOperatorImpl#accept(spoon.reflect.visitor.CtVisitor)
CtBinaryOperatorImpl#getLeftHandOperand()
CtBinaryOperatorImpl#getRightHandOperand()
CtBinaryOperatorImpl#setLeftHandOperand(spoon.reflect.code.CtExpression)
CtBinaryOperatorImpl#setRightHandOperand(spoon.reflect.code.CtExpression)
CtBinaryOperatorImpl#setKind(spoon.reflect.code.BinaryOperatorKind)
CtBinaryOperatorImpl#getKind()
CtBinaryOperatorImpl#clone()
CtBlockImpl#accept(spoon.reflect.visitor.CtVisitor)
CtBlockImpl#getStatements()
CtBlockImpl#getStatement(int)
CtBlockImpl#getLastStatement()
CtBlockImpl#insertBegin(spoon.reflect.code.CtStatementList)
CtBlockImpl#insertBegin(spoon.reflect.code.CtStatement)
CtBlockImpl#insertEnd(spoon.reflect.code.CtStatement)
CtBlockImpl#insertEnd(spoon.reflect.code.CtStatementList)
CtBlockImpl#insertAfter(spoon.reflect.visitor.Filter,spoon.reflect.code.CtStatement)
CtBlockImpl#insertAfter(spoon.reflect.visitor.Filter,spoon.reflect.code.CtStatementList)
CtBlockImpl#insertBefore(spoon.reflect.visitor.Filter,spoon.reflect.code.CtStatement)
CtBlockImpl#insertBefore(spoon.reflect.visitor.Filter,spoon.reflect.code.CtStatementList)
CtBlockImpl#setStatements(java.util.List)
CtBlockImpl#addStatement(spoon.reflect.code.CtStatement)
CtBlockImpl#addStatement(int,spoon.reflect.code.CtStatement)
CtBlockImpl#removeStatement(spoon.reflect.code.CtStatement)
CtBlockImpl#iterator()
CtBlockImpl#S()
CtBlockImpl#clone()
CtBreakImpl#accept(spoon.reflect.visitor.CtVisitor)
CtBreakImpl#getTargetLabel()
CtBreakImpl#setTargetLabel(java.lang.String)
CtBreakImpl#getLabelledStatement()
CtBreakImpl#clone()
CtCaseImpl#accept(spoon.reflect.visitor.CtVisitor)
CtCaseImpl#getCaseExpression()
CtCaseImpl#getStatements()
CtCaseImpl#setCaseExpression(spoon.reflect.code.CtExpression)
CtCaseImpl#setStatements(java.util.List)
CtCaseImpl#addStatement(spoon.reflect.code.CtStatement)
CtCaseImpl#addStatement(int,spoon.reflect.code.CtStatement)
CtCaseImpl#insertBegin(spoon.reflect.code.CtStatement)
CtCaseImpl#insertBegin(spoon.reflect.code.CtStatementList)
CtCaseImpl#insertEnd(spoon.reflect.code.CtStatement)
CtCaseImpl#insertEnd(spoon.reflect.code.CtStatementList)
CtCaseImpl#insertBefore(spoon.reflect.visitor.Filter,spoon.reflect.code.CtStatement)
CtCaseImpl#insertBefore(spoon.reflect.visitor.Filter,spoon.reflect.code.CtStatementList)
CtCaseImpl#insertAfter(spoon.reflect.visitor.Filter,spoon.reflect.code.CtStatement)
CtCaseImpl#insertAfter(spoon.reflect.visitor.Filter,spoon.reflect.code.CtStatementList)
CtCaseImpl#getStatement(int)
CtCaseImpl#getLastStatement()
CtCaseImpl#removeStatement(spoon.reflect.code.CtStatement)
CtCaseImpl#iterator()
CtCaseImpl#clone()
CtCatchImpl#accept(spoon.reflect.visitor.CtVisitor)
CtCatchImpl#getBody()
CtCatchImpl#getParameter()
CtCatchImpl#setBody(spoon.reflect.code.CtStatement)
CtCatchImpl#setParameter(spoon.reflect.code.CtCatchVariable)
CtCatchImpl#clone()
CtCatchVariableImpl#accept(spoon.reflect.visitor.CtVisitor)
CtCatchVariableImpl#getDefaultExpression()
CtCatchVariableImpl#getReference()
CtCatchVariableImpl#getSimpleName()
CtCatchVariableImpl#getType()
CtCatchVariableImpl#setDefaultExpression(spoon.reflect.code.CtExpression)
CtCatchVariableImpl#setSimpleName(java.lang.String)
CtCatchVariableImpl#setType(spoon.reflect.reference.CtTypeReference)
CtCatchVariableImpl#addMultiType(spoon.reflect.reference.CtTypeReference)
CtCatchVariableImpl#removeMultiType(spoon.reflect.reference.CtTypeReference)
CtCatchVariableImpl#getMultiTypes()
CtCatchVariableImpl#setMultiTypes(java.util.List)
CtCatchVariableImpl#getModifiers()
CtCatchVariableImpl#hasModifier(spoon.reflect.declaration.ModifierKind)
CtCatchVariableImpl#setModifiers(java.util.Set)
CtCatchVariableImpl#addModifier(spoon.reflect.declaration.ModifierKind)
CtCatchVariableImpl#removeModifier(spoon.reflect.declaration.ModifierKind)
CtCatchVariableImpl#setVisibility(spoon.reflect.declaration.ModifierKind)
CtCatchVariableImpl#getVisibility()
CtCatchVariableImpl#getExtendedModifiers()
CtCatchVariableImpl#setExtendedModifiers(java.util.Set)
CtCatchVariableImpl#clone()
CtCatchVariableImpl#isPublic()
CtCatchVariableImpl#isPrivate()
CtCatchVariableImpl#isProtected()
CtCatchVariableImpl#isFinal()
CtCatchVariableImpl#isStatic()
CtCatchVariableImpl#isAbstract()
CtCodeElementImpl#partiallyEvaluate()
CtCodeElementImpl#clone()
CtCodeSnippetExpressionImpl#accept(spoon.reflect.visitor.CtVisitor)
CtCodeSnippetExpressionImpl#getValue()
CtCodeSnippetExpressionImpl#setValue(java.lang.String)
CtCodeSnippetExpressionImpl#compile()
CtCodeSnippetExpressionImpl#clone()
CtCodeSnippetStatementImpl#accept(spoon.reflect.visitor.CtVisitor)
CtCodeSnippetStatementImpl#getValue()
CtCodeSnippetStatementImpl#setValue(java.lang.String)
CtCodeSnippetStatementImpl#compile()
CtCodeSnippetStatementImpl#clone()
CtCommentImpl#getContent()
CtCommentImpl#setContent(java.lang.String)
CtCommentImpl#getCommentType()
CtCommentImpl#setCommentType(spoon.reflect.code.CtComment$CommentType)
CtCommentImpl#accept(spoon.reflect.visitor.CtVisitor)
CtCommentImpl#equals(java.lang.Object)
CtCommentImpl#hashCode()
CtCommentImpl#clone()
CtCommentImpl#asJavaDoc()
CtConditionalImpl#accept(spoon.reflect.visitor.CtVisitor)
CtConditionalImpl#getElseExpression()
CtConditionalImpl#getCondition()
CtConditionalImpl#getThenExpression()
CtConditionalImpl#setElseExpression(spoon.reflect.code.CtExpression)
CtConditionalImpl#setCondition(spoon.reflect.code.CtExpression)
CtConditionalImpl#setThenExpression(spoon.reflect.code.CtExpression)
CtConditionalImpl#clone()
CtConstructorCallImpl#accept(spoon.reflect.visitor.CtVisitor)
CtConstructorCallImpl#getArguments()
CtConstructorCallImpl#getExecutable()
CtConstructorCallImpl#getLabel()
CtConstructorCallImpl#insertAfter(spoon.reflect.code.CtStatement)
CtConstructorCallImpl#insertBefore(spoon.reflect.code.CtStatement)
CtConstructorCallImpl#insertAfter(spoon.reflect.code.CtStatementList)
CtConstructorCallImpl#insertBefore(spoon.reflect.code.CtStatementList)
CtConstructorCallImpl#setArguments(java.util.List)
CtConstructorCallImpl#addArgument(spoon.reflect.code.CtExpression)
CtConstructorCallImpl#removeArgument(spoon.reflect.code.CtExpression)
CtConstructorCallImpl#setExecutable(spoon.reflect.reference.CtExecutableReference)
CtConstructorCallImpl#setLabel(java.lang.String)
CtConstructorCallImpl#getActualTypeArguments()
CtConstructorCallImpl#setActualTypeArguments(java.util.List)
CtConstructorCallImpl#addActualTypeArgument(spoon.reflect.reference.CtTypeReference)
CtConstructorCallImpl#removeActualTypeArgument(spoon.reflect.reference.CtTypeReference)
CtConstructorCallImpl#getType()
CtConstructorCallImpl#setType(spoon.reflect.reference.CtTypeReference)
CtConstructorCallImpl#clone()
CtContinueImpl#accept(spoon.reflect.visitor.CtVisitor)
CtContinueImpl#getTargetLabel()
CtContinueImpl#setTargetLabel(java.lang.String)
CtContinueImpl#getLabelledStatement()
CtContinueImpl#clone()
CtDoImpl#accept(spoon.reflect.visitor.CtVisitor)
CtDoImpl#getLoopingExpression()
CtDoImpl#setLoopingExpression(spoon.reflect.code.CtExpression)
CtDoImpl#clone()
CtExecutableReferenceExpressionImpl#accept(spoon.reflect.visitor.CtVisitor)
CtExecutableReferenceExpressionImpl#getExecutable()
CtExecutableReferenceExpressionImpl#setExecutable(spoon.reflect.reference.CtExecutableReference)
CtExecutableReferenceExpressionImpl#clone()
CtExpressionImpl#getType()
CtExpressionImpl#getTypeCasts()
CtExpressionImpl#setType(spoon.reflect.reference.CtTypeReference)
CtExpressionImpl#setTypeCasts(java.util.List)
CtExpressionImpl#addTypeCast(spoon.reflect.reference.CtTypeReference)
CtExpressionImpl#S()
CtExpressionImpl#clone()
CtFieldAccessImpl#getTarget()
CtFieldAccessImpl#setTarget(spoon.reflect.code.CtExpression)
CtFieldAccessImpl#getVariable()
CtFieldAccessImpl#clone()
CtFieldReadImpl#accept(spoon.reflect.visitor.CtVisitor)
CtFieldReadImpl#clone()
CtFieldWriteImpl#accept(spoon.reflect.visitor.CtVisitor)
CtFieldWriteImpl#clone()
CtForEachImpl#accept(spoon.reflect.visitor.CtVisitor)
CtForEachImpl#getExpression()
CtForEachImpl#getVariable()
CtForEachImpl#setExpression(spoon.reflect.code.CtExpression)
CtForEachImpl#setVariable(spoon.reflect.code.CtLocalVariable)
CtForEachImpl#clone()
CtForImpl#accept(spoon.reflect.visitor.CtVisitor)
CtForImpl#getExpression()
CtForImpl#setExpression(spoon.reflect.code.CtExpression)
CtForImpl#getForInit()
CtForImpl#addForInit(spoon.reflect.code.CtStatement)
CtForImpl#setForInit(java.util.List)
CtForImpl#removeForInit(spoon.reflect.code.CtStatement)
CtForImpl#getForUpdate()
CtForImpl#addForUpdate(spoon.reflect.code.CtStatement)
CtForImpl#setForUpdate(java.util.List)
CtForImpl#removeForUpdate(spoon.reflect.code.CtStatement)
CtForImpl#clone()
CtIfImpl#accept(spoon.reflect.visitor.CtVisitor)
CtIfImpl#getCondition()
CtIfImpl#getElseStatement()
CtIfImpl#getThenStatement()
CtIfImpl#setCondition(spoon.reflect.code.CtExpression)
CtIfImpl#setElseStatement(spoon.reflect.code.CtStatement)
CtIfImpl#setThenStatement(spoon.reflect.code.CtStatement)
CtIfImpl#clone()
CtIfImpl#S()
CtIfImpl#getSubstitution(spoon.reflect.declaration.CtType)
CtInvocationImpl#accept(spoon.reflect.visitor.CtVisitor)
CtInvocationImpl#getArguments()
CtInvocationImpl#addArgument(spoon.reflect.code.CtExpression)
CtInvocationImpl#removeArgument(spoon.reflect.code.CtExpression)
CtInvocationImpl#getExecutable()
CtInvocationImpl#insertAfter(spoon.reflect.code.CtStatement)
CtInvocationImpl#insertBefore(spoon.reflect.code.CtStatement)
CtInvocationImpl#insertAfter(spoon.reflect.code.CtStatementList)
CtInvocationImpl#insertBefore(spoon.reflect.code.CtStatementList)
CtInvocationImpl#setArguments(java.util.List)
CtInvocationImpl#setExecutable(spoon.reflect.reference.CtExecutableReference)
CtInvocationImpl#getLabel()
CtInvocationImpl#setLabel(java.lang.String)
CtInvocationImpl#getType()
CtInvocationImpl#setType(spoon.reflect.reference.CtTypeReference)
CtInvocationImpl#getActualTypeArguments()
CtInvocationImpl#setActualTypeArguments(java.util.List)
CtInvocationImpl#addActualTypeArgument(spoon.reflect.reference.CtTypeReference)
CtInvocationImpl#removeActualTypeArgument(spoon.reflect.reference.CtTypeReference)
CtInvocationImpl#clone()
CtJavaDocImpl#getTags()
CtJavaDocImpl#setTags(java.util.List)
CtJavaDocImpl#addTag(spoon.reflect.code.CtJavaDocTag)
CtJavaDocImpl#addTag(int,spoon.reflect.code.CtJavaDocTag)
CtJavaDocImpl#removeTag(int)
CtJavaDocImpl#removeTag(spoon.reflect.code.CtJavaDocTag)
CtJavaDocImpl#getShortDescription()
CtJavaDocImpl#getLongDescription()
CtJavaDocImpl#accept(spoon.reflect.visitor.CtVisitor)
CtJavaDocImpl#clone()
CtJavaDocTagImpl#getType()
CtJavaDocTagImpl#setType(java.lang.String)
CtJavaDocTagImpl#setType(spoon.reflect.code.CtJavaDocTag$TagType)
CtJavaDocTagImpl#getContent()
CtJavaDocTagImpl#setContent(java.lang.String)
CtJavaDocTagImpl#getParam()
CtJavaDocTagImpl#setParam(java.lang.String)
CtJavaDocTagImpl#accept(spoon.reflect.visitor.CtVisitor)
CtJavaDocTagImpl#clone()
CtJavaDocTagImpl#toString()
CtLambdaImpl#accept(spoon.reflect.visitor.CtVisitor)
CtLambdaImpl#getSimpleName()
CtLambdaImpl#setSimpleName(java.lang.String)
CtLambdaImpl#getBody()
CtLambdaImpl#setBody(spoon.reflect.code.CtStatement)
CtLambdaImpl#getOverriddenMethod()
CtLambdaImpl#getParameters()
CtLambdaImpl#setParameters(java.util.List)
CtLambdaImpl#addParameter(spoon.reflect.declaration.CtParameter)
CtLambdaImpl#removeParameter(spoon.reflect.declaration.CtParameter)
CtLambdaImpl#getThrownTypes()
CtLambdaImpl#setThrownTypes(java.util.Set)
CtLambdaImpl#addThrownType(spoon.reflect.reference.CtTypeReference)
CtLambdaImpl#removeThrownType(spoon.reflect.reference.CtTypeReference)
CtLambdaImpl#getSignature()
CtLambdaImpl#getReference()
CtLambdaImpl#getExpression()
CtLambdaImpl#setExpression(spoon.reflect.code.CtExpression)
CtLambdaImpl#clone()
CtLiteralImpl#accept(spoon.reflect.visitor.CtVisitor)
CtLiteralImpl#getValue()
CtLiteralImpl#setValue(T)
CtLiteralImpl#clone()
CtLocalVariableImpl#accept(spoon.reflect.visitor.CtVisitor)
CtLocalVariableImpl#getDefaultExpression()
CtLocalVariableImpl#getReference()
CtLocalVariableImpl#getSimpleName()
CtLocalVariableImpl#getType()
CtLocalVariableImpl#setDefaultExpression(spoon.reflect.code.CtExpression)
CtLocalVariableImpl#setSimpleName(java.lang.String)
CtLocalVariableImpl#setType(spoon.reflect.reference.CtTypeReference)
CtLocalVariableImpl#getModifiers()
CtLocalVariableImpl#hasModifier(spoon.reflect.declaration.ModifierKind)
CtLocalVariableImpl#setModifiers(java.util.Set)
CtLocalVariableImpl#addModifier(spoon.reflect.declaration.ModifierKind)
CtLocalVariableImpl#removeModifier(spoon.reflect.declaration.ModifierKind)
CtLocalVariableImpl#setVisibility(spoon.reflect.declaration.ModifierKind)
CtLocalVariableImpl#getVisibility()
CtLocalVariableImpl#getExtendedModifiers()
CtLocalVariableImpl#setExtendedModifiers(java.util.Set)
CtLocalVariableImpl#getAssignment()
CtLocalVariableImpl#setAssignment(spoon.reflect.code.CtExpression)
CtLocalVariableImpl#clone()
CtLocalVariableImpl#isPublic()
CtLocalVariableImpl#isPrivate()
CtLocalVariableImpl#isProtected()
CtLocalVariableImpl#isFinal()
CtLocalVariableImpl#isStatic()
CtLocalVariableImpl#isAbstract()
CtLoopImpl#getBody()
CtLoopImpl#setBody(spoon.reflect.code.CtStatement)
CtLoopImpl#clone()
CtLoopImpl#S()
CtLoopImpl#getSubstitution(spoon.reflect.declaration.CtType)
CtNewArrayImpl#accept(spoon.reflect.visitor.CtVisitor)
CtNewArrayImpl#getDimensionExpressions()
CtNewArrayImpl#getElements()
CtNewArrayImpl#setDimensionExpressions(java.util.List)
CtNewArrayImpl#addDimensionExpression(spoon.reflect.code.CtExpression)
CtNewArrayImpl#removeDimensionExpression(spoon.reflect.code.CtExpression)
CtNewArrayImpl#setElements(java.util.List)
CtNewArrayImpl#addElement(spoon.reflect.code.CtExpression)
CtNewArrayImpl#removeElement(spoon.reflect.code.CtExpression)
CtNewArrayImpl#clone()
CtNewClassImpl#accept(spoon.reflect.visitor.CtVisitor)
CtNewClassImpl#getAnonymousClass()
CtNewClassImpl#setAnonymousClass(spoon.reflect.declaration.CtClass)
CtNewClassImpl#clone()
CtOperatorAssignmentImpl#accept(spoon.reflect.visitor.CtVisitor)
CtOperatorAssignmentImpl#getKind()
CtOperatorAssignmentImpl#setKind(spoon.reflect.code.BinaryOperatorKind)
CtOperatorAssignmentImpl#clone()
CtReturnImpl#accept(spoon.reflect.visitor.CtVisitor)
CtReturnImpl#getReturnedExpression()
CtReturnImpl#setReturnedExpression(spoon.reflect.code.CtExpression)
CtReturnImpl#clone()
CtReturnImpl#S()
CtReturnImpl#getSubstitution(spoon.reflect.declaration.CtType)
CtStatementImpl#insertAfter(spoon.reflect.code.CtStatement,spoon.reflect.code.CtStatement)
CtStatementImpl#insertAfter(spoon.reflect.code.CtStatement,spoon.reflect.code.CtStatementList)
CtStatementImpl#insertBefore(spoon.reflect.code.CtStatement,spoon.reflect.code.CtStatement)
CtStatementImpl#insertBefore(spoon.reflect.code.CtStatement,spoon.reflect.code.CtStatementList)
CtStatementImpl#insertBefore(spoon.reflect.code.CtStatement)
CtStatementImpl#insertBefore(spoon.reflect.code.CtStatementList)
CtStatementImpl#insertAfter(spoon.reflect.code.CtStatement)
CtStatementImpl#insertAfter(spoon.reflect.code.CtStatementList)
CtStatementImpl#getLabel()
CtStatementImpl#setLabel(java.lang.String)
CtStatementImpl#clone()
CtStatementListImpl#accept(spoon.reflect.visitor.CtVisitor)
CtStatementListImpl#getStatements()
CtStatementListImpl#setStatements(java.util.List)
CtStatementListImpl#addStatement(spoon.reflect.code.CtStatement)
CtStatementListImpl#addStatement(int,spoon.reflect.code.CtStatement)
CtStatementListImpl#insertBegin(spoon.reflect.code.CtStatementList)
CtStatementListImpl#insertBegin(spoon.reflect.code.CtStatement)
CtStatementListImpl#insertEnd(spoon.reflect.code.CtStatement)
CtStatementListImpl#insertEnd(spoon.reflect.code.CtStatementList)
CtStatementListImpl#insertAfter(spoon.reflect.visitor.Filter,spoon.reflect.code.CtStatement)
CtStatementListImpl#insertAfter(spoon.reflect.visitor.Filter,spoon.reflect.code.CtStatementList)
CtStatementListImpl#insertBefore(spoon.reflect.visitor.Filter,spoon.reflect.code.CtStatement)
CtStatementListImpl#insertBefore(spoon.reflect.visitor.Filter,spoon.reflect.code.CtStatementList)
CtStatementListImpl#getStatement(int)
CtStatementListImpl#getLastStatement()
CtStatementListImpl#removeStatement(spoon.reflect.code.CtStatement)
CtStatementListImpl#setPosition(spoon.reflect.cu.SourcePosition)
CtStatementListImpl#iterator()
CtStatementListImpl#clone()
CtStatementListImpl#getSubstitution(spoon.reflect.declaration.CtType)
CtSuperAccessImpl#accept(spoon.reflect.visitor.CtVisitor)
CtSuperAccessImpl#getTarget()
CtSuperAccessImpl#setTarget(spoon.reflect.code.CtExpression)
CtSuperAccessImpl#clone()
CtSwitchImpl#accept(spoon.reflect.visitor.CtVisitor)
CtSwitchImpl#getCases()
CtSwitchImpl#getSelector()
CtSwitchImpl#setCases(java.util.List)
CtSwitchImpl#setSelector(spoon.reflect.code.CtExpression)
CtSwitchImpl#addCase(spoon.reflect.code.CtCase)
CtSwitchImpl#removeCase(spoon.reflect.code.CtCase)
CtSwitchImpl#clone()
CtSynchronizedImpl#accept(spoon.reflect.visitor.CtVisitor)
CtSynchronizedImpl#getBlock()
CtSynchronizedImpl#getExpression()
CtSynchronizedImpl#setBlock(spoon.reflect.code.CtBlock)
CtSynchronizedImpl#setExpression(spoon.reflect.code.CtExpression)
CtSynchronizedImpl#clone()
CtTargetedExpressionImpl#getTarget()
CtTargetedExpressionImpl#setTarget(T extends spoon.reflect.code.CtExpression)
CtTargetedExpressionImpl#clone()
CtThisAccessImpl#accept(spoon.reflect.visitor.CtVisitor)
CtThisAccessImpl#clone()
CtThrowImpl#accept(spoon.reflect.visitor.CtVisitor)
CtThrowImpl#getThrownExpression()
CtThrowImpl#setThrownExpression(spoon.reflect.code.CtExpression)
CtThrowImpl#clone()
CtThrowImpl#S()
CtThrowImpl#getSubstitution(spoon.reflect.declaration.CtType)
CtTryImpl#accept(spoon.reflect.visitor.CtVisitor)
CtTryImpl#getCatchers()
CtTryImpl#setCatchers(java.util.List)
CtTryImpl#addCatcher(spoon.reflect.code.CtCatch)
CtTryImpl#removeCatcher(spoon.reflect.code.CtCatch)
CtTryImpl#getFinalizer()
CtTryImpl#setFinalizer(spoon.reflect.code.CtBlock)
CtTryImpl#getBody()
CtTryImpl#setBody(spoon.reflect.code.CtStatement)
CtTryImpl#clone()
CtTryImpl#S()
CtTryImpl#getSubstitution(spoon.reflect.declaration.CtType)
CtTryWithResourceImpl#accept(spoon.reflect.visitor.CtVisitor)
CtTryWithResourceImpl#getResources()
CtTryWithResourceImpl#setResources(java.util.List)
CtTryWithResourceImpl#addResource(spoon.reflect.code.CtLocalVariable)
CtTryWithResourceImpl#removeResource(spoon.reflect.code.CtLocalVariable)
CtTryWithResourceImpl#clone()
CtTypeAccessImpl#accept(spoon.reflect.visitor.CtVisitor)
CtTypeAccessImpl#getAccessedType()
CtTypeAccessImpl#setAccessedType(spoon.reflect.reference.CtTypeReference)
CtTypeAccessImpl#getType()
CtTypeAccessImpl#setType(spoon.reflect.reference.CtTypeReference)
CtTypeAccessImpl#clone()
CtUnaryOperatorImpl#accept(spoon.reflect.visitor.CtVisitor)
CtUnaryOperatorImpl#getOperand()
CtUnaryOperatorImpl#getKind()
CtUnaryOperatorImpl#getLabel()
CtUnaryOperatorImpl#insertAfter(spoon.reflect.code.CtStatement)
CtUnaryOperatorImpl#insertBefore(spoon.reflect.code.CtStatement)
CtUnaryOperatorImpl#insertAfter(spoon.reflect.code.CtStatementList)
CtUnaryOperatorImpl#insertBefore(spoon.reflect.code.CtStatementList)
CtUnaryOperatorImpl#setOperand(spoon.reflect.code.CtExpression)
CtUnaryOperatorImpl#setKind(spoon.reflect.code.UnaryOperatorKind)
CtUnaryOperatorImpl#setLabel(java.lang.String)
CtUnaryOperatorImpl#clone()
CtVariableAccessImpl#getVariable()
CtVariableAccessImpl#setVariable(spoon.reflect.reference.CtVariableReference)
CtVariableAccessImpl#getType()
CtVariableAccessImpl#setType(spoon.reflect.reference.CtTypeReference)
CtVariableAccessImpl#clone()
CtVariableReadImpl#accept(spoon.reflect.visitor.CtVisitor)
CtVariableReadImpl#clone()
CtVariableWriteImpl#accept(spoon.reflect.visitor.CtVisitor)
CtVariableWriteImpl#clone()
CtWhileImpl#accept(spoon.reflect.visitor.CtVisitor)
CtWhileImpl#getLoopingExpression()
CtWhileImpl#setLoopingExpression(spoon.reflect.code.CtExpression)
CtWhileImpl#clone()
BodyHolderSourcePositionImpl#getBodyStart()
BodyHolderSourcePositionImpl#getBodyEnd()
BodyHolderSourcePositionImpl#getSourceDetails()
DeclarationSourcePositionImpl#getSourceEnd()
DeclarationSourcePositionImpl#getSourceStart()
DeclarationSourcePositionImpl#getModifierSourceStart()
DeclarationSourcePositionImpl#getNameStart()
DeclarationSourcePositionImpl#getNameEnd()
DeclarationSourcePositionImpl#setModifierSourceEnd(int)
DeclarationSourcePositionImpl#getModifierSourceEnd()
DeclarationSourcePositionImpl#getEndLine()
DeclarationSourcePositionImpl#getSourceDetails()
PartialSourcePositionImpl#getFile()
PartialSourcePositionImpl#getCompilationUnit()
SourcePositionImpl#isValidPosition()
SourcePositionImpl#getColumn()
SourcePositionImpl#getEndColumn()
SourcePositionImpl#getFile()
SourcePositionImpl#getLine()
SourcePositionImpl#getEndLine()
SourcePositionImpl#getSourceEnd()
SourcePositionImpl#getSourceStart()
SourcePositionImpl#toString()
SourcePositionImpl#equals(java.lang.Object)
SourcePositionImpl#hashCode()
SourcePositionImpl#getCompilationUnit()
SourcePositionImpl#getSourceDetails()
CompilationUnitImpl#getUnitType()
CompilationUnitImpl#getFile()
CompilationUnitImpl#getMainType()
CompilationUnitImpl#getDeclaredTypes()
CompilationUnitImpl#setDeclaredTypes(java.util.List)
CompilationUnitImpl#addDeclaredType(spoon.reflect.declaration.CtType)
CompilationUnitImpl#getDeclaredModule()
CompilationUnitImpl#setDeclaredModule(spoon.reflect.declaration.CtModule)
CompilationUnitImpl#getDeclaredPackage()
CompilationUnitImpl#setDeclaredPackage(spoon.reflect.declaration.CtPackage)
CompilationUnitImpl#setFile(java.io.File)
CompilationUnitImpl#getBinaryFiles()
CompilationUnitImpl#getOriginalSourceCode()
CompilationUnitImpl#beginOfLineIndex(int)
CompilationUnitImpl#nextLineIndex(int)
CompilationUnitImpl#getTabCount(int)
CompilationUnitImpl#getImports()
CompilationUnitImpl#setImports(java.util.Collection)
CompilationUnitImpl#getFactory()
CompilationUnitImpl#setFactory(spoon.reflect.factory.Factory)
CompilationUnitImpl#isAutoImport()
CompilationUnitImpl#setAutoImport(boolean)
CompilationUnitImpl#getOrCreatePartialSourcePosition()
CtAnnotationImpl#accept(spoon.reflect.visitor.CtVisitor)
CtAnnotationImpl#addValue(java.lang.String,java.lang.Object)
CtAnnotationImpl#addValue(java.lang.String,spoon.reflect.code.CtLiteral)
CtAnnotationImpl#addValue(java.lang.String,spoon.reflect.code.CtNewArray)
CtAnnotationImpl#addValue(java.lang.String,spoon.reflect.code.CtFieldAccess)
CtAnnotationImpl#addValue(java.lang.String,spoon.reflect.declaration.CtAnnotation)
CtAnnotationImpl#getAnnotationType()
CtAnnotationImpl#getValue(java.lang.String)
CtAnnotationImpl#getValueAsInt(java.lang.String)
CtAnnotationImpl#getValueAsString(java.lang.String)
CtAnnotationImpl#getValueAsObject(java.lang.String)
CtAnnotationImpl#getWrappedValue(java.lang.String)
CtAnnotationImpl#getElementValues()
CtAnnotationImpl#getValues()
CtAnnotationImpl#getAllValues()
CtAnnotationImpl#setAnnotationType(spoon.reflect.reference.CtTypeReference)
CtAnnotationImpl#setElementValues(java.util.Map)
CtAnnotationImpl#setValues(java.util.Map)
CtAnnotationImpl#getAnnotatedElement()
CtAnnotationImpl#getAnnotatedElementType()
CtAnnotationImpl#getActualAnnotation()
CtAnnotationImpl#isShadow()
CtAnnotationImpl#setShadow(boolean)
CtAnnotationImpl#clone()
CtAnnotationImpl#getTypeCasts()
CtAnnotationImpl#setTypeCasts(java.util.List)
CtAnnotationMethodImpl#accept(spoon.reflect.visitor.CtVisitor)
CtAnnotationMethodImpl#getDefaultExpression()
CtAnnotationMethodImpl#setDefaultExpression(spoon.reflect.code.CtExpression)
CtAnnotationMethodImpl#getBody()
CtAnnotationMethodImpl#setBody(spoon.reflect.code.CtStatement)
CtAnnotationMethodImpl#getThrownTypes()
CtAnnotationMethodImpl#setThrownTypes(java.util.Set)
CtAnnotationMethodImpl#getFormalCtTypeParameters()
CtAnnotationMethodImpl#setFormalCtTypeParameters(java.util.List)
CtAnnotationMethodImpl#getParameters()
CtAnnotationMethodImpl#setParameters(java.util.List)
CtAnnotationMethodImpl#clone()
CtAnnotationTypeImpl#accept(spoon.reflect.visitor.CtVisitor)
CtAnnotationTypeImpl#isAnnotationType()
CtAnnotationTypeImpl#getSuperInterfaces()
CtAnnotationTypeImpl#getSuperclass()
CtAnnotationTypeImpl#setSuperclass(spoon.reflect.reference.CtTypeReference)
CtAnnotationTypeImpl#setSuperInterfaces(java.util.Set)
CtAnnotationTypeImpl#getFormalCtTypeParameters()
CtAnnotationTypeImpl#setFormalCtTypeParameters(java.util.List)
CtAnnotationTypeImpl#isSubtypeOf(spoon.reflect.reference.CtTypeReference)
CtAnnotationTypeImpl#clone()
CtAnnotationTypeImpl#getAnnotationMethods()
CtAnnotationTypeImpl#addMethod(spoon.reflect.declaration.CtMethod)
CtAnonymousExecutableImpl#accept(spoon.reflect.visitor.CtVisitor)
CtAnonymousExecutableImpl#addModifier(spoon.reflect.declaration.ModifierKind)
CtAnonymousExecutableImpl#removeModifier(spoon.reflect.declaration.ModifierKind)
CtAnonymousExecutableImpl#getModifiers()
CtAnonymousExecutableImpl#getVisibility()
CtAnonymousExecutableImpl#hasModifier(spoon.reflect.declaration.ModifierKind)
CtAnonymousExecutableImpl#setModifiers(java.util.Set)
CtAnonymousExecutableImpl#setVisibility(spoon.reflect.declaration.ModifierKind)
CtAnonymousExecutableImpl#getExtendedModifiers()
CtAnonymousExecutableImpl#setExtendedModifiers(java.util.Set)
CtAnonymousExecutableImpl#getParameters()
CtAnonymousExecutableImpl#setParameters(java.util.List)
CtAnonymousExecutableImpl#addParameter(spoon.reflect.declaration.CtParameter)
CtAnonymousExecutableImpl#removeParameter(spoon.reflect.declaration.CtParameter)
CtAnonymousExecutableImpl#getThrownTypes()
CtAnonymousExecutableImpl#setThrownTypes(java.util.Set)
CtAnonymousExecutableImpl#addThrownType(spoon.reflect.reference.CtTypeReference)
CtAnonymousExecutableImpl#removeThrownType(spoon.reflect.reference.CtTypeReference)
CtAnonymousExecutableImpl#getSimpleName()
CtAnonymousExecutableImpl#setSimpleName(java.lang.String)
CtAnonymousExecutableImpl#getType()
CtAnonymousExecutableImpl#setType(spoon.reflect.reference.CtTypeReference)
CtAnonymousExecutableImpl#clone()
CtAnonymousExecutableImpl#isPublic()
CtAnonymousExecutableImpl#isPrivate()
CtAnonymousExecutableImpl#isProtected()
CtAnonymousExecutableImpl#isFinal()
CtAnonymousExecutableImpl#isStatic()
CtAnonymousExecutableImpl#isAbstract()
CtClassImpl#accept(spoon.reflect.visitor.CtVisitor)
CtClassImpl#getAnonymousExecutables()
CtClassImpl#getConstructor(spoon.reflect.reference.CtTypeReference[])
CtClassImpl#getConstructors()
CtClassImpl#addAnonymousExecutable(spoon.reflect.declaration.CtAnonymousExecutable)
CtClassImpl#removeAnonymousExecutable(spoon.reflect.declaration.CtAnonymousExecutable)
CtClassImpl#getSuperclass()
CtClassImpl#setAnonymousExecutables(java.util.List)
CtClassImpl#setConstructors(java.util.Set)
CtClassImpl#addConstructor(spoon.reflect.declaration.CtConstructor)
CtClassImpl#removeConstructor(spoon.reflect.declaration.CtConstructor)
CtClassImpl#setSuperclass(spoon.reflect.reference.CtTypeReference)
CtClassImpl#isClass()
CtClassImpl#isAnonymous()
CtClassImpl#isSubtypeOf(spoon.reflect.reference.CtTypeReference)
CtClassImpl#insertAfter(spoon.reflect.code.CtStatement)
CtClassImpl#insertAfter(spoon.reflect.code.CtStatementList)
CtClassImpl#insertBefore(spoon.reflect.code.CtStatement)
CtClassImpl#insertBefore(spoon.reflect.code.CtStatementList)
CtClassImpl#getLabel()
CtClassImpl#setLabel(java.lang.String)
CtClassImpl#partiallyEvaluate()
CtClassImpl#getDeclaredExecutables()
CtClassImpl#clone()
CtClassImpl#newInstance()
CtClassImpl#getAllExecutables()
CtConstructorImpl#accept(spoon.reflect.visitor.CtVisitor)
CtConstructorImpl#setSimpleName(java.lang.String)
CtConstructorImpl#getSimpleName()
CtConstructorImpl#getDeclaringType()
CtConstructorImpl#getType()
CtConstructorImpl#setType(spoon.reflect.reference.CtTypeReference)
CtConstructorImpl#getFormalCtTypeParameters()
CtConstructorImpl#setFormalCtTypeParameters(java.util.List)
CtConstructorImpl#addFormalCtTypeParameter(spoon.reflect.declaration.CtTypeParameter)
CtConstructorImpl#removeFormalCtTypeParameter(spoon.reflect.declaration.CtTypeParameter)
CtConstructorImpl#getModifiers()
CtConstructorImpl#hasModifier(spoon.reflect.declaration.ModifierKind)
CtConstructorImpl#setModifiers(java.util.Set)
CtConstructorImpl#addModifier(spoon.reflect.declaration.ModifierKind)
CtConstructorImpl#removeModifier(spoon.reflect.declaration.ModifierKind)
CtConstructorImpl#setVisibility(spoon.reflect.declaration.ModifierKind)
CtConstructorImpl#getVisibility()
CtConstructorImpl#getExtendedModifiers()
CtConstructorImpl#setExtendedModifiers(java.util.Set)
CtConstructorImpl#isShadow()
CtConstructorImpl#setShadow(boolean)
CtConstructorImpl#clone()
CtConstructorImpl#isPublic()
CtConstructorImpl#isPrivate()
CtConstructorImpl#isProtected()
CtConstructorImpl#isFinal()
CtConstructorImpl#isStatic()
CtConstructorImpl#isAbstract()
CtElementImpl#emptyList()
CtElementImpl#emptySet()
CtElementImpl#unmodifiableList(java.util.List)
CtElementImpl#getShortRepresentation()
CtElementImpl#equals(java.lang.Object)
CtElementImpl#getAnnotation(java.lang.Class)
CtElementImpl#hasAnnotation(java.lang.Class)
CtElementImpl#getAnnotation(spoon.reflect.reference.CtTypeReference)
CtElementImpl#getAnnotations()
CtElementImpl#getDocComment()
CtElementImpl#getPosition()
CtElementImpl#hashCode()
CtElementImpl#setAnnotations(java.util.List)
CtElementImpl#delete()
CtElementImpl#addAnnotation(spoon.reflect.declaration.CtAnnotation)
CtElementImpl#removeAnnotation(spoon.reflect.declaration.CtAnnotation)
CtElementImpl#setDocComment(java.lang.String)
CtElementImpl#setPosition(spoon.reflect.cu.SourcePosition)
CtElementImpl#setPositions(spoon.reflect.cu.SourcePosition)
CtElementImpl#toString()
CtElementImpl#getAnnotatedChildren(java.lang.Class)
CtElementImpl#isImplicit()
CtElementImpl#setImplicit(boolean)
CtElementImpl#getReferencedTypes()
CtElementImpl#getElements(spoon.reflect.visitor.Filter)
CtElementImpl#map(spoon.reflect.visitor.chain.CtConsumableFunction)
CtElementImpl#map(spoon.reflect.visitor.chain.CtFunction)
CtElementImpl#filterChildren(spoon.reflect.visitor.Filter)
CtElementImpl#getParent()
CtElementImpl#setParent(E extends spoon.reflect.declaration.CtElement)
CtElementImpl#isParentInitialized()
CtElementImpl#getParent(java.lang.Class)
CtElementImpl#getParent(spoon.reflect.visitor.Filter)
CtElementImpl#hasParent(spoon.reflect.declaration.CtElement)
CtElementImpl#getRoleInParent()
CtElementImpl#updateAllParentsBelow()
CtElementImpl#getFactory()
CtElementImpl#setFactory(spoon.reflect.factory.Factory)
CtElementImpl#replace(spoon.reflect.declaration.CtElement)
CtElementImpl#replace(java.util.Collection)
CtElementImpl#putMetadata(java.lang.String,java.lang.Object)
CtElementImpl#getMetadata(java.lang.String)
CtElementImpl#getMetadataKeys()
CtElementImpl#getComments()
CtElementImpl#addComment(spoon.reflect.code.CtComment)
CtElementImpl#removeComment(spoon.reflect.code.CtComment)
CtElementImpl#setComments(java.util.List)
CtElementImpl#clone()
CtElementImpl#getValueByRole(spoon.reflect.path.CtRole)
CtElementImpl#setValueByRole(spoon.reflect.path.CtRole,T)
CtElementImpl#getPath()
CtElementImpl#descendantIterator()
CtElementImpl#asIterable()
CtEnumImpl#accept(spoon.reflect.visitor.CtVisitor)
CtEnumImpl#getAllMethods()
CtEnumImpl#isSubtypeOf(spoon.reflect.reference.CtTypeReference)
CtEnumImpl#addEnumValue(spoon.reflect.declaration.CtEnumValue)
CtEnumImpl#removeEnumValue(spoon.reflect.declaration.CtEnumValue)
CtEnumImpl#getEnumValue(java.lang.String)
CtEnumImpl#getEnumValues()
CtEnumImpl#setEnumValues(java.util.List)
CtEnumImpl#getFields()
CtEnumImpl#getField(java.lang.String)
CtEnumImpl#clone()
CtEnumImpl#getSuperclass()
CtEnumImpl#setSuperclass(spoon.reflect.reference.CtTypeReference)
CtEnumImpl#getMethod(java.lang.String,spoon.reflect.reference.CtTypeReference[])
CtEnumImpl#getMethod(spoon.reflect.reference.CtTypeReference,java.lang.String,spoon.reflect.reference.CtTypeReference[])
CtEnumImpl#isClass()
CtEnumImpl#isEnum()
CtEnumImpl#getFormalCtTypeParameters()
CtEnumImpl#setFormalCtTypeParameters(java.util.List)
CtEnumValueImpl#accept(spoon.reflect.visitor.CtVisitor)
CtEnumValueImpl#clone()
CtEnumValueImpl#getAssignment()
CtExecutableImpl#getDeclaringType()
CtExecutableImpl#getTopLevelType()
CtExecutableImpl#getBody()
CtExecutableImpl#setBody(spoon.reflect.code.CtStatement)
CtExecutableImpl#getParameters()
CtExecutableImpl#setParameters(java.util.List)
CtExecutableImpl#addParameter(spoon.reflect.declaration.CtParameter)
CtExecutableImpl#removeParameter(spoon.reflect.declaration.CtParameter)
CtExecutableImpl#getThrownTypes()
CtExecutableImpl#setThrownTypes(java.util.Set)
CtExecutableImpl#addThrownType(spoon.reflect.reference.CtTypeReference)
CtExecutableImpl#removeThrownType(spoon.reflect.reference.CtTypeReference)
CtExecutableImpl#getSignature()
CtExecutableImpl#getReference()
CtExecutableImpl#clone()
CtFieldImpl#accept(spoon.reflect.visitor.CtVisitor)
CtFieldImpl#getDeclaringType()
CtFieldImpl#getTopLevelType()
CtFieldImpl#getDefaultExpression()
CtFieldImpl#getReference()
CtFieldImpl#getType()
CtFieldImpl#setDefaultExpression(spoon.reflect.code.CtExpression)
CtFieldImpl#setType(spoon.reflect.reference.CtTypeReference)
CtFieldImpl#getModifiers()
CtFieldImpl#hasModifier(spoon.reflect.declaration.ModifierKind)
CtFieldImpl#setModifiers(java.util.Set)
CtFieldImpl#addModifier(spoon.reflect.declaration.ModifierKind)
CtFieldImpl#removeModifier(spoon.reflect.declaration.ModifierKind)
CtFieldImpl#getExtendedModifiers()
CtFieldImpl#setExtendedModifiers(java.util.Set)
CtFieldImpl#setVisibility(spoon.reflect.declaration.ModifierKind)
CtFieldImpl#getVisibility()
CtFieldImpl#getAssignment()
CtFieldImpl#setAssignment(spoon.reflect.code.CtExpression)
CtFieldImpl#isShadow()
CtFieldImpl#setShadow(boolean)
CtFieldImpl#clone()
CtFieldImpl#isPublic()
CtFieldImpl#isPrivate()
CtFieldImpl#isProtected()
CtFieldImpl#isFinal()
CtFieldImpl#isStatic()
CtFieldImpl#isAbstract()
CtImportImpl#getImportKind()
CtImportImpl#setReference(spoon.reflect.reference.CtReference)
CtImportImpl#getReference()
CtImportImpl#accept(spoon.reflect.visitor.CtVisitor)
CtImportImpl#clone()
CtInterfaceImpl#accept(spoon.reflect.visitor.CtVisitor)
CtInterfaceImpl#isSubtypeOf(spoon.reflect.reference.CtTypeReference)
CtInterfaceImpl#isInterface()
CtInterfaceImpl#getDeclaredExecutables()
CtInterfaceImpl#clone()
CtInterfaceImpl#setSuperclass(spoon.reflect.reference.CtTypeReference)
CtMethodImpl#accept(spoon.reflect.visitor.CtVisitor)
CtMethodImpl#getType()
CtMethodImpl#setType(spoon.reflect.reference.CtTypeReference)
CtMethodImpl#isDefaultMethod()
CtMethodImpl#setDefaultMethod(boolean)
CtMethodImpl#getFormalCtTypeParameters()
CtMethodImpl#setFormalCtTypeParameters(java.util.List)
CtMethodImpl#addFormalCtTypeParameter(spoon.reflect.declaration.CtTypeParameter)
CtMethodImpl#removeFormalCtTypeParameter(spoon.reflect.declaration.CtTypeParameter)
CtMethodImpl#getModifiers()
CtMethodImpl#hasModifier(spoon.reflect.declaration.ModifierKind)
CtMethodImpl#setModifiers(java.util.Set)
CtMethodImpl#addModifier(spoon.reflect.declaration.ModifierKind)
CtMethodImpl#removeModifier(spoon.reflect.declaration.ModifierKind)
CtMethodImpl#setVisibility(spoon.reflect.declaration.ModifierKind)
CtMethodImpl#getVisibility()
CtMethodImpl#getExtendedModifiers()
CtMethodImpl#setExtendedModifiers(java.util.Set)
CtMethodImpl#isOverriding(spoon.reflect.declaration.CtMethod)
CtMethodImpl#isShadow()
CtMethodImpl#setShadow(boolean)
CtMethodImpl#clone()
CtMethodImpl#getTopDefinitions()
CtMethodImpl#isPublic()
CtMethodImpl#isPrivate()
CtMethodImpl#isProtected()
CtMethodImpl#isFinal()
CtMethodImpl#isStatic()
CtMethodImpl#isAbstract()
CtMethodImpl#copyMethod()
CtModuleImpl#isUnnamedModule()
CtModuleImpl#isOpenModule()
CtModuleImpl#setModuleDirectives(java.util.List)
CtModuleImpl#addModuleDirective(spoon.reflect.declaration.CtModuleDirective)
CtModuleImpl#addModuleDirectiveAt(int,spoon.reflect.declaration.CtModuleDirective)
CtModuleImpl#getModuleDirectives()
CtModuleImpl#removeModuleDirective(spoon.reflect.declaration.CtModuleDirective)
CtModuleImpl#setIsOpenModule(boolean)
CtModuleImpl#getUsedServices()
CtModuleImpl#setUsedServices(java.util.List)
CtModuleImpl#addUsedService(spoon.reflect.declaration.CtUsedService)
CtModuleImpl#removeUsedService(spoon.reflect.declaration.CtUsedService)
CtModuleImpl#getExportedPackages()
CtModuleImpl#setExportedPackages(java.util.List)
CtModuleImpl#addExportedPackage(spoon.reflect.declaration.CtPackageExport)
CtModuleImpl#removeExportedPackage(spoon.reflect.declaration.CtPackageExport)
CtModuleImpl#getOpenedPackages()
CtModuleImpl#setOpenedPackages(java.util.List)
CtModuleImpl#addOpenedPackage(spoon.reflect.declaration.CtPackageExport)
CtModuleImpl#removeOpenedPackage(spoon.reflect.declaration.CtPackageExport)
CtModuleImpl#getRequiredModules()
CtModuleImpl#setRequiredModules(java.util.List)
CtModuleImpl#addRequiredModule(spoon.reflect.declaration.CtModuleRequirement)
CtModuleImpl#removeRequiredModule(spoon.reflect.declaration.CtModuleRequirement)
CtModuleImpl#getProvidedServices()
CtModuleImpl#setProvidedServices(java.util.List)
CtModuleImpl#addProvidedService(spoon.reflect.declaration.CtProvidedService)
CtModuleImpl#removeProvidedService(spoon.reflect.declaration.CtProvidedService)
CtModuleImpl#getRootPackage()
CtModuleImpl#setRootPackage(spoon.reflect.declaration.CtPackage)
CtModuleImpl#accept(spoon.reflect.visitor.CtVisitor)
CtModuleImpl#getReference()
CtModuleImpl#clone()
CtModuleImpl#setParent(T extends spoon.reflect.declaration.CtElement)
CtModuleImpl#getParent()
CtModuleRequirementImpl#getRequiresModifiers()
CtModuleRequirementImpl#setRequiresModifiers(java.util.Set)
CtModuleRequirementImpl#getModuleReference()
CtModuleRequirementImpl#setModuleReference(spoon.reflect.reference.CtModuleReference)
CtModuleRequirementImpl#accept(spoon.reflect.visitor.CtVisitor)
CtModuleRequirementImpl#clone()
CtNamedElementImpl#getReference()
CtNamedElementImpl#getSimpleName()
CtNamedElementImpl#setSimpleName(java.lang.String)
CtNamedElementImpl#clone()
CtPackageExportImpl#setOpenedPackage(boolean)
CtPackageExportImpl#isOpenedPackage()
CtPackageExportImpl#getPackageReference()
CtPackageExportImpl#setPackageReference(spoon.reflect.reference.CtPackageReference)
CtPackageExportImpl#getTargetExport()
CtPackageExportImpl#setTargetExport(java.util.List)
CtPackageExportImpl#addTargetExport(spoon.reflect.reference.CtModuleReference)
CtPackageExportImpl#accept(spoon.reflect.visitor.CtVisitor)
CtPackageExportImpl#clone()
CtPackageImpl#accept(spoon.reflect.visitor.CtVisitor)
CtPackageImpl#addPackage(spoon.reflect.declaration.CtPackage)
CtPackageImpl#removePackage(spoon.reflect.declaration.CtPackage)
CtPackageImpl#getDeclaringModule()
CtPackageImpl#getDeclaringPackage()
CtPackageImpl#getPackage(java.lang.String)
CtPackageImpl#getPackages()
CtPackageImpl#getQualifiedName()
CtPackageImpl#getType(java.lang.String)
CtPackageImpl#getTypes()
CtPackageImpl#setPackages(java.util.Set)
CtPackageImpl#setTypes(java.util.Set)
CtPackageImpl#getReference()
CtPackageImpl#addType(spoon.reflect.declaration.CtType)
CtPackageImpl#removeType(spoon.reflect.declaration.CtType)
CtPackageImpl#toString()
CtPackageImpl#isShadow()
CtPackageImpl#setShadow(boolean)
CtPackageImpl#clone()
CtPackageImpl#isUnnamedPackage()
CtParameterImpl#accept(spoon.reflect.visitor.CtVisitor)
CtParameterImpl#getDefaultExpression()
CtParameterImpl#getReference()
CtParameterImpl#getType()
CtParameterImpl#setDefaultExpression(spoon.reflect.code.CtExpression)
CtParameterImpl#setType(spoon.reflect.reference.CtTypeReference)
CtParameterImpl#isVarArgs()
CtParameterImpl#setVarArgs(boolean)
CtParameterImpl#getModifiers()
CtParameterImpl#hasModifier(spoon.reflect.declaration.ModifierKind)
CtParameterImpl#setModifiers(java.util.Set)
CtParameterImpl#addModifier(spoon.reflect.declaration.ModifierKind)
CtParameterImpl#removeModifier(spoon.reflect.declaration.ModifierKind)
CtParameterImpl#setVisibility(spoon.reflect.declaration.ModifierKind)
CtParameterImpl#getVisibility()
CtParameterImpl#getParent()
CtParameterImpl#getExtendedModifiers()
CtParameterImpl#setExtendedModifiers(java.util.Set)
CtParameterImpl#isShadow()
CtParameterImpl#setShadow(boolean)
CtParameterImpl#clone()
CtParameterImpl#isPublic()
CtParameterImpl#isPrivate()
CtParameterImpl#isProtected()
CtParameterImpl#isFinal()
CtParameterImpl#isStatic()
CtParameterImpl#isAbstract()
CtProvidedServiceImpl#getServiceType()
CtProvidedServiceImpl#setServiceType(spoon.reflect.reference.CtTypeReference)
CtProvidedServiceImpl#getImplementationTypes()
CtProvidedServiceImpl#setImplementationTypes(java.util.List)
CtProvidedServiceImpl#addImplementationType(spoon.reflect.reference.CtTypeReference)
CtProvidedServiceImpl#accept(spoon.reflect.visitor.CtVisitor)
CtProvidedServiceImpl#clone()
CtTypeImpl#getTypeMembers()
CtTypeImpl#addTypeMember(spoon.reflect.declaration.CtTypeMember)
CtTypeImpl#addTypeMemberAt(int,spoon.reflect.declaration.CtTypeMember)
CtTypeImpl#removeTypeMember(spoon.reflect.declaration.CtTypeMember)
CtTypeImpl#setTypeMembers(java.util.List)
CtTypeImpl#addFieldAtTop(spoon.reflect.declaration.CtField)
CtTypeImpl#addField(spoon.reflect.declaration.CtField)
CtTypeImpl#addField(int,spoon.reflect.declaration.CtField)
CtTypeImpl#setFields(java.util.List)
CtTypeImpl#removeField(spoon.reflect.declaration.CtField)
CtTypeImpl#getField(java.lang.String)
CtTypeImpl#getDeclaredField(java.lang.String)
CtTypeImpl#getDeclaredOrInheritedField(java.lang.String)
CtTypeImpl#getFields()
CtTypeImpl#addNestedType(spoon.reflect.declaration.CtType)
CtTypeImpl#removeNestedType(spoon.reflect.declaration.CtType)
CtTypeImpl#setNestedTypes(java.util.Set)
CtTypeImpl#getUsedTypes(boolean)
CtTypeImpl#getActualClass()
CtTypeImpl#getDeclaringType()
CtTypeImpl#getTopLevelType()
CtTypeImpl#getNestedType(java.lang.String)
CtTypeImpl#getNestedTypes()
CtTypeImpl#getPackage()
CtTypeImpl#getReference()
CtTypeImpl#isTopLevel()
CtTypeImpl#compileAndReplaceSnippets()
CtTypeImpl#getModifiers()
CtTypeImpl#hasModifier(spoon.reflect.declaration.ModifierKind)
CtTypeImpl#setModifiers(java.util.Set)
CtTypeImpl#addModifier(spoon.reflect.declaration.ModifierKind)
CtTypeImpl#removeModifier(spoon.reflect.declaration.ModifierKind)
CtTypeImpl#setVisibility(spoon.reflect.declaration.ModifierKind)
CtTypeImpl#getVisibility()
CtTypeImpl#getExtendedModifiers()
CtTypeImpl#setExtendedModifiers(java.util.Set)
CtTypeImpl#isPrimitive()
CtTypeImpl#isAnonymous()
CtTypeImpl#isLocalType()
CtTypeImpl#getSuperclass()
CtTypeImpl#isClass()
CtTypeImpl#isInterface()
CtTypeImpl#isAnnotationType()
CtTypeImpl#isEnum()
CtTypeImpl#isGenerics()
CtTypeImpl#getAllFields()
CtTypeImpl#getDeclaredFields()
CtTypeImpl#addMethod(spoon.reflect.declaration.CtMethod)
CtTypeImpl#removeMethod(spoon.reflect.declaration.CtMethod)
CtTypeImpl#addSuperInterface(spoon.reflect.reference.CtTypeReference)
CtTypeImpl#removeSuperInterface(spoon.reflect.reference.CtTypeReference)
CtTypeImpl#getFormalCtTypeParameters()
CtTypeImpl#setFormalCtTypeParameters(java.util.List)
CtTypeImpl#addFormalCtTypeParameter(spoon.reflect.declaration.CtTypeParameter)
CtTypeImpl#removeFormalCtTypeParameter(spoon.reflect.declaration.CtTypeParameter)
CtTypeImpl#getMethod(spoon.reflect.reference.CtTypeReference,java.lang.String,spoon.reflect.reference.CtTypeReference[])
CtTypeImpl#getMethod(java.lang.String,spoon.reflect.reference.CtTypeReference[])
CtTypeImpl#getMethods()
CtTypeImpl#getMethodsAnnotatedWith(spoon.reflect.reference.CtTypeReference[])
CtTypeImpl#getMethodsByName(java.lang.String)
CtTypeImpl#hasMethod(spoon.reflect.declaration.CtMethod)
CtTypeImpl#getQualifiedName()
CtTypeImpl#getSuperInterfaces()
CtTypeImpl#setMethods(java.util.Set)
CtTypeImpl#setSuperclass(spoon.reflect.reference.CtTypeReference)
CtTypeImpl#setSuperInterfaces(java.util.Set)
CtTypeImpl#getDeclaredExecutables()
CtTypeImpl#getAllExecutables()
CtTypeImpl#getAllMethods()
CtTypeImpl#getTypeErasure()
CtTypeImpl#isShadow()
CtTypeImpl#setShadow(boolean)
CtTypeImpl#clone()
CtTypeImpl#isPublic()
CtTypeImpl#isPrivate()
CtTypeImpl#isProtected()
CtTypeImpl#isFinal()
CtTypeImpl#isStatic()
CtTypeImpl#isAbstract()
CtTypeImpl#copyType()
CtTypeParameterImpl#accept(spoon.reflect.visitor.CtVisitor)
CtTypeParameterImpl#getSuperclass()
CtTypeParameterImpl#setSuperclass(spoon.reflect.reference.CtTypeReference)
CtTypeParameterImpl#getQualifiedName()
CtTypeParameterImpl#getReference()
CtTypeParameterImpl#isGenerics()
CtTypeParameterImpl#clone()
CtTypeParameterImpl#getTypeParameterDeclarer()
CtTypeParameterImpl#addFieldAtTop(spoon.reflect.declaration.CtField)
CtTypeParameterImpl#addField(spoon.reflect.declaration.CtField)
CtTypeParameterImpl#addField(int,spoon.reflect.declaration.CtField)
CtTypeParameterImpl#setFields(java.util.List)
CtTypeParameterImpl#removeField(spoon.reflect.declaration.CtField)
CtTypeParameterImpl#getField(java.lang.String)
CtTypeParameterImpl#getFields()
CtTypeParameterImpl#addNestedType(spoon.reflect.declaration.CtType)
CtTypeParameterImpl#removeNestedType(spoon.reflect.declaration.CtType)
CtTypeParameterImpl#setNestedTypes(java.util.Set)
CtTypeParameterImpl#getNestedType(java.lang.String)
CtTypeParameterImpl#getNestedTypes()
CtTypeParameterImpl#getPackage()
CtTypeParameterImpl#isTopLevel()
CtTypeParameterImpl#getModifiers()
CtTypeParameterImpl#hasModifier(spoon.reflect.declaration.ModifierKind)
CtTypeParameterImpl#setModifiers(java.util.Set)
CtTypeParameterImpl#addModifier(spoon.reflect.declaration.ModifierKind)
CtTypeParameterImpl#removeModifier(spoon.reflect.declaration.ModifierKind)
CtTypeParameterImpl#setVisibility(spoon.reflect.declaration.ModifierKind)
CtTypeParameterImpl#getVisibility()
CtTypeParameterImpl#isPrimitive()
CtTypeParameterImpl#isAnonymous()
CtTypeParameterImpl#isLocalType()
CtTypeParameterImpl#getAllFields()
CtTypeParameterImpl#getDeclaredFields()
CtTypeParameterImpl#isSubtypeOf(spoon.reflect.reference.CtTypeReference)
CtTypeParameterImpl#getTypeErasure()
CtTypeParameterImpl#addMethod(spoon.reflect.declaration.CtMethod)
CtTypeParameterImpl#removeMethod(spoon.reflect.declaration.CtMethod)
CtTypeParameterImpl#addSuperInterface(spoon.reflect.reference.CtTypeReference)
CtTypeParameterImpl#removeSuperInterface(spoon.reflect.reference.CtTypeReference)
CtTypeParameterImpl#getMethod(spoon.reflect.reference.CtTypeReference,java.lang.String,spoon.reflect.reference.CtTypeReference[])
CtTypeParameterImpl#getMethod(java.lang.String,spoon.reflect.reference.CtTypeReference[])
CtTypeParameterImpl#getMethods()
CtTypeParameterImpl#getMethodsAnnotatedWith(spoon.reflect.reference.CtTypeReference[])
CtTypeParameterImpl#getMethodsByName(java.lang.String)
CtTypeParameterImpl#getSuperInterfaces()
CtTypeParameterImpl#setMethods(java.util.Set)
CtTypeParameterImpl#setSuperInterfaces(java.util.Set)
CtTypeParameterImpl#getDeclaredExecutables()
CtTypeParameterImpl#getAllExecutables()
CtTypeParameterImpl#getAllMethods()
CtTypeParameterImpl#getFormalCtTypeParameters()
CtTypeParameterImpl#setFormalCtTypeParameters(java.util.List)
CtTypeParameterImpl#getTypeMembers()
CtTypeParameterImpl#setTypeMembers(java.util.List)
CtUsedServiceImpl#getServiceType()
CtUsedServiceImpl#setServiceType(spoon.reflect.reference.CtTypeReference)
CtUsedServiceImpl#accept(spoon.reflect.visitor.CtVisitor)
CtUsedServiceImpl#clone()
InvisibleArrayConstructorImpl#getType()
InvisibleArrayConstructorImpl#setType(spoon.reflect.reference.CtTypeReference)
InvisibleArrayConstructorImpl#toString()
InvisibleArrayConstructorImpl#getDeclaringType()
VisitorPartialEvaluator#evaluate(R extends spoon.reflect.declaration.CtElement)
VisitorPartialEvaluator#visitCtBinaryOperator(spoon.reflect.code.CtBinaryOperator)
VisitorPartialEvaluator#visitCtBlock(spoon.reflect.code.CtBlock)
VisitorPartialEvaluator#visitCtDo(spoon.reflect.code.CtDo)
VisitorPartialEvaluator#visitCtFieldRead(spoon.reflect.code.CtFieldRead)
VisitorPartialEvaluator#visitCtFieldWrite(spoon.reflect.code.CtFieldWrite)
VisitorPartialEvaluator#visitCtAnnotationFieldAccess(spoon.reflect.code.CtAnnotationFieldAccess)
VisitorPartialEvaluator#visitCtFor(spoon.reflect.code.CtFor)
VisitorPartialEvaluator#visitCtIf(spoon.reflect.code.CtIf)
VisitorPartialEvaluator#visitCtInvocation(spoon.reflect.code.CtInvocation)
VisitorPartialEvaluator#visitCtField(spoon.reflect.declaration.CtField)
VisitorPartialEvaluator#visitCtLocalVariable(spoon.reflect.code.CtLocalVariable)
VisitorPartialEvaluator#visitCtCatchVariable(spoon.reflect.code.CtCatchVariable)
VisitorPartialEvaluator#visitCtReturn(spoon.reflect.code.CtReturn)
VisitorPartialEvaluator#visitCtSynchronized(spoon.reflect.code.CtSynchronized)
VisitorPartialEvaluator#visitCtThrow(spoon.reflect.code.CtThrow)
VisitorPartialEvaluator#visitCtCatch(spoon.reflect.code.CtCatch)
VisitorPartialEvaluator#visitCtUnaryOperator(spoon.reflect.code.CtUnaryOperator)
VisitorPartialEvaluator#visitCtVariableRead(spoon.reflect.code.CtVariableRead)
VisitorPartialEvaluator#visitCtVariableWrite(spoon.reflect.code.CtVariableWrite)
VisitorPartialEvaluator#visitCtAssignment(spoon.reflect.code.CtAssignment)
VisitorPartialEvaluator#visitCtWhile(spoon.reflect.code.CtWhile)
VisitorPartialEvaluator#visitCtConditional(spoon.reflect.code.CtConditional)
CtArrayTypeReferenceImpl#accept(spoon.reflect.visitor.CtVisitor)
CtArrayTypeReferenceImpl#getComponentType()
CtArrayTypeReferenceImpl#getArrayType()
CtArrayTypeReferenceImpl#setComponentType(spoon.reflect.reference.CtTypeReference)
CtArrayTypeReferenceImpl#getSimpleName()
CtArrayTypeReferenceImpl#getQualifiedName()
CtArrayTypeReferenceImpl#getActualClass()
CtArrayTypeReferenceImpl#getDimensionCount()
CtArrayTypeReferenceImpl#clone()
CtCatchVariableReferenceImpl#accept(spoon.reflect.visitor.CtVisitor)
CtCatchVariableReferenceImpl#getDeclaration()
CtCatchVariableReferenceImpl#clone()
CtExecutableReferenceImpl#accept(spoon.reflect.visitor.CtVisitor)
CtExecutableReferenceImpl#getActualTypeArguments()
CtExecutableReferenceImpl#isConstructor()
CtExecutableReferenceImpl#getDeclaration()
CtExecutableReferenceImpl#getExecutableDeclaration()
CtExecutableReferenceImpl#getDeclaringType()
CtExecutableReferenceImpl#getType()
CtExecutableReferenceImpl#getParameters()
CtExecutableReferenceImpl#setParameters(java.util.List)
CtExecutableReferenceImpl#getOverridingExecutable(spoon.reflect.reference.CtTypeReference)
CtExecutableReferenceImpl#isOverriding(spoon.reflect.reference.CtExecutableReference)
CtExecutableReferenceImpl#setActualTypeArguments(java.util.List)
CtExecutableReferenceImpl#setDeclaringType(spoon.reflect.reference.CtTypeReference)
CtExecutableReferenceImpl#setType(spoon.reflect.reference.CtTypeReference)
CtExecutableReferenceImpl#getActualMethod()
CtExecutableReferenceImpl#getActualConstructor()
CtExecutableReferenceImpl#isStatic()
CtExecutableReferenceImpl#setStatic(boolean)
CtExecutableReferenceImpl#isFinal()
CtExecutableReferenceImpl#getModifiers()
CtExecutableReferenceImpl#getOverridingExecutable()
CtExecutableReferenceImpl#addActualTypeArgument(spoon.reflect.reference.CtTypeReference)
CtExecutableReferenceImpl#removeActualTypeArgument(spoon.reflect.reference.CtTypeReference)
CtExecutableReferenceImpl#getSignature()
CtExecutableReferenceImpl#clone()
CtFieldReferenceImpl#accept(spoon.reflect.visitor.CtVisitor)
CtFieldReferenceImpl#getActualField()
CtFieldReferenceImpl#getDeclaration()
CtFieldReferenceImpl#getFieldDeclaration()
CtFieldReferenceImpl#getDeclaringType()
CtFieldReferenceImpl#getQualifiedName()
CtFieldReferenceImpl#isFinal()
CtFieldReferenceImpl#isStatic()
CtFieldReferenceImpl#setDeclaringType(spoon.reflect.reference.CtTypeReference)
CtFieldReferenceImpl#setFinal(boolean)
CtFieldReferenceImpl#setStatic(boolean)
CtFieldReferenceImpl#getModifiers()
CtFieldReferenceImpl#clone()
CtIntersectionTypeReferenceImpl#accept(spoon.reflect.visitor.CtVisitor)
CtIntersectionTypeReferenceImpl#getBounds()
CtIntersectionTypeReferenceImpl#setBounds(java.util.List)
CtIntersectionTypeReferenceImpl#addBound(spoon.reflect.reference.CtTypeReference)
CtIntersectionTypeReferenceImpl#removeBound(spoon.reflect.reference.CtTypeReference)
CtIntersectionTypeReferenceImpl#getTypeErasure()
CtIntersectionTypeReferenceImpl#clone()
CtLocalVariableReferenceImpl#accept(spoon.reflect.visitor.CtVisitor)
CtLocalVariableReferenceImpl#getDeclaration()
CtLocalVariableReferenceImpl#clone()
CtModuleReferenceImpl#getDeclaration()
CtModuleReferenceImpl#accept(spoon.reflect.visitor.CtVisitor)
CtModuleReferenceImpl#clone()
CtPackageReferenceImpl#getDeclaration()
CtPackageReferenceImpl#accept(spoon.reflect.visitor.CtVisitor)
CtPackageReferenceImpl#getActualPackage()
CtPackageReferenceImpl#clone()
CtPackageReferenceImpl#getQualifiedName()
CtPackageReferenceImpl#isUnnamedPackage()
CtParameterReferenceImpl#accept(spoon.reflect.visitor.CtVisitor)
CtParameterReferenceImpl#getDeclaringExecutable()
CtParameterReferenceImpl#getDeclaration()
CtParameterReferenceImpl#clone()
CtReferenceImpl#getSimpleName()
CtReferenceImpl#setSimpleName(java.lang.String)
CtReferenceImpl#setComments(java.util.List)
CtReferenceImpl#toString()
CtReferenceImpl#accept(spoon.reflect.visitor.CtVisitor)
CtReferenceImpl#clone()
CtTypeParameterReferenceImpl#isDefaultBoundingType()
CtTypeParameterReferenceImpl#accept(spoon.reflect.visitor.CtVisitor)
CtTypeParameterReferenceImpl#isUpper()
CtTypeParameterReferenceImpl#setBounds(java.util.List)
CtTypeParameterReferenceImpl#setUpper(boolean)
CtTypeParameterReferenceImpl#isPrimitive()
CtTypeParameterReferenceImpl#getActualClass()
CtTypeParameterReferenceImpl#getActualTypeArguments()
CtTypeParameterReferenceImpl#setActualTypeArguments(java.util.List)
CtTypeParameterReferenceImpl#addActualTypeArgument(spoon.reflect.reference.CtTypeReference)
CtTypeParameterReferenceImpl#removeActualTypeArgument(spoon.reflect.reference.CtTypeReference)
CtTypeParameterReferenceImpl#addBound(spoon.reflect.reference.CtTypeReference)
CtTypeParameterReferenceImpl#removeBound(spoon.reflect.reference.CtTypeReference)
CtTypeParameterReferenceImpl#getBoundingType()
CtTypeParameterReferenceImpl#setBoundingType(spoon.reflect.reference.CtTypeReference)
CtTypeParameterReferenceImpl#getDeclaration()
CtTypeParameterReferenceImpl#getTypeDeclaration()
CtTypeParameterReferenceImpl#getTypeErasure()
CtTypeParameterReferenceImpl#isSubtypeOf(spoon.reflect.reference.CtTypeReference)
CtTypeParameterReferenceImpl#clone()
CtTypeParameterReferenceImpl#isGenerics()
CtTypeReferenceImpl#accept(spoon.reflect.visitor.CtVisitor)
CtTypeReferenceImpl#box()
CtTypeReferenceImpl#getActualClass()
CtTypeReferenceImpl#getActualTypeArguments()
CtTypeReferenceImpl#getDeclaration()
CtTypeReferenceImpl#getTypeDeclaration()
CtTypeReferenceImpl#getDeclaringType()
CtTypeReferenceImpl#getPackage()
CtTypeReferenceImpl#getQualifiedName()
CtTypeReferenceImpl#isPrimitive()
CtTypeReferenceImpl#isSubtypeOf(spoon.reflect.reference.CtTypeReference)
CtTypeReferenceImpl#setActualTypeArguments(java.util.List)
CtTypeReferenceImpl#setDeclaringType(spoon.reflect.reference.CtTypeReference)
CtTypeReferenceImpl#setPackage(spoon.reflect.reference.CtPackageReference)
CtTypeReferenceImpl#asCtIntersectionTypeReference()
CtTypeReferenceImpl#unbox()
CtTypeReferenceImpl#getDeclaredFields()
CtTypeReferenceImpl#getDeclaredField(java.lang.String)
CtTypeReferenceImpl#getDeclaredOrInheritedField(java.lang.String)
CtTypeReferenceImpl#getDeclaredExecutables()
CtTypeReferenceImpl#getAllFields()
CtTypeReferenceImpl#getAllExecutables()
CtTypeReferenceImpl#getModifiers()
CtTypeReferenceImpl#getSuperclass()
CtTypeReferenceImpl#getSuperInterfaces()
CtTypeReferenceImpl#isAnonymous()
CtTypeReferenceImpl#isLocalType()
CtTypeReferenceImpl#addActualTypeArgument(spoon.reflect.reference.CtTypeReference)
CtTypeReferenceImpl#removeActualTypeArgument(spoon.reflect.reference.CtTypeReference)
CtTypeReferenceImpl#isClass()
CtTypeReferenceImpl#isInterface()
CtTypeReferenceImpl#isAnnotationType()
CtTypeReferenceImpl#isEnum()
CtTypeReferenceImpl#canAccess(spoon.reflect.reference.CtTypeReference)
CtTypeReferenceImpl#getTopLevelType()
CtTypeReferenceImpl#getAccessType()
CtTypeReferenceImpl#isShadow()
CtTypeReferenceImpl#setShadow(boolean)
CtTypeReferenceImpl#clone()
CtTypeReferenceImpl#getTypeParameterDeclaration()
CtTypeReferenceImpl#isGenerics()
CtTypeReferenceImpl#getTypeErasure()
CtUnboundVariableReferenceImpl#accept(spoon.reflect.visitor.CtVisitor)
CtUnboundVariableReferenceImpl#clone()
CtUnboundVariableReferenceImpl#getAnnotations()
CtUnboundVariableReferenceImpl#setAnnotations(java.util.List)
CtVariableReferenceImpl#accept(spoon.reflect.visitor.CtVisitor)
CtVariableReferenceImpl#getType()
CtVariableReferenceImpl#setType(spoon.reflect.reference.CtTypeReference)
CtVariableReferenceImpl#getDeclaration()
CtVariableReferenceImpl#getModifiers()
CtVariableReferenceImpl#clone()
CtWildcardReferenceImpl#accept(spoon.reflect.visitor.CtVisitor)
CtWildcardReferenceImpl#setSimpleName(java.lang.String)
CtWildcardReferenceImpl#clone()
CtWildcardReferenceImpl#getTypeDeclaration()
CtWildcardStaticTypeMemberReferenceImpl#setSimpleName(java.lang.String)
CtWildcardStaticTypeMemberReferenceImpl#clone()
CtExtendedModifier#isImplicit()
CtExtendedModifier#setImplicit(boolean)
CtExtendedModifier#getKind()
CtExtendedModifier#setKind(spoon.reflect.declaration.ModifierKind)
CtExtendedModifier#getPosition()
CtExtendedModifier#setPosition(spoon.reflect.cu.SourcePosition)
CtExtendedModifier#equals(java.lang.Object)
CtExtendedModifier#hashCode()
CtModifierHandler#getFactory()
CtModifierHandler#getExtendedModifiers()
CtModifierHandler#setExtendedModifiers(java.util.Set)
CtModifierHandler#getModifiers()
CtModifierHandler#hasModifier(spoon.reflect.declaration.ModifierKind)
CtModifierHandler#setModifiers(java.util.Set)
CtModifierHandler#addModifier(spoon.reflect.declaration.ModifierKind)
CtModifierHandler#removeModifier(spoon.reflect.declaration.ModifierKind)
CtModifierHandler#setVisibility(spoon.reflect.declaration.ModifierKind)
CtModifierHandler#getVisibility()
CtModifierHandler#isPublic()
CtModifierHandler#isProtected()
CtModifierHandler#isPrivate()
CtModifierHandler#isAbstract()
CtModifierHandler#isStatic()
CtModifierHandler#isFinal()
CtModifierHandler#hashCode()
CtModifierHandler#equals(java.lang.Object)
Parameters#getIndex(spoon.reflect.code.CtExpression)
Parameters#getValue(spoon.template.Template,java.lang.String,java.lang.Integer)
Parameters#getParameterField(spoon.reflect.declaration.CtClass,java.lang.String)
Parameters#setValue(spoon.template.Template,java.lang.String,java.lang.Integer,java.lang.Object)
Parameters#getNames(spoon.reflect.declaration.CtClass)
Parameters#getNamesToValues(spoon.template.Template,spoon.reflect.declaration.CtClass)
Parameters#getTemplateParametersAsMap(spoon.reflect.factory.Factory,spoon.reflect.declaration.CtType,spoon.template.Template)
Parameters#isParameterSource(spoon.reflect.reference.CtFieldReference)
Parameters#isParameterSource(java.lang.reflect.Field)
Parameters#NIL(java.lang.Class)
Parameters#getAllTemplateParameterFields(java.lang.Class)
Parameters#getAllTemplateParameterFields(java.lang.Class,spoon.reflect.factory.Factory)
ByteSerialization#serialize(java.lang.Object)
ByteSerialization#deserialize(byte[])
EmptyClearableList#instance()
EmptyClearableList#clear()
EmptyClearableList#iterator()
EmptyClearableList#listIterator()
EmptyClearableList#size()
EmptyClearableList#isEmpty()
EmptyClearableList#contains(java.lang.Object)
EmptyClearableList#containsAll(java.util.Collection)
EmptyClearableList#toArray()
EmptyClearableList#toArray(T[])
EmptyClearableList#get(int)
EmptyClearableList#equals(java.lang.Object)
EmptyClearableList#hashCode()
EmptyClearableSet#instance()
EmptyClearableSet#clear()
EmptyClearableSet#iterator()
EmptyClearableSet#size()
EmptyClearableSet#isEmpty()
EmptyClearableSet#contains(java.lang.Object)
EmptyClearableSet#containsAll(java.util.Collection)
EmptyClearableSet#toArray()
EmptyClearableSet#toArray(T[])
EmptyIterator#instance()
EmptyIterator#hasNext()
EmptyIterator#next()
EmptyIterator#remove()
ImmutableMap#hasValue(java.lang.String)
ImmutableMap#getValue(java.lang.String)
ImmutableMap#putValue(java.lang.String,java.lang.Object)
ImmutableMap#asMap()
ImmutableMap#checkpoint()
ImmutableMap#getModifiedValues()
ImmutableMapImpl#checkpoint()
ImmutableMapImpl#hasValue(java.lang.String)
ImmutableMapImpl#getValue(java.lang.String)
ImmutableMapImpl#putValue(java.lang.String,java.lang.Object)
ImmutableMapImpl#toString()
ImmutableMapImpl#asMap()
ImmutableMapImpl#getModifiedValues()
ImmutableMapImpl#equals(java.lang.Object)
ModelList#get(int)
ModelList#set(java.util.Collection)
ModelList#size()
ModelList#set(int,T extends spoon.reflect.declaration.CtElement)
ModelList#contains(java.lang.Object)
ModelList#isEmpty()
ModelList#toArray()
ModelList#toArray(T[])
ModelList#add(T extends spoon.reflect.declaration.CtElement)
ModelList#remove(java.lang.Object)
ModelList#containsAll(java.util.Collection)
ModelList#clear()
ModelList#equals(java.lang.Object)
ModelList#hashCode()
ModelList#add(int,T extends spoon.reflect.declaration.CtElement)
ModelList#remove(int)
ModelList#indexOf(java.lang.Object)
ModelList#lastIndexOf(java.lang.Object)
ModelSet#size()
ModelSet#isEmpty()
ModelSet#contains(java.lang.Object)
ModelSet#toArray()
ModelSet#toArray(T[])
ModelSet#add(T extends spoon.reflect.declaration.CtElement)
ModelSet#remove(java.lang.Object)
ModelSet#containsAll(java.util.Collection)
ModelSet#clear()
ModelSet#equals(java.lang.Object)
ModelSet#hashCode()
ModelSet#iterator()
ModelSet#set(java.util.Collection)
RtHelper#getAllFields(java.lang.Class)
RtHelper#getAllFields(java.lang.Class,spoon.reflect.factory.Factory)
RtHelper#getAllMethods(java.lang.Class)
RtHelper#invoke(spoon.reflect.code.CtInvocation)
RtHelper#getModifiers(int)
RtHelper#getAllExecutables(java.lang.Class,spoon.reflect.factory.Factory)
RtHelper#getMethod(java.lang.Class,java.lang.String,int)
SortedList#add(E)
SortedList#add(int,E)
SortedList#addAll(java.util.Collection)
SortedList#getComparator()
SortedList#setComparator(java.util.Comparator)
CloneBuilder#copy(spoon.reflect.declaration.CtElement,spoon.reflect.declaration.CtElement)
CloneBuilder#build(spoon.support.visitor.clone.CloneBuilder,spoon.reflect.declaration.CtElement,spoon.reflect.declaration.CtElement)
CloneBuilder#setOther(spoon.reflect.declaration.CtElement)
CloneBuilder#visitCtCodeSnippetExpression(spoon.reflect.code.CtCodeSnippetExpression)
CloneBuilder#visitCtCodeSnippetStatement(spoon.reflect.code.CtCodeSnippetStatement)
CloneBuilder#scanCtElement(spoon.reflect.declaration.CtElement)
CloneBuilder#scanCtNamedElement(spoon.reflect.declaration.CtNamedElement)
CloneBuilder#scanCtReference(spoon.reflect.reference.CtReference)
CloneBuilder#scanCtStatement(spoon.reflect.code.CtStatement)
CloneBuilder#scanCtType(spoon.reflect.declaration.CtType)
CloneBuilder#visitCtOperatorAssignment(spoon.reflect.code.CtOperatorAssignment)
CloneBuilder#visitCtAnnotation(spoon.reflect.declaration.CtAnnotation)
CloneBuilder#visitCtAnonymousExecutable(spoon.reflect.declaration.CtAnonymousExecutable)
CloneBuilder#visitCtBinaryOperator(spoon.reflect.code.CtBinaryOperator)
CloneBuilder#visitCtBreak(spoon.reflect.code.CtBreak)
CloneBuilder#visitCtConstructor(spoon.reflect.declaration.CtConstructor)
CloneBuilder#visitCtContinue(spoon.reflect.code.CtContinue)
CloneBuilder#visitCtExecutableReference(spoon.reflect.reference.CtExecutableReference)
CloneBuilder#visitCtField(spoon.reflect.declaration.CtField)
CloneBuilder#visitCtFieldReference(spoon.reflect.reference.CtFieldReference)
CloneBuilder#visitCtInvocation(spoon.reflect.code.CtInvocation)
CloneBuilder#visitCtLiteral(spoon.reflect.code.CtLiteral)
CloneBuilder#visitCtLocalVariable(spoon.reflect.code.CtLocalVariable)
CloneBuilder#visitCtCatchVariable(spoon.reflect.code.CtCatchVariable)
CloneBuilder#visitCtMethod(spoon.reflect.declaration.CtMethod)
CloneBuilder#visitCtConstructorCall(spoon.reflect.code.CtConstructorCall)
CloneBuilder#visitCtLambda(spoon.reflect.code.CtLambda)
CloneBuilder#visitCtOperatorAssignement(spoon.reflect.code.CtOperatorAssignment)
CloneBuilder#visitCtPackage(spoon.reflect.declaration.CtPackage)
CloneBuilder#visitCtParameter(spoon.reflect.declaration.CtParameter)
CloneBuilder#visitCtTypeParameterReference(spoon.reflect.reference.CtTypeParameterReference)
CloneBuilder#visitCtTypeReference(spoon.reflect.reference.CtTypeReference)
CloneBuilder#visitCtUnaryOperator(spoon.reflect.code.CtUnaryOperator)
CloneBuilder#visitCtComment(spoon.reflect.code.CtComment)
CloneBuilder#visitCtJavaDocTag(spoon.reflect.code.CtJavaDocTag)
CloneBuilder#visitCtModule(spoon.reflect.declaration.CtModule)
CloneBuilder#visitCtPackageExport(spoon.reflect.declaration.CtPackageExport)
CloneBuilder#visitCtModuleRequirement(spoon.reflect.declaration.CtModuleRequirement)
CloneVisitor#getClone()
CloneVisitor#visitCtAnnotation(spoon.reflect.declaration.CtAnnotation)
CloneVisitor#visitCtAnnotationType(spoon.reflect.declaration.CtAnnotationType)
CloneVisitor#visitCtAnonymousExecutable(spoon.reflect.declaration.CtAnonymousExecutable)
CloneVisitor#visitCtArrayRead(spoon.reflect.code.CtArrayRead)
CloneVisitor#visitCtArrayWrite(spoon.reflect.code.CtArrayWrite)
CloneVisitor#visitCtArrayTypeReference(spoon.reflect.reference.CtArrayTypeReference)
CloneVisitor#visitCtAssert(spoon.reflect.code.CtAssert)
CloneVisitor#visitCtAssignment(spoon.reflect.code.CtAssignment)
CloneVisitor#visitCtBinaryOperator(spoon.reflect.code.CtBinaryOperator)
CloneVisitor#visitCtBlock(spoon.reflect.code.CtBlock)
CloneVisitor#visitCtBreak(spoon.reflect.code.CtBreak)
CloneVisitor#visitCtCase(spoon.reflect.code.CtCase)
CloneVisitor#visitCtCatch(spoon.reflect.code.CtCatch)
CloneVisitor#visitCtClass(spoon.reflect.declaration.CtClass)
CloneVisitor#visitCtTypeParameter(spoon.reflect.declaration.CtTypeParameter)
CloneVisitor#visitCtConditional(spoon.reflect.code.CtConditional)
CloneVisitor#visitCtConstructor(spoon.reflect.declaration.CtConstructor)
CloneVisitor#visitCtContinue(spoon.reflect.code.CtContinue)
CloneVisitor#visitCtDo(spoon.reflect.code.CtDo)
CloneVisitor#visitCtEnum(spoon.reflect.declaration.CtEnum)
CloneVisitor#visitCtExecutableReference(spoon.reflect.reference.CtExecutableReference)
CloneVisitor#visitCtField(spoon.reflect.declaration.CtField)
CloneVisitor#visitCtEnumValue(spoon.reflect.declaration.CtEnumValue)
CloneVisitor#visitCtThisAccess(spoon.reflect.code.CtThisAccess)
CloneVisitor#visitCtAnnotationFieldAccess(spoon.reflect.code.CtAnnotationFieldAccess)
CloneVisitor#visitCtFieldReference(spoon.reflect.reference.CtFieldReference)
CloneVisitor#visitCtFor(spoon.reflect.code.CtFor)
CloneVisitor#visitCtForEach(spoon.reflect.code.CtForEach)
CloneVisitor#visitCtIf(spoon.reflect.code.CtIf)
CloneVisitor#visitCtInterface(spoon.reflect.declaration.CtInterface)
CloneVisitor#visitCtInvocation(spoon.reflect.code.CtInvocation)
CloneVisitor#visitCtLiteral(spoon.reflect.code.CtLiteral)
CloneVisitor#visitCtLocalVariable(spoon.reflect.code.CtLocalVariable)
CloneVisitor#visitCtLocalVariableReference(spoon.reflect.reference.CtLocalVariableReference)
CloneVisitor#visitCtCatchVariable(spoon.reflect.code.CtCatchVariable)
CloneVisitor#visitCtCatchVariableReference(spoon.reflect.reference.CtCatchVariableReference)
CloneVisitor#visitCtMethod(spoon.reflect.declaration.CtMethod)
CloneVisitor#visitCtAnnotationMethod(spoon.reflect.declaration.CtAnnotationMethod)
CloneVisitor#visitCtNewArray(spoon.reflect.code.CtNewArray)
CloneVisitor#visitCtConstructorCall(spoon.reflect.code.CtConstructorCall)
CloneVisitor#visitCtNewClass(spoon.reflect.code.CtNewClass)
CloneVisitor#visitCtLambda(spoon.reflect.code.CtLambda)
CloneVisitor#visitCtExecutableReferenceExpression(spoon.reflect.code.CtExecutableReferenceExpression)
CloneVisitor#visitCtOperatorAssignment(spoon.reflect.code.CtOperatorAssignment)
CloneVisitor#visitCtPackage(spoon.reflect.declaration.CtPackage)
CloneVisitor#visitCtPackageReference(spoon.reflect.reference.CtPackageReference)
CloneVisitor#visitCtParameter(spoon.reflect.declaration.CtParameter)
CloneVisitor#visitCtParameterReference(spoon.reflect.reference.CtParameterReference)
CloneVisitor#visitCtReturn(spoon.reflect.code.CtReturn)
CloneVisitor#visitCtStatementList(spoon.reflect.code.CtStatementList)
CloneVisitor#visitCtSwitch(spoon.reflect.code.CtSwitch)
CloneVisitor#visitCtSynchronized(spoon.reflect.code.CtSynchronized)
CloneVisitor#visitCtThrow(spoon.reflect.code.CtThrow)
CloneVisitor#visitCtTry(spoon.reflect.code.CtTry)
CloneVisitor#visitCtTryWithResource(spoon.reflect.code.CtTryWithResource)
CloneVisitor#visitCtTypeParameterReference(spoon.reflect.reference.CtTypeParameterReference)
CloneVisitor#visitCtWildcardReference(spoon.reflect.reference.CtWildcardReference)
CloneVisitor#visitCtIntersectionTypeReference(spoon.reflect.reference.CtIntersectionTypeReference)
CloneVisitor#visitCtTypeReference(spoon.reflect.reference.CtTypeReference)
CloneVisitor#visitCtTypeAccess(spoon.reflect.code.CtTypeAccess)
CloneVisitor#visitCtUnaryOperator(spoon.reflect.code.CtUnaryOperator)
CloneVisitor#visitCtVariableRead(spoon.reflect.code.CtVariableRead)
CloneVisitor#visitCtVariableWrite(spoon.reflect.code.CtVariableWrite)
CloneVisitor#visitCtWhile(spoon.reflect.code.CtWhile)
CloneVisitor#visitCtCodeSnippetExpression(spoon.reflect.code.CtCodeSnippetExpression)
CloneVisitor#visitCtCodeSnippetStatement(spoon.reflect.code.CtCodeSnippetStatement)
CloneVisitor#visitCtUnboundVariableReference(spoon.reflect.reference.CtUnboundVariableReference)
CloneVisitor#visitCtFieldRead(spoon.reflect.code.CtFieldRead)
CloneVisitor#visitCtFieldWrite(spoon.reflect.code.CtFieldWrite)
CloneVisitor#visitCtSuperAccess(spoon.reflect.code.CtSuperAccess)
CloneVisitor#visitCtComment(spoon.reflect.code.CtComment)
CloneVisitor#visitCtJavaDoc(spoon.reflect.code.CtJavaDoc)
CloneVisitor#visitCtJavaDocTag(spoon.reflect.code.CtJavaDocTag)
CloneVisitor#visitCtImport(spoon.reflect.declaration.CtImport)
CloneVisitor#visitCtModule(spoon.reflect.declaration.CtModule)
CloneVisitor#visitCtModuleReference(spoon.reflect.reference.CtModuleReference)
CloneVisitor#visitCtPackageExport(spoon.reflect.declaration.CtPackageExport)
CloneVisitor#visitCtModuleRequirement(spoon.reflect.declaration.CtModuleRequirement)
CloneVisitor#visitCtProvidedService(spoon.reflect.declaration.CtProvidedService)
CloneVisitor#visitCtUsedService(spoon.reflect.declaration.CtUsedService)
CloneHelper#clone(T extends spoon.reflect.declaration.CtElement)
CloneHelper#clone(java.util.Collection)
CloneHelper#clone(java.util.List)
CloneHelper#clone(java.util.Set)
CloneHelper#clone(java.util.Map)
CloneHelper#tailor(spoon.reflect.declaration.CtElement,spoon.reflect.declaration.CtElement)
EqualsChecker#setOther(spoon.reflect.declaration.CtElement)
EqualsChecker#isNotEqual()
EqualsChecker#getNotEqualRole()
EqualsChecker#scanCtNamedElement(spoon.reflect.declaration.CtNamedElement)
EqualsChecker#scanCtReference(spoon.reflect.reference.CtReference)
EqualsChecker#scanCtStatement(spoon.reflect.code.CtStatement)
EqualsChecker#scanCtModifiable(spoon.reflect.declaration.CtModifiable)
EqualsChecker#visitCtAssignment(spoon.reflect.code.CtAssignment)
EqualsChecker#visitCtOperatorAssignment(spoon.reflect.code.CtOperatorAssignment)
EqualsChecker#visitCtBinaryOperator(spoon.reflect.code.CtBinaryOperator)
EqualsChecker#visitCtUnaryOperator(spoon.reflect.code.CtUnaryOperator)
EqualsChecker#visitCtArrayTypeReference(spoon.reflect.reference.CtArrayTypeReference)
EqualsChecker#visitCtBreak(spoon.reflect.code.CtBreak)
EqualsChecker#visitCtContinue(spoon.reflect.code.CtContinue)
EqualsChecker#visitCtExecutableReference(spoon.reflect.reference.CtExecutableReference)
EqualsChecker#visitCtMethod(spoon.reflect.declaration.CtMethod)
EqualsChecker#visitCtParameter(spoon.reflect.declaration.CtParameter)
EqualsChecker#visitCtLiteral(spoon.reflect.code.CtLiteral)
EqualsChecker#visitCtImport(spoon.reflect.declaration.CtImport)
EqualsVisitor#equals(spoon.reflect.declaration.CtElement,spoon.reflect.declaration.CtElement)
EqualsVisitor#biScan(spoon.reflect.declaration.CtElement,spoon.reflect.declaration.CtElement)
EqualsVisitor#biScan(spoon.reflect.path.CtRole,spoon.reflect.declaration.CtElement,spoon.reflect.declaration.CtElement)
EqualsVisitor#checkEquals(spoon.reflect.declaration.CtElement,spoon.reflect.declaration.CtElement)
EqualsVisitor#isEqual()
EqualsVisitor#getNotEqualRole()
EqualsVisitor#getNotEqualElement()
EqualsVisitor#getNotEqualOther()
AbstractRuntimeBuilderContext#addPackage(spoon.reflect.declaration.CtPackage)
AbstractRuntimeBuilderContext#addType(spoon.reflect.declaration.CtType)
AbstractRuntimeBuilderContext#addAnnotation(spoon.reflect.declaration.CtAnnotation)
AbstractRuntimeBuilderContext#addConstructor(spoon.reflect.declaration.CtConstructor)
AbstractRuntimeBuilderContext#addMethod(spoon.reflect.declaration.CtMethod)
AbstractRuntimeBuilderContext#addField(spoon.reflect.declaration.CtField)
AbstractRuntimeBuilderContext#addEnumValue(spoon.reflect.declaration.CtEnumValue)
AbstractRuntimeBuilderContext#addParameter(spoon.reflect.declaration.CtParameter)
AbstractRuntimeBuilderContext#addFormalType(spoon.reflect.declaration.CtTypeParameter)
AbstractRuntimeBuilderContext#addTypeReference(spoon.reflect.path.CtRole,spoon.reflect.reference.CtTypeReference)
AbstractRuntimeBuilderContext#getTypeParameter(java.lang.reflect.GenericDeclaration,java.lang.String)
AnnotationRuntimeBuilderContext#addAnnotation(spoon.reflect.declaration.CtAnnotation)
AnnotationRuntimeBuilderContext#addTypeReference(spoon.reflect.path.CtRole,spoon.reflect.reference.CtTypeReference)
AnnotationRuntimeBuilderContext#getCtAnnotation()
ExecutableRuntimeBuilderContext#addAnnotation(spoon.reflect.declaration.CtAnnotation)
ExecutableRuntimeBuilderContext#addParameter(spoon.reflect.declaration.CtParameter)
ExecutableRuntimeBuilderContext#addTypeReference(spoon.reflect.path.CtRole,spoon.reflect.reference.CtTypeReference)
ExecutableRuntimeBuilderContext#addFormalType(spoon.reflect.declaration.CtTypeParameter)
ExecutableRuntimeBuilderContext#getTypeParameter(java.lang.reflect.GenericDeclaration,java.lang.String)
PackageRuntimeBuilderContext#addType(spoon.reflect.declaration.CtType)
PackageRuntimeBuilderContext#addAnnotation(spoon.reflect.declaration.CtAnnotation)
RuntimeBuilderContext#addPackage(spoon.reflect.declaration.CtPackage)
RuntimeBuilderContext#addType(spoon.reflect.declaration.CtType)
RuntimeBuilderContext#addAnnotation(spoon.reflect.declaration.CtAnnotation)
RuntimeBuilderContext#addConstructor(spoon.reflect.declaration.CtConstructor)
RuntimeBuilderContext#addMethod(spoon.reflect.declaration.CtMethod)
RuntimeBuilderContext#addField(spoon.reflect.declaration.CtField)
RuntimeBuilderContext#addEnumValue(spoon.reflect.declaration.CtEnumValue)
RuntimeBuilderContext#addParameter(spoon.reflect.declaration.CtParameter)
RuntimeBuilderContext#addTypeReference(spoon.reflect.path.CtRole,spoon.reflect.reference.CtTypeReference)
RuntimeBuilderContext#addFormalType(spoon.reflect.declaration.CtTypeParameter)
RuntimeBuilderContext#getTypeParameter(java.lang.reflect.GenericDeclaration,java.lang.String)
TypeReferenceRuntimeBuilderContext#addPackage(spoon.reflect.declaration.CtPackage)
TypeReferenceRuntimeBuilderContext#addTypeReference(spoon.reflect.path.CtRole,spoon.reflect.reference.CtTypeReference)
TypeReferenceRuntimeBuilderContext#addAnnotation(spoon.reflect.declaration.CtAnnotation)
TypeReferenceRuntimeBuilderContext#addFormalType(spoon.reflect.declaration.CtTypeParameter)
TypeReferenceRuntimeBuilderContext#getTypeParameter(java.lang.reflect.GenericDeclaration,java.lang.String)
TypeReferenceRuntimeBuilderContext#equals(java.lang.Object)
TypeReferenceRuntimeBuilderContext#hashCode()
TypeRuntimeBuilderContext#addPackage(spoon.reflect.declaration.CtPackage)
TypeRuntimeBuilderContext#addType(spoon.reflect.declaration.CtType)
TypeRuntimeBuilderContext#addAnnotation(spoon.reflect.declaration.CtAnnotation)
TypeRuntimeBuilderContext#addMethod(spoon.reflect.declaration.CtMethod)
TypeRuntimeBuilderContext#addField(spoon.reflect.declaration.CtField)
TypeRuntimeBuilderContext#addFormalType(spoon.reflect.declaration.CtTypeParameter)
TypeRuntimeBuilderContext#addTypeReference(spoon.reflect.path.CtRole,spoon.reflect.reference.CtTypeReference)
TypeRuntimeBuilderContext#getTypeParameter(java.lang.reflect.GenericDeclaration,java.lang.String)
VariableRuntimeBuilderContext#addAnnotation(spoon.reflect.declaration.CtAnnotation)
VariableRuntimeBuilderContext#addTypeReference(spoon.reflect.path.CtRole,spoon.reflect.reference.CtTypeReference)
RtMethod#getDeclaringClass()
RtMethod#getMethod()
RtMethod#getName()
RtMethod#getReturnType()
RtMethod#getTypeParameters()
RtMethod#getParameterTypes()
RtMethod#getExceptionTypes()
RtMethod#getModifiers()
RtMethod#getDeclaredAnnotations()
RtMethod#getParameterAnnotations()
RtMethod#isVarArgs()
RtMethod#isDefault()
RtMethod#getGenericReturnType()
RtMethod#getGenericParameterTypes()
RtMethod#equals(java.lang.Object)
RtMethod#hashCode()
RtMethod#create(java.lang.reflect.Method)
RtMethod#methodsOf(java.lang.Class)
RtMethod#sameMethodsWithDifferentTypeOf(java.lang.Class,java.util.List)
RtParameter#getName()
RtParameter#getType()
RtParameter#getGenericType()
RtParameter#getDeclaredAnnotations()
RtParameter#isVarArgs()
RtParameter#equals(java.lang.Object)
RtParameter#hashCode()
RtParameter#parametersOf(spoon.support.visitor.java.reflect.RtMethod)
RtParameter#parametersOf(java.lang.reflect.Constructor)
JavaReflectionTreeBuilder#scan(java.lang.Class)
JavaReflectionTreeBuilder#visitPackage(java.lang.Package)
JavaReflectionTreeBuilder#visitClass(java.lang.Class)
JavaReflectionTreeBuilder#visitInterface(java.lang.Class)
JavaReflectionTreeBuilder#visitEnum(java.lang.Class)
JavaReflectionTreeBuilder#visitAnnotationClass(java.lang.Class)
JavaReflectionTreeBuilder#visitAnnotation(java.lang.annotation.Annotation)
JavaReflectionTreeBuilder#visitConstructor(java.lang.reflect.Constructor)
JavaReflectionTreeBuilder#visitMethod(spoon.support.visitor.java.reflect.RtMethod,java.lang.annotation.Annotation)
JavaReflectionTreeBuilder#visitField(java.lang.reflect.Field)
JavaReflectionTreeBuilder#visitEnumValue(java.lang.reflect.Field)
JavaReflectionTreeBuilder#visitParameter(spoon.support.visitor.java.reflect.RtParameter)
JavaReflectionTreeBuilder#visitTypeParameter(java.lang.reflect.TypeVariable)
JavaReflectionTreeBuilder#visitTypeParameterReference(spoon.reflect.path.CtRole,java.lang.reflect.TypeVariable)
JavaReflectionTreeBuilder#visitTypeReference(spoon.reflect.path.CtRole,java.lang.reflect.ParameterizedType)
JavaReflectionTreeBuilder#visitTypeReference(spoon.reflect.path.CtRole,java.lang.reflect.WildcardType)
JavaReflectionTreeBuilder#visitArrayReference(spoon.reflect.path.CtRole,java.lang.reflect.Type)
JavaReflectionTreeBuilder#visitTypeReference(spoon.reflect.path.CtRole,java.lang.Class)
JavaReflectionVisitor#visitPackage(java.lang.Package)
JavaReflectionVisitor#visitClass(java.lang.Class)
JavaReflectionVisitor#visitInterface(java.lang.Class)
JavaReflectionVisitor#visitEnum(java.lang.Class)
JavaReflectionVisitor#visitAnnotationClass(java.lang.Class)
JavaReflectionVisitor#visitAnnotation(java.lang.annotation.Annotation)
JavaReflectionVisitor#visitConstructor(java.lang.reflect.Constructor)
JavaReflectionVisitor#visitMethod(spoon.support.visitor.java.reflect.RtMethod)
JavaReflectionVisitor#visitField(java.lang.reflect.Field)
JavaReflectionVisitor#visitEnumValue(java.lang.reflect.Field)
JavaReflectionVisitor#visitParameter(spoon.support.visitor.java.reflect.RtParameter)
JavaReflectionVisitor#visitTypeParameter(java.lang.reflect.TypeVariable)
JavaReflectionVisitor#visitTypeParameterReference(spoon.reflect.path.CtRole,java.lang.reflect.TypeVariable)
JavaReflectionVisitor#visitTypeReference(spoon.reflect.path.CtRole,java.lang.reflect.Type)
JavaReflectionVisitor#visitTypeReference(spoon.reflect.path.CtRole,java.lang.reflect.ParameterizedType)
JavaReflectionVisitor#visitTypeReference(spoon.reflect.path.CtRole,java.lang.reflect.WildcardType)
JavaReflectionVisitor#visitTypeReference(spoon.reflect.path.CtRole,java.lang.Class)
JavaReflectionVisitor#visitArrayReference(spoon.reflect.path.CtRole,java.lang.reflect.Type)
JavaReflectionVisitorImpl#visitPackage(java.lang.Package)
JavaReflectionVisitorImpl#visitClass(java.lang.Class)
JavaReflectionVisitorImpl#visitInterface(java.lang.Class)
JavaReflectionVisitorImpl#visitEnum(java.lang.Class)
JavaReflectionVisitorImpl#visitAnnotationClass(java.lang.Class)
JavaReflectionVisitorImpl#visitAnnotation(java.lang.annotation.Annotation)
JavaReflectionVisitorImpl#visitConstructor(java.lang.reflect.Constructor)
JavaReflectionVisitorImpl#visitMethod(spoon.support.visitor.java.reflect.RtMethod)
JavaReflectionVisitorImpl#visitField(java.lang.reflect.Field)
JavaReflectionVisitorImpl#visitEnumValue(java.lang.reflect.Field)
JavaReflectionVisitorImpl#visitParameter(spoon.support.visitor.java.reflect.RtParameter)
JavaReflectionVisitorImpl#visitTypeParameter(java.lang.reflect.TypeVariable)
JavaReflectionVisitorImpl#visitTypeParameterReference(spoon.reflect.path.CtRole,java.lang.reflect.TypeVariable)
JavaReflectionVisitorImpl#visitTypeReference(spoon.reflect.path.CtRole,java.lang.reflect.Type)
JavaReflectionVisitorImpl#visitTypeReference(spoon.reflect.path.CtRole,java.lang.reflect.ParameterizedType)
JavaReflectionVisitorImpl#visitTypeReference(spoon.reflect.path.CtRole,java.lang.reflect.WildcardType)
JavaReflectionVisitorImpl#visitArrayReference(spoon.reflect.path.CtRole,java.lang.reflect.Type)
JavaReflectionVisitorImpl#visitTypeReference(spoon.reflect.path.CtRole,java.lang.Class)
CtListener#set(spoon.reflect.declaration.CtElement)
ReplaceListListener#set(T extends java.util.List)
ReplaceListener#set(T extends spoon.reflect.declaration.CtElement)
ReplaceMapListener#set(T extends java.util.Map)
ReplaceSetListener#set(T extends java.util.Set)
ReplacementVisitor#replace(spoon.reflect.declaration.CtElement,spoon.reflect.declaration.CtElement)
ReplacementVisitor#replace(spoon.reflect.declaration.CtElement,java.util.Collection)
ReplacementVisitor#visitCtAnnotation(spoon.reflect.declaration.CtAnnotation)
ReplacementVisitor#visitCtAnnotationType(spoon.reflect.declaration.CtAnnotationType)
ReplacementVisitor#visitCtAnonymousExecutable(spoon.reflect.declaration.CtAnonymousExecutable)
ReplacementVisitor#visitCtArrayRead(spoon.reflect.code.CtArrayRead)
ReplacementVisitor#visitCtArrayWrite(spoon.reflect.code.CtArrayWrite)
ReplacementVisitor#visitCtArrayTypeReference(spoon.reflect.reference.CtArrayTypeReference)
ReplacementVisitor#visitCtAssert(spoon.reflect.code.CtAssert)
ReplacementVisitor#visitCtAssignment(spoon.reflect.code.CtAssignment)
ReplacementVisitor#visitCtBinaryOperator(spoon.reflect.code.CtBinaryOperator)
ReplacementVisitor#visitCtBlock(spoon.reflect.code.CtBlock)
ReplacementVisitor#visitCtBreak(spoon.reflect.code.CtBreak)
ReplacementVisitor#visitCtCase(spoon.reflect.code.CtCase)
ReplacementVisitor#visitCtCatch(spoon.reflect.code.CtCatch)
ReplacementVisitor#visitCtClass(spoon.reflect.declaration.CtClass)
ReplacementVisitor#visitCtTypeParameter(spoon.reflect.declaration.CtTypeParameter)
ReplacementVisitor#visitCtConditional(spoon.reflect.code.CtConditional)
ReplacementVisitor#visitCtConstructor(spoon.reflect.declaration.CtConstructor)
ReplacementVisitor#visitCtContinue(spoon.reflect.code.CtContinue)
ReplacementVisitor#visitCtDo(spoon.reflect.code.CtDo)
ReplacementVisitor#visitCtEnum(spoon.reflect.declaration.CtEnum)
ReplacementVisitor#visitCtExecutableReference(spoon.reflect.reference.CtExecutableReference)
ReplacementVisitor#visitCtField(spoon.reflect.declaration.CtField)
ReplacementVisitor#visitCtEnumValue(spoon.reflect.declaration.CtEnumValue)
ReplacementVisitor#visitCtThisAccess(spoon.reflect.code.CtThisAccess)
ReplacementVisitor#visitCtAnnotationFieldAccess(spoon.reflect.code.CtAnnotationFieldAccess)
ReplacementVisitor#visitCtFieldReference(spoon.reflect.reference.CtFieldReference)
ReplacementVisitor#visitCtFor(spoon.reflect.code.CtFor)
ReplacementVisitor#visitCtForEach(spoon.reflect.code.CtForEach)
ReplacementVisitor#visitCtIf(spoon.reflect.code.CtIf)
ReplacementVisitor#visitCtInterface(spoon.reflect.declaration.CtInterface)
ReplacementVisitor#visitCtInvocation(spoon.reflect.code.CtInvocation)
ReplacementVisitor#visitCtLiteral(spoon.reflect.code.CtLiteral)
ReplacementVisitor#visitCtLocalVariable(spoon.reflect.code.CtLocalVariable)
ReplacementVisitor#visitCtLocalVariableReference(spoon.reflect.reference.CtLocalVariableReference)
ReplacementVisitor#visitCtCatchVariable(spoon.reflect.code.CtCatchVariable)
ReplacementVisitor#visitCtCatchVariableReference(spoon.reflect.reference.CtCatchVariableReference)
ReplacementVisitor#visitCtMethod(spoon.reflect.declaration.CtMethod)
ReplacementVisitor#visitCtAnnotationMethod(spoon.reflect.declaration.CtAnnotationMethod)
ReplacementVisitor#visitCtNewArray(spoon.reflect.code.CtNewArray)
ReplacementVisitor#visitCtConstructorCall(spoon.reflect.code.CtConstructorCall)
ReplacementVisitor#visitCtNewClass(spoon.reflect.code.CtNewClass)
ReplacementVisitor#visitCtLambda(spoon.reflect.code.CtLambda)
ReplacementVisitor#visitCtExecutableReferenceExpression(spoon.reflect.code.CtExecutableReferenceExpression)
ReplacementVisitor#visitCtOperatorAssignment(spoon.reflect.code.CtOperatorAssignment)
ReplacementVisitor#visitCtPackage(spoon.reflect.declaration.CtPackage)
ReplacementVisitor#visitCtPackageReference(spoon.reflect.reference.CtPackageReference)
ReplacementVisitor#visitCtParameter(spoon.reflect.declaration.CtParameter)
ReplacementVisitor#visitCtParameterReference(spoon.reflect.reference.CtParameterReference)
ReplacementVisitor#visitCtReturn(spoon.reflect.code.CtReturn)
ReplacementVisitor#visitCtStatementList(spoon.reflect.code.CtStatementList)
ReplacementVisitor#visitCtSwitch(spoon.reflect.code.CtSwitch)
ReplacementVisitor#visitCtSynchronized(spoon.reflect.code.CtSynchronized)
ReplacementVisitor#visitCtThrow(spoon.reflect.code.CtThrow)
ReplacementVisitor#visitCtTry(spoon.reflect.code.CtTry)
ReplacementVisitor#visitCtTryWithResource(spoon.reflect.code.CtTryWithResource)
ReplacementVisitor#visitCtTypeParameterReference(spoon.reflect.reference.CtTypeParameterReference)
ReplacementVisitor#visitCtWildcardReference(spoon.reflect.reference.CtWildcardReference)
ReplacementVisitor#visitCtIntersectionTypeReference(spoon.reflect.reference.CtIntersectionTypeReference)
ReplacementVisitor#visitCtTypeReference(spoon.reflect.reference.CtTypeReference)
ReplacementVisitor#visitCtTypeAccess(spoon.reflect.code.CtTypeAccess)
ReplacementVisitor#visitCtUnaryOperator(spoon.reflect.code.CtUnaryOperator)
ReplacementVisitor#visitCtVariableRead(spoon.reflect.code.CtVariableRead)
ReplacementVisitor#visitCtVariableWrite(spoon.reflect.code.CtVariableWrite)
ReplacementVisitor#visitCtWhile(spoon.reflect.code.CtWhile)
ReplacementVisitor#visitCtCodeSnippetExpression(spoon.reflect.code.CtCodeSnippetExpression)
ReplacementVisitor#visitCtCodeSnippetStatement(spoon.reflect.code.CtCodeSnippetStatement)
ReplacementVisitor#visitCtUnboundVariableReference(spoon.reflect.reference.CtUnboundVariableReference)
ReplacementVisitor#visitCtFieldRead(spoon.reflect.code.CtFieldRead)
ReplacementVisitor#visitCtFieldWrite(spoon.reflect.code.CtFieldWrite)
ReplacementVisitor#visitCtSuperAccess(spoon.reflect.code.CtSuperAccess)
ReplacementVisitor#visitCtComment(spoon.reflect.code.CtComment)
ReplacementVisitor#visitCtJavaDoc(spoon.reflect.code.CtJavaDoc)
ReplacementVisitor#visitCtJavaDocTag(spoon.reflect.code.CtJavaDocTag)
ReplacementVisitor#visitCtImport(spoon.reflect.declaration.CtImport)
ReplacementVisitor#visitCtModule(spoon.reflect.declaration.CtModule)
ReplacementVisitor#visitCtModuleReference(spoon.reflect.reference.CtModuleReference)
ReplacementVisitor#visitCtPackageExport(spoon.reflect.declaration.CtPackageExport)
ReplacementVisitor#visitCtModuleRequirement(spoon.reflect.declaration.CtModuleRequirement)
ReplacementVisitor#visitCtProvidedService(spoon.reflect.declaration.CtProvidedService)
ReplacementVisitor#visitCtUsedService(spoon.reflect.declaration.CtUsedService)
AbstractTypingContext#adaptType(spoon.reflect.declaration.CtTypeInformation)
ClassTypingContext#getAdaptationScope()
ClassTypingContext#isSubtypeOf(spoon.reflect.reference.CtTypeReference)
ClassTypingContext#resolveActualTypeArgumentsOf(spoon.reflect.reference.CtTypeReference)
ClassTypingContext#isOverriding(spoon.reflect.declaration.CtMethod,spoon.reflect.declaration.CtMethod)
ClassTypingContext#isSubSignature(spoon.reflect.declaration.CtMethod,spoon.reflect.declaration.CtMethod)
ClassTypingContext#isSameSignature(spoon.reflect.declaration.CtExecutable,spoon.reflect.declaration.CtMethod)
ClassTypingContext#getEnclosingGenericTypeAdapter()
GenericTypeAdapter#getAdaptationScope()
GenericTypeAdapter#adaptType(spoon.reflect.declaration.CtTypeInformation)
GenericTypeAdapter#getEnclosingGenericTypeAdapter()
HashcodeVisitor#scanCtNamedElement(spoon.reflect.declaration.CtNamedElement)
HashcodeVisitor#scanCtReference(spoon.reflect.reference.CtReference)
HashcodeVisitor#visitCtImport(spoon.reflect.declaration.CtImport)
HashcodeVisitor#scan(spoon.reflect.declaration.CtElement)
HashcodeVisitor#getHasCode()
MethodTypingContext#getAdaptationScope()
MethodTypingContext#setMethod(spoon.reflect.declaration.CtMethod)
MethodTypingContext#setConstructor(spoon.reflect.declaration.CtConstructor)
MethodTypingContext#getEnclosingGenericTypeAdapter()
MethodTypingContext#setClassTypingContext(spoon.support.visitor.ClassTypingContext)
MethodTypingContext#setInvocation(spoon.reflect.code.CtInvocation)
MethodTypingContext#setExecutableReference(spoon.reflect.reference.CtExecutableReference)
MethodTypingContext#hasSameMethodFormalTypeParameters(spoon.reflect.declaration.CtFormalTypeDeclarer)
ProcessingVisitor#getProcessor()
ProcessingVisitor#scan(spoon.reflect.declaration.CtElement)
ProcessingVisitor#setProcessor(spoon.processing.Processor)
SignaturePrinter#getSignature()
SignaturePrinter#visitCtArrayTypeReference(spoon.reflect.reference.CtArrayTypeReference)
SignaturePrinter#visitCtExecutableReference(spoon.reflect.reference.CtExecutableReference)
SignaturePrinter#writeNameAndParameters(spoon.reflect.reference.CtExecutableReference)
SignaturePrinter#visitCtTypeReference(spoon.reflect.reference.CtTypeReference)
SignaturePrinter#visitCtTypeParameterReference(spoon.reflect.reference.CtTypeParameterReference)
SignaturePrinter#visitCtIntersectionTypeReference(spoon.reflect.reference.CtIntersectionTypeReference)
SignaturePrinter#visitCtConstructor(spoon.reflect.declaration.CtConstructor)
SignaturePrinter#visitCtAnnotationMethod(spoon.reflect.declaration.CtAnnotationMethod)
SignaturePrinter#visitCtMethod(spoon.reflect.declaration.CtMethod)
SubInheritanceHierarchyResolver#addSuperType(spoon.reflect.declaration.CtTypeInformation)
SubInheritanceHierarchyResolver#includingInterfaces(boolean)
SubInheritanceHierarchyResolver#failOnClassNotFound(boolean)
SubInheritanceHierarchyResolver#forEachSubTypeInPackage(spoon.reflect.visitor.chain.CtConsumer)
TypeReferenceScanner#getReferences()
TypeReferenceScanner#visitCtFieldRead(spoon.reflect.code.CtFieldRead)
TypeReferenceScanner#visitCtFieldWrite(spoon.reflect.code.CtFieldWrite)
TypeReferenceScanner#visitCtFieldReference(spoon.reflect.reference.CtFieldReference)
TypeReferenceScanner#visitCtExecutableReference(spoon.reflect.reference.CtExecutableReference)
TypeReferenceScanner#visitCtTypeReference(spoon.reflect.reference.CtTypeReference)
TypeReferenceScanner#visitCtAnnotationType(spoon.reflect.declaration.CtAnnotationType)
TypeReferenceScanner#visitCtEnum(spoon.reflect.declaration.CtEnum)
TypeReferenceScanner#visitCtInterface(spoon.reflect.declaration.CtInterface)
TypeReferenceScanner#visitCtClass(spoon.reflect.declaration.CtClass)
DefaultCoreFactory#clone(T extends spoon.reflect.declaration.CtElement)
DefaultCoreFactory#createAnnotation()
DefaultCoreFactory#createAnnotationType()
DefaultCoreFactory#createAnonymousExecutable()
DefaultCoreFactory#createArrayRead()
DefaultCoreFactory#createArrayWrite()
DefaultCoreFactory#createArrayTypeReference()
DefaultCoreFactory#createAssert()
DefaultCoreFactory#createAssignment()
DefaultCoreFactory#createBinaryOperator()
DefaultCoreFactory#createBlock()
DefaultCoreFactory#createBreak()
DefaultCoreFactory#createCase()
DefaultCoreFactory#createCatch()
DefaultCoreFactory#createClass()
DefaultCoreFactory#createTypeParameter()
DefaultCoreFactory#createConditional()
DefaultCoreFactory#createConstructor()
DefaultCoreFactory#createInvisibleArrayConstructor()
DefaultCoreFactory#createContinue()
DefaultCoreFactory#createDo()
DefaultCoreFactory#createEnum()
DefaultCoreFactory#createExecutableReference()
DefaultCoreFactory#createField()
DefaultCoreFactory#createEnumValue()
DefaultCoreFactory#createFieldRead()
DefaultCoreFactory#createFieldWrite()
DefaultCoreFactory#createAnnotationFieldAccess()
DefaultCoreFactory#createUnboundVariableReference()
DefaultCoreFactory#createFieldReference()
DefaultCoreFactory#createFor()
DefaultCoreFactory#createForEach()
DefaultCoreFactory#createIf()
DefaultCoreFactory#createInterface()
DefaultCoreFactory#createInvocation()
DefaultCoreFactory#createLiteral()
DefaultCoreFactory#createLocalVariable()
DefaultCoreFactory#createLocalVariableReference()
DefaultCoreFactory#createCatchVariable()
DefaultCoreFactory#createCatchVariableReference()
DefaultCoreFactory#createMethod()
DefaultCoreFactory#createAnnotationMethod()
DefaultCoreFactory#createNewArray()
DefaultCoreFactory#createConstructorCall()
DefaultCoreFactory#createNewClass()
DefaultCoreFactory#createLambda()
DefaultCoreFactory#createExecutableReferenceExpression()
DefaultCoreFactory#createOperatorAssignment()
DefaultCoreFactory#createPackage()
DefaultCoreFactory#createPackageReference()
DefaultCoreFactory#createParameter()
DefaultCoreFactory#createParameterReference()
DefaultCoreFactory#createReturn()
DefaultCoreFactory#createStatementList()
DefaultCoreFactory#createSwitch()
DefaultCoreFactory#createSynchronized()
DefaultCoreFactory#createThrow()
DefaultCoreFactory#createTry()
DefaultCoreFactory#createTryWithResource()
DefaultCoreFactory#createTypeParameterReference()
DefaultCoreFactory#createWildcardReference()
DefaultCoreFactory#createIntersectionTypeReference()
DefaultCoreFactory#createTypeReference()
DefaultCoreFactory#createTypeAccess()
DefaultCoreFactory#createUnaryOperator()
DefaultCoreFactory#createVariableRead()
DefaultCoreFactory#createVariableWrite()
DefaultCoreFactory#createCodeSnippetExpression()
DefaultCoreFactory#createCodeSnippetStatement()
DefaultCoreFactory#createComment()
DefaultCoreFactory#createJavaDoc()
DefaultCoreFactory#createJavaDocTag()
DefaultCoreFactory#createWhile()
DefaultCoreFactory#createImport()
DefaultCoreFactory#getMainFactory()
DefaultCoreFactory#setMainFactory(spoon.reflect.factory.Factory)
DefaultCoreFactory#createSourcePosition(spoon.reflect.cu.CompilationUnit,int,int,int[])
DefaultCoreFactory#createPartialSourcePosition(spoon.reflect.cu.CompilationUnit)
DefaultCoreFactory#createDeclarationSourcePosition(spoon.reflect.cu.CompilationUnit,int,int,int,int,int,int,int[])
DefaultCoreFactory#createBodyHolderSourcePosition(spoon.reflect.cu.CompilationUnit,int,int,int,int,int,int,int,int,int[])
DefaultCoreFactory#createCompilationUnit()
DefaultCoreFactory#createThisAccess()
DefaultCoreFactory#createSuperAccess()
DefaultCoreFactory#create(java.lang.Class)
DefaultCoreFactory#createWildcardStaticTypeMemberReference()
DefaultCoreFactory#createModule()
DefaultCoreFactory#createModuleReference()
DefaultCoreFactory#createModuleRequirement()
DefaultCoreFactory#createPackageExport()
DefaultCoreFactory#createProvidedService()
DefaultCoreFactory#createUsedService()
DefaultOutputDestinationHandler#getOutputPath(spoon.reflect.declaration.CtModule,spoon.reflect.declaration.CtPackage,spoon.reflect.declaration.CtType)
DefaultOutputDestinationHandler#getDefaultOutputDirectory()
DefaultOutputDestinationHandler#getEnvironment()
JavaOutputProcessor#getEnvironment()
JavaOutputProcessor#getPrinter()
JavaOutputProcessor#getCreatedFiles()
JavaOutputProcessor#getOutputDirectory()
JavaOutputProcessor#init()
JavaOutputProcessor#createJavaFile(spoon.reflect.declaration.CtType)
JavaOutputProcessor#isToBeProcessed(spoon.reflect.declaration.CtNamedElement)
JavaOutputProcessor#process(spoon.reflect.declaration.CtNamedElement)
JavaOutputProcessor#setOutputDirectory(java.io.File)
JavaOutputProcessor#getLineNumberMappings()
JavaOutputProcessor#getTraversalStrategy()
OutputDestinationHandler#getOutputPath(spoon.reflect.declaration.CtModule,spoon.reflect.declaration.CtPackage,spoon.reflect.declaration.CtType)
OutputDestinationHandler#getDefaultOutputDirectory()
QueueProcessingManager#addProcessor(java.lang.Class)
QueueProcessingManager#addProcessor(spoon.processing.Processor)
QueueProcessingManager#addProcessor(java.lang.String)
QueueProcessingManager#getCurrentProcessor()
QueueProcessingManager#getFactory()
QueueProcessingManager#getProcessors()
QueueProcessingManager#process(java.util.Collection)
QueueProcessingManager#process(spoon.reflect.declaration.CtElement)
QueueProcessingManager#setFactory(spoon.reflect.factory.Factory)
RuntimeProcessingManager#addProcessor(java.lang.Class)
RuntimeProcessingManager#addProcessor(spoon.processing.Processor)
RuntimeProcessingManager#addProcessor(java.lang.String)
RuntimeProcessingManager#getCurrentProcessor()
RuntimeProcessingManager#getFactory()
RuntimeProcessingManager#getProcessors()
RuntimeProcessingManager#process(java.util.Collection)
RuntimeProcessingManager#process(java.util.Collection,spoon.processing.Processor)
RuntimeProcessingManager#process(spoon.reflect.declaration.CtElement)
RuntimeProcessingManager#process(spoon.reflect.declaration.CtElement,spoon.processing.Processor)
RuntimeProcessingManager#setFactory(spoon.reflect.factory.Factory)
SerializationModelStreamer#save(spoon.reflect.factory.Factory,java.io.OutputStream)
SerializationModelStreamer#load(java.io.InputStream)
StandardEnvironment#debugMessage(java.lang.String)
StandardEnvironment#isAutoImports()
StandardEnvironment#setAutoImports(boolean)
StandardEnvironment#getDefaultFileGenerator()
StandardEnvironment#getLevel()
StandardEnvironment#setLevel(java.lang.String)
StandardEnvironment#shouldCompile()
StandardEnvironment#setShouldCompile(boolean)
StandardEnvironment#checksAreSkipped()
StandardEnvironment#setSelfChecks(boolean)
StandardEnvironment#disableConsistencyChecks()
StandardEnvironment#getManager()
StandardEnvironment#getProcessorProperties(java.lang.String)
StandardEnvironment#isProcessingStopped()
StandardEnvironment#report(spoon.processing.Processor,org.apache.log4j.Level,spoon.reflect.declaration.CtElement,java.lang.String)
StandardEnvironment#report(spoon.processing.Processor,org.apache.log4j.Level,spoon.reflect.declaration.CtElement,java.lang.String,spoon.processing.ProblemFixer[])
StandardEnvironment#report(spoon.processing.Processor,org.apache.log4j.Level,java.lang.String)
StandardEnvironment#reportEnd()
StandardEnvironment#reportProgressMessage(java.lang.String)
StandardEnvironment#setDebug(boolean)
StandardEnvironment#setDefaultFileGenerator(spoon.processing.FileGenerator)
StandardEnvironment#setManager(spoon.processing.ProcessingManager)
StandardEnvironment#setProcessingStopped(boolean)
StandardEnvironment#setVerbose(boolean)
StandardEnvironment#getComplianceLevel()
StandardEnvironment#setComplianceLevel(int)
StandardEnvironment#setProcessorProperties(java.lang.String,spoon.processing.ProcessorProperties)
StandardEnvironment#isUsingTabulations()
StandardEnvironment#useTabulations(boolean)
StandardEnvironment#getTabulationSize()
StandardEnvironment#setTabulationSize(int)
StandardEnvironment#setInputClassLoader(java.lang.ClassLoader)
StandardEnvironment#getInputClassLoader()
StandardEnvironment#urlClasspath()
StandardEnvironment#getSourceClasspath()
StandardEnvironment#setSourceClasspath(java.lang.String[])
StandardEnvironment#getErrorCount()
StandardEnvironment#getWarningCount()
StandardEnvironment#isPreserveLineNumbers()
StandardEnvironment#setPreserveLineNumbers(boolean)
StandardEnvironment#setNoClasspath(boolean)
StandardEnvironment#getNoClasspath()
StandardEnvironment#isCopyResources()
StandardEnvironment#setCopyResources(boolean)
StandardEnvironment#isCommentsEnabled()
StandardEnvironment#setCommentEnabled(boolean)
StandardEnvironment#setBinaryOutputDirectory(java.lang.String)
StandardEnvironment#getBinaryOutputDirectory()
StandardEnvironment#setSourceOutputDirectory(java.io.File)
StandardEnvironment#getSourceOutputDirectory()
StandardEnvironment#setOutputDestinationHandler(spoon.support.OutputDestinationHandler)
StandardEnvironment#getOutputDestinationHandler()
StandardEnvironment#getModelChangeListener()
StandardEnvironment#setModelChangeListener(spoon.experimental.modelobs.FineModelChangeListener)
StandardEnvironment#getEncoding()
StandardEnvironment#setEncoding(java.nio.charset.Charset)
StandardEnvironment#setOutputType(spoon.OutputType)
StandardEnvironment#getOutputType()
StandardEnvironment#getSpoonProgress()
StandardEnvironment#setSpoonProgress(spoon.support.compiler.SpoonProgress)
AbstractTemplate#isWellFormed()
AbstractTemplate#isValid()
AbstractTemplate#getFactory()
AbstractTemplate#isAddGeneratedBy()
AbstractTemplate#addGeneratedBy(boolean)
BlockTemplate#getBlock(spoon.reflect.declaration.CtClass)
BlockTemplate#apply(spoon.reflect.declaration.CtType)
BlockTemplate#S()
BlockTemplate#block()
ExpressionTemplate#getExpression(spoon.reflect.declaration.CtClass)
ExpressionTemplate#expression()
ExpressionTemplate#apply(spoon.reflect.declaration.CtType)
ExpressionTemplate#S()
ExtensionTemplate#apply(spoon.reflect.declaration.CtType)
StatementTemplate#apply(spoon.reflect.declaration.CtType)
StatementTemplate#S()
StatementTemplate#statement()
Substitution#insertAll(spoon.reflect.declaration.CtType,T extends spoon.template.Template)
Substitution#createTypeFromTemplate(java.lang.String,spoon.reflect.declaration.CtType,java.util.Map)
Substitution#insertAllSuperInterfaces(spoon.reflect.declaration.CtType,spoon.template.Template)
Substitution#insertAllMethods(spoon.reflect.declaration.CtType,spoon.template.Template)
Substitution#insertAllFields(spoon.reflect.declaration.CtType,spoon.template.Template)
Substitution#insertAllNestedTypes(spoon.reflect.declaration.CtType,spoon.template.Template)
Substitution#insertAllConstructors(spoon.reflect.declaration.CtType,spoon.template.Template)
Substitution#insertConstructor(spoon.reflect.declaration.CtClass,spoon.template.Template,spoon.reflect.declaration.CtMethod)
Substitution#insertMethod(spoon.reflect.declaration.CtType,spoon.template.Template,spoon.reflect.declaration.CtMethod)
Substitution#insertConstructor(spoon.reflect.declaration.CtClass,spoon.template.Template,spoon.reflect.declaration.CtConstructor)
Substitution#substituteMethodBody(spoon.reflect.declaration.CtClass,spoon.template.Template,java.lang.String,spoon.reflect.reference.CtTypeReference[])
Substitution#substituteStatement(spoon.reflect.declaration.CtClass,spoon.template.Template,int,java.lang.String,spoon.reflect.reference.CtTypeReference[])
Substitution#substituteFieldDefaultExpression(spoon.reflect.declaration.CtType,spoon.template.Template,java.lang.String)
Substitution#substitute(spoon.reflect.declaration.CtType,spoon.template.Template,E extends spoon.reflect.declaration.CtElement)
Substitution#substitute(spoon.template.Template,T extends spoon.reflect.declaration.CtType)
Substitution#insertField(spoon.reflect.declaration.CtType,spoon.template.Template,spoon.reflect.declaration.CtField)
Substitution#redirectTypeReferences(spoon.reflect.declaration.CtElement,spoon.reflect.reference.CtTypeReference,spoon.reflect.reference.CtTypeReference)
Substitution#getTemplateCtClass(spoon.reflect.factory.Factory,spoon.template.Template)
Template#apply(spoon.reflect.declaration.CtType)
TemplateBuilder#createPattern(spoon.reflect.declaration.CtElement,spoon.template.Template)
TemplateBuilder#createPattern(spoon.reflect.declaration.CtElement,spoon.reflect.declaration.CtClass,spoon.template.Template)
TemplateBuilder#build()
TemplateBuilder#setAddGeneratedBy(boolean)
TemplateBuilder#getTemplateParameters()
TemplateBuilder#getTemplateParameters(spoon.reflect.declaration.CtType)
TemplateBuilder#substituteSingle(spoon.reflect.declaration.CtType,java.lang.Class)
TemplateBuilder#substituteList(spoon.reflect.factory.Factory,spoon.reflect.declaration.CtType,java.lang.Class)
TemplateMatcher#matches(spoon.reflect.declaration.CtElement)
TemplateMatcher#getMatches()
TemplateMatcher#find(spoon.reflect.declaration.CtElement)
TemplateMatcher#forEachMatch(spoon.reflect.declaration.CtElement,spoon.reflect.visitor.chain.CtConsumer)
TemplateParameter#S()
TypedBlockTemplateParameter#block()
TypedBlockTemplateParameter#getSubstitution(spoon.reflect.declaration.CtType)
TypedBlockTemplateParameter#S()
TypedStatementListTemplateParameter#getSubstitution(spoon.reflect.declaration.CtType)
TypedStatementListTemplateParameter#S()
TypedStatementListTemplateParameter#statements()
Check#assertNotNull(T)
Check#assertExists(T extends java.io.File)
Check#assertIsSame(A extends spoon.reflect.declaration.CtElement,E extends spoon.reflect.declaration.CtElement)
ModelUtils#createFactory()
ModelUtils#build(java.lang.String,java.lang.String)
ModelUtils#build(java.lang.String,java.lang.String,spoon.reflect.factory.Factory)
ModelUtils#build(java.lang.Class[])
ModelUtils#buildNoClasspath(java.lang.Class[])
ModelUtils#build(java.io.File[])
ModelUtils#buildClass(java.lang.Class)
ModelUtils#canBeBuilt(java.io.File,int)
ModelUtils#canBeBuilt(java.lang.String,int)
ModelUtils#canBeBuilt(java.io.File,int,boolean)
ModelUtils#canBeBuilt(java.lang.String,int,boolean)
ModelUtils#getOptimizedString(java.lang.Object)
ProcessorUtils#process(spoon.reflect.factory.Factory,java.util.Collection)
ProcessorUtils#initProperties(spoon.processing.Processor,spoon.processing.ProcessorProperties)
AbstractAssert#withProcessor(spoon.processing.Processor)
AbstractAssert#withProcessor(java.lang.Class)
AbstractAssert#withProcessor(java.lang.String)
AbstractAssert#hashCode()
AbstractCtElementAssert#isEqualTo(spoon.reflect.declaration.CtElement)
AbstractCtElementAssert#isEqualTo(java.lang.String)
AbstractCtPackageAssert#isEqualTo(spoon.reflect.declaration.CtPackage)
AbstractFileAssert#isEqualTo(java.lang.String)
AbstractFileAssert#isEqualTo(java.io.File)
Assert#assertThat(java.lang.String)
Assert#assertThat(java.io.File)
Assert#assertThat(spoon.reflect.declaration.CtElement)
Assert#assertThat(spoon.reflect.declaration.CtPackage)
IncrementalLauncher#changesPresent()
IncrementalLauncher#saveCache()
Launcher#main(java.lang.String[])
Launcher#run(java.lang.String[])
Launcher#setArgs(java.lang.String[])
Launcher#printUsage()
Launcher#addInputResource(java.lang.String)
Launcher#addInputResource(spoon.compiler.SpoonResource)
Launcher#addProcessor(java.lang.String)
Launcher#addProcessor(spoon.processing.Processor)
Launcher#addTemplateResource(spoon.compiler.SpoonResource)
Launcher#getEnvironment()
Launcher#createCompiler(spoon.reflect.factory.Factory)
Launcher#createCompiler(spoon.reflect.factory.Factory,java.util.List)
Launcher#createCompiler(spoon.reflect.factory.Factory,java.util.List,java.util.List)
Launcher#createCompiler()
Launcher#createCompiler(java.util.List)
Launcher#createFactory()
Launcher#getFactory()
Launcher#createEnvironment()
Launcher#createOutputWriter(java.io.File,spoon.compiler.Environment)
Launcher#createOutputWriter()
Launcher#createPrettyPrinter()
Launcher#run()
Launcher#buildModel()
Launcher#process()
Launcher#prettyprint()
Launcher#getModelBuilder()
Launcher#setSourceOutputDirectory(java.lang.String)
Launcher#setSourceOutputDirectory(java.io.File)
Launcher#setOutputFilter(spoon.reflect.visitor.Filter)
Launcher#setOutputFilter(java.lang.String[])
Launcher#setBinaryOutputDirectory(java.lang.String)
Launcher#setBinaryOutputDirectory(java.io.File)
Launcher#getModel()
Launcher#parseClass(java.lang.String)
OutputType#toString()
OutputType#fromString(java.lang.String)
SpoonAPI#run(java.lang.String[])
SpoonAPI#addInputResource(java.lang.String)
SpoonAPI#setSourceOutputDirectory(java.lang.String)
SpoonAPI#setSourceOutputDirectory(java.io.File)
SpoonAPI#setOutputFilter(spoon.reflect.visitor.Filter)
SpoonAPI#setOutputFilter(java.lang.String[])
SpoonAPI#setBinaryOutputDirectory(java.lang.String)
SpoonAPI#setBinaryOutputDirectory(java.io.File)
SpoonAPI#addProcessor(java.lang.String)
SpoonAPI#addProcessor(spoon.processing.Processor)
SpoonAPI#buildModel()
SpoonAPI#process()
SpoonAPI#prettyprint()
SpoonAPI#run()
SpoonAPI#getFactory()
SpoonAPI#getEnvironment()
SpoonAPI#createFactory()
SpoonAPI#createEnvironment()
SpoonAPI#createCompiler()
SpoonAPI#getModel()
SpoonModelBuilder#build()
SpoonModelBuilder#build(spoon.compiler.builder.JDTBuilder)
SpoonModelBuilder#compile(spoon.SpoonModelBuilder$InputType[])
SpoonModelBuilder#instantiateAndProcess(java.util.List)
SpoonModelBuilder#process(java.util.Collection)
SpoonModelBuilder#generateProcessedSourceFiles(spoon.OutputType)
SpoonModelBuilder#generateProcessedSourceFiles(spoon.OutputType,spoon.reflect.visitor.Filter)
SpoonModelBuilder#addInputSource(java.io.File)
SpoonModelBuilder#addInputSource(spoon.compiler.SpoonResource)
SpoonModelBuilder#addInputSources(java.util.List)
SpoonModelBuilder#getInputSources()
SpoonModelBuilder#addTemplateSource(java.io.File)
SpoonModelBuilder#addTemplateSource(spoon.compiler.SpoonResource)
SpoonModelBuilder#addTemplateSources(java.util.List)
SpoonModelBuilder#getTemplateSources()
SpoonModelBuilder#setSourceOutputDirectory(java.io.File)
SpoonModelBuilder#getSourceOutputDirectory()
SpoonModelBuilder#setBinaryOutputDirectory(java.io.File)
SpoonModelBuilder#getBinaryOutputDirectory()
SpoonModelBuilder#getSourceClasspath()
SpoonModelBuilder#setSourceClasspath(java.lang.String[])
SpoonModelBuilder#getTemplateClasspath()
SpoonModelBuilder#setTemplateClasspath(java.lang.String[])
SpoonModelBuilder#getFactory()
SpoonModelBuilder#addCompilationUnitFilter(spoon.support.compiler.jdt.CompilationUnitFilter)
SpoonModelBuilder#removeCompilationUnitFilter(spoon.support.compiler.jdt.CompilationUnitFilter)
SpoonModelBuilder#getCompilationUnitFilter()
