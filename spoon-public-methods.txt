AdvancedOptions#T continueExecution()
AdvancedOptions#T enableJavadoc()
AdvancedOptions#T preserveUnusedVars()
AnnotationProcessingOptions#T processors(java.lang.String)
AnnotationProcessingOptions#T processors(java.lang.String[])
AnnotationProcessingOptions#T runProcessors()
AnnotationProcessingOptions#T compileProcessors()
ClasspathOptions#T classpath(java.lang.String)
ClasspathOptions#T classpath(java.lang.String[])
ClasspathOptions#T bootclasspath(java.lang.String)
ClasspathOptions#T bootclasspath(java.lang.String[])
ClasspathOptions#T binaries(java.lang.String)
ClasspathOptions#T binaries(java.io.File)
ClasspathOptions#T encoding(java.lang.String)
ComplianceOptions#T compliance(int)
JDTBuilderImpl#spoon.compiler.builder.JDTBuilder classpathOptions(spoon.compiler.builder.ClasspathOptions)
JDTBuilderImpl#spoon.compiler.builder.JDTBuilder complianceOptions(spoon.compiler.builder.ComplianceOptions)
JDTBuilderImpl#spoon.compiler.builder.JDTBuilder annotationProcessingOptions(spoon.compiler.builder.AnnotationProcessingOptions)
JDTBuilderImpl#spoon.compiler.builder.JDTBuilder advancedOptions(spoon.compiler.builder.AdvancedOptions)
JDTBuilderImpl#spoon.compiler.builder.JDTBuilder sources(spoon.compiler.builder.SourceOptions)
JDTBuilderImpl#java.lang.String[] build()
Options#java.lang.String[] build()
SourceOptions#T sources(java.lang.String)
SourceOptions#T sources(java.lang.String[])
SourceOptions#T sources(java.util.List)
SpoonResourceHelper#boolean isArchive(java.io.File)
SpoonResourceHelper#boolean isFile(java.io.File)
SpoonResourceHelper#java.util.List resources(java.lang.String[])
SpoonResourceHelper#spoon.compiler.SpoonFile createFile(java.io.File)
SpoonResourceHelper#spoon.compiler.SpoonResource createResource(java.io.File)
SpoonResourceHelper#spoon.compiler.SpoonFolder createFolder(java.io.File)
Action#<T> T getChangedValue()
Action#spoon.experimental.modelobs.context.Context getContext()
AddAction#T getChangedValue()
AddAction#T getNewValue()
DeleteAction#T getChangedValue()
DeleteAction#T getRemovedValue()
UpdateAction#T getChangedValue()
UpdateAction#T getNewValue()
UpdateAction#T getOldValue()
Context#spoon.reflect.declaration.CtElement getElementWhereChangeHappens()
Context#spoon.reflect.path.CtRole getChangedProperty()
ListContext#int getPosition()
MapContext#K getKey()
MapContext#java.util.Map getMap()
ActionBasedChangeListenerImpl#void onObjectUpdate(spoon.reflect.declaration.CtElement,spoon.reflect.path.CtRole,spoon.reflect.declaration.CtElement,spoon.reflect.declaration.CtElement)
ActionBasedChangeListenerImpl#void onObjectUpdate(spoon.reflect.declaration.CtElement,spoon.reflect.path.CtRole,java.lang.Object,java.lang.Object)
ActionBasedChangeListenerImpl#void onObjectDelete(spoon.reflect.declaration.CtElement,spoon.reflect.path.CtRole,spoon.reflect.declaration.CtElement)
ActionBasedChangeListenerImpl#void onListAdd(spoon.reflect.declaration.CtElement,spoon.reflect.path.CtRole,java.util.List,spoon.reflect.declaration.CtElement)
ActionBasedChangeListenerImpl#void onListAdd(spoon.reflect.declaration.CtElement,spoon.reflect.path.CtRole,java.util.List,int,spoon.reflect.declaration.CtElement)
ActionBasedChangeListenerImpl#void onListDelete(spoon.reflect.declaration.CtElement,spoon.reflect.path.CtRole,java.util.List,java.util.Collection)
ActionBasedChangeListenerImpl#void onListDelete(spoon.reflect.declaration.CtElement,spoon.reflect.path.CtRole,java.util.List,int,spoon.reflect.declaration.CtElement)
ActionBasedChangeListenerImpl#void onListDeleteAll(spoon.reflect.declaration.CtElement,spoon.reflect.path.CtRole,java.util.List,java.util.List)
ActionBasedChangeListenerImpl#<K,V> void onMapAdd(spoon.reflect.declaration.CtElement,spoon.reflect.path.CtRole,java.util.Map,K,spoon.reflect.declaration.CtElement)
ActionBasedChangeListenerImpl#<K,V> void onMapDeleteAll(spoon.reflect.declaration.CtElement,spoon.reflect.path.CtRole,java.util.Map,java.util.Map)
ActionBasedChangeListenerImpl#void onSetAdd(spoon.reflect.declaration.CtElement,spoon.reflect.path.CtRole,java.util.Set,spoon.reflect.declaration.CtElement)
ActionBasedChangeListenerImpl#void onSetAdd(spoon.reflect.declaration.CtElement,spoon.reflect.path.CtRole,java.util.Set,spoon.reflect.declaration.ModifierKind)
ActionBasedChangeListenerImpl#void onSetDelete(spoon.reflect.declaration.CtElement,spoon.reflect.path.CtRole,java.util.Set,spoon.reflect.declaration.CtElement)
ActionBasedChangeListenerImpl#void onSetDelete(spoon.reflect.declaration.CtElement,spoon.reflect.path.CtRole,java.util.Set,java.util.Collection)
ActionBasedChangeListenerImpl#void onSetDelete(spoon.reflect.declaration.CtElement,spoon.reflect.path.CtRole,java.util.Set,spoon.reflect.declaration.ModifierKind)
ActionBasedChangeListenerImpl#void onSetDeleteAll(spoon.reflect.declaration.CtElement,spoon.reflect.path.CtRole,java.util.Set,java.util.Set)
ActionBasedChangeListenerImpl#void onDelete(spoon.experimental.modelobs.action.DeleteAction)
ActionBasedChangeListenerImpl#void onDeleteAll(spoon.experimental.modelobs.action.DeleteAllAction)
ActionBasedChangeListenerImpl#void onAdd(spoon.experimental.modelobs.action.AddAction)
ActionBasedChangeListenerImpl#void onUpdate(spoon.experimental.modelobs.action.UpdateAction)
ActionBasedChangeListenerImpl#void onAction(spoon.experimental.modelobs.action.Action)
EmptyModelChangeListener#void onObjectUpdate(spoon.reflect.declaration.CtElement,spoon.reflect.path.CtRole,spoon.reflect.declaration.CtElement,spoon.reflect.declaration.CtElement)
EmptyModelChangeListener#void onObjectUpdate(spoon.reflect.declaration.CtElement,spoon.reflect.path.CtRole,java.lang.Object,java.lang.Object)
EmptyModelChangeListener#void onObjectDelete(spoon.reflect.declaration.CtElement,spoon.reflect.path.CtRole,spoon.reflect.declaration.CtElement)
EmptyModelChangeListener#void onListAdd(spoon.reflect.declaration.CtElement,spoon.reflect.path.CtRole,java.util.List,spoon.reflect.declaration.CtElement)
EmptyModelChangeListener#void onListAdd(spoon.reflect.declaration.CtElement,spoon.reflect.path.CtRole,java.util.List,int,spoon.reflect.declaration.CtElement)
EmptyModelChangeListener#void onListDelete(spoon.reflect.declaration.CtElement,spoon.reflect.path.CtRole,java.util.List,java.util.Collection)
EmptyModelChangeListener#void onListDelete(spoon.reflect.declaration.CtElement,spoon.reflect.path.CtRole,java.util.List,int,spoon.reflect.declaration.CtElement)
EmptyModelChangeListener#void onListDeleteAll(spoon.reflect.declaration.CtElement,spoon.reflect.path.CtRole,java.util.List,java.util.List)
EmptyModelChangeListener#<K,V> void onMapAdd(spoon.reflect.declaration.CtElement,spoon.reflect.path.CtRole,java.util.Map,K,spoon.reflect.declaration.CtElement)
EmptyModelChangeListener#<K,V> void onMapDeleteAll(spoon.reflect.declaration.CtElement,spoon.reflect.path.CtRole,java.util.Map,java.util.Map)
EmptyModelChangeListener#void onSetAdd(spoon.reflect.declaration.CtElement,spoon.reflect.path.CtRole,java.util.Set,spoon.reflect.declaration.CtElement)
EmptyModelChangeListener#void onSetAdd(spoon.reflect.declaration.CtElement,spoon.reflect.path.CtRole,java.util.Set,spoon.reflect.declaration.ModifierKind)
EmptyModelChangeListener#void onSetDelete(spoon.reflect.declaration.CtElement,spoon.reflect.path.CtRole,java.util.Set,spoon.reflect.declaration.CtElement)
EmptyModelChangeListener#void onSetDelete(spoon.reflect.declaration.CtElement,spoon.reflect.path.CtRole,java.util.Set,java.util.Collection)
EmptyModelChangeListener#void onSetDelete(spoon.reflect.declaration.CtElement,spoon.reflect.path.CtRole,java.util.Set,spoon.reflect.declaration.ModifierKind)
EmptyModelChangeListener#void onSetDeleteAll(spoon.reflect.declaration.CtElement,spoon.reflect.path.CtRole,java.util.Set,java.util.Set)
CloneBuilderTemplate#<T extends spoon.reflect.declaration.CtElement> T build(spoon.reflect.declaration.CtElement,spoon.reflect.declaration.CtElement)
CloneBuilderTemplate#<T extends spoon.reflect.declaration.CtElement> T build(spoon.generating.clone.CloneBuilderTemplate,spoon.reflect.declaration.CtElement,spoon.reflect.declaration.CtElement)
CloneBuilderTemplate#void setOther(spoon.reflect.declaration.CtElement)
CloneVisitorTemplate#<T extends spoon.reflect.declaration.CtElement> T getClone()
GetterTemplateMatcher#spoon.reflect.declaration.CtElement getElement()
SetterTemplateMatcher#<E extends spoon.reflect.declaration.CtElement> E setElement(boolean)
CtListener#void set(spoon.reflect.declaration.CtElement)
ReplaceScanner#<T> void visitCtMethod(spoon.reflect.declaration.CtMethod)
ReplacementVisitor#void replace(spoon.reflect.declaration.CtElement,spoon.reflect.declaration.CtElement)
ReplacementVisitor#<E extends spoon.reflect.declaration.CtElement> void replace(spoon.reflect.declaration.CtElement,java.util.Collection)
PeekElementTemplate#void statement()
CloneVisitorGenerator#void process()
CtBiScannerGenerator#void process()
ReplacementVisitorGenerator#boolean isToBeProcessed(spoon.reflect.declaration.CtType)
ReplacementVisitorGenerator#void process(spoon.reflect.declaration.CtType)
NameFilter#boolean matches(T extends spoon.reflect.declaration.CtNamedElement)
NameFilter#java.lang.Class getType()
AbstractAnnotationProcessor#java.util.Set getConsumedAnnotationTypes()
AbstractAnnotationProcessor#java.util.Set getProcessedAnnotationTypes()
AbstractAnnotationProcessor#boolean inferConsumedAnnotationType()
AbstractAnnotationProcessor#boolean isToBeProcessed(E extends spoon.reflect.declaration.CtElement)
AbstractAnnotationProcessor#void process(E extends spoon.reflect.declaration.CtElement)
AbstractAnnotationProcessor#boolean shoudBeConsumed(spoon.reflect.declaration.CtAnnotation)
AbstractManualProcessor#spoon.compiler.Environment getEnvironment()
AbstractManualProcessor#spoon.reflect.factory.Factory getFactory()
AbstractManualProcessor#java.util.Set getProcessedElementTypes()
AbstractManualProcessor#spoon.processing.TraversalStrategy getTraversalStrategy()
AbstractManualProcessor#void init()
AbstractManualProcessor#boolean isPrivileged()
AbstractManualProcessor#boolean isToBeProcessed(spoon.reflect.declaration.CtElement)
AbstractManualProcessor#void process(spoon.reflect.declaration.CtElement)
AbstractManualProcessor#void processingDone()
AbstractManualProcessor#void setFactory(spoon.reflect.factory.Factory)
AbstractManualProcessor#void initProperties(spoon.processing.ProcessorProperties)
AbstractManualProcessor#void interrupt()
AbstractProblemFixer#spoon.reflect.factory.Factory getFactory()
AbstractProblemFixer#void setFactory(spoon.reflect.factory.Factory)
AbstractProcessor#spoon.compiler.Environment getEnvironment()
AbstractProcessor#spoon.reflect.factory.Factory getFactory()
AbstractProcessor#java.util.Set getProcessedElementTypes()
AbstractProcessor#spoon.processing.ProcessorProperties loadProperties()
AbstractProcessor#spoon.processing.TraversalStrategy getTraversalStrategy()
AbstractProcessor#void init()
AbstractProcessor#boolean isToBeProcessed(E extends spoon.reflect.declaration.CtElement)
AbstractProcessor#void initProperties(spoon.processing.ProcessorProperties)
AbstractProcessor#void process()
AbstractProcessor#void processingDone()
AbstractProcessor#void setFactory(spoon.reflect.factory.Factory)
AbstractProcessor#void interrupt()
ProcessorPropertiesImpl#<T> T get(java.lang.Class,java.lang.String)
ProcessorPropertiesImpl#void set(java.lang.String,java.lang.Object)
ProcessorPropertiesImpl#java.lang.String getProcessorName()
SpoonTagger#void process()
AbstractRenameRefactoring#void refactor()
AbstractRenameRefactoring#T getTarget()
AbstractRenameRefactoring#spoon.refactoring.AbstractRenameRefactoring setTarget(T extends spoon.reflect.declaration.CtNamedElement)
AbstractRenameRefactoring#java.lang.String getNewName()
AbstractRenameRefactoring#spoon.refactoring.AbstractRenameRefactoring setNewName(java.lang.String)
CtParameterRemoveRefactoring#spoon.reflect.declaration.CtParameter getTarget()
CtParameterRemoveRefactoring#spoon.refactoring.CtParameterRemoveRefactoring setTarget(spoon.reflect.declaration.CtParameter)
CtParameterRemoveRefactoring#java.util.List getTargetExecutables()
CtParameterRemoveRefactoring#java.util.List getTargetInvocations()
CtParameterRemoveRefactoring#void refactor()
Refactoring#void changeTypeName(spoon.reflect.declaration.CtType,java.lang.String)
Refactoring#void changeLocalVariableName(spoon.reflect.code.CtLocalVariable,java.lang.String)
NoSourcePosition#java.io.File getFile()
NoSourcePosition#spoon.reflect.cu.CompilationUnit getCompilationUnit()
NoSourcePosition#int getLine()
NoSourcePosition#int getEndLine()
NoSourcePosition#int getColumn()
NoSourcePosition#int getEndColumn()
NoSourcePosition#int getSourceEnd()
NoSourcePosition#int getSourceStart()
NoSourcePosition#java.lang.String toString()
ModifierKind#java.lang.String toString()
AnnotationFactory#<T extends java.lang.annotation.Annotation> spoon.reflect.declaration.CtAnnotationType create(spoon.reflect.declaration.CtPackage,java.lang.String)
AnnotationFactory#spoon.reflect.declaration.CtAnnotationType create(java.lang.String)
AnnotationFactory#<T extends java.lang.annotation.Annotation> spoon.reflect.declaration.CtType getAnnotationType(java.lang.String)
AnnotationFactory#<A extends java.lang.annotation.Annotation> spoon.reflect.declaration.CtAnnotation annotate(spoon.reflect.declaration.CtElement,java.lang.Class,java.lang.String,java.lang.Object)
AnnotationFactory#<A extends java.lang.annotation.Annotation> spoon.reflect.declaration.CtAnnotation annotate(spoon.reflect.declaration.CtElement,spoon.reflect.reference.CtTypeReference,java.lang.String,java.lang.Object)
AnnotationFactory#<A extends java.lang.annotation.Annotation> spoon.reflect.declaration.CtAnnotation annotate(spoon.reflect.declaration.CtElement,java.lang.Class)
AnnotationFactory#<A extends java.lang.annotation.Annotation> spoon.reflect.declaration.CtAnnotation annotate(spoon.reflect.declaration.CtElement,spoon.reflect.reference.CtTypeReference)
ClassFactory#<T> spoon.reflect.declaration.CtClass create(spoon.reflect.declaration.CtClass,java.lang.String)
ClassFactory#<T> spoon.reflect.declaration.CtClass create(spoon.reflect.declaration.CtPackage,java.lang.String)
ClassFactory#<T> spoon.reflect.declaration.CtClass create(java.lang.String)
ClassFactory#<T> spoon.reflect.declaration.CtClass get(java.lang.Class)
ClassFactory#<T> spoon.reflect.declaration.CtClass get(java.lang.String)
CodeFactory#<T> spoon.reflect.code.CtBinaryOperator createBinaryOperator(spoon.reflect.code.CtExpression,spoon.reflect.code.CtExpression,spoon.reflect.code.BinaryOperatorKind)
CodeFactory#<T> spoon.reflect.code.CtTypeAccess createTypeAccess(spoon.reflect.reference.CtTypeReference)
CodeFactory#<T> spoon.reflect.code.CtTypeAccess createTypeAccess(spoon.reflect.reference.CtTypeReference,boolean)
CodeFactory#<T> spoon.reflect.code.CtTypeAccess createTypeAccessWithoutCloningReference(spoon.reflect.reference.CtTypeReference)
CodeFactory#<T> spoon.reflect.code.CtFieldAccess createClassAccess(spoon.reflect.reference.CtTypeReference)
CodeFactory#<T> spoon.reflect.code.CtConstructorCall createConstructorCall(spoon.reflect.reference.CtTypeReference,spoon.reflect.code.CtExpression[])
CodeFactory#<T> spoon.reflect.code.CtNewClass createNewClass(spoon.reflect.reference.CtTypeReference,spoon.reflect.declaration.CtClass,spoon.reflect.code.CtExpression[])
CodeFactory#<T> spoon.reflect.code.CtInvocation createInvocation(spoon.reflect.code.CtExpression,spoon.reflect.reference.CtExecutableReference,spoon.reflect.code.CtExpression[])
CodeFactory#<T> spoon.reflect.code.CtInvocation createInvocation(spoon.reflect.code.CtExpression,spoon.reflect.reference.CtExecutableReference,java.util.List)
CodeFactory#<T> spoon.reflect.code.CtLiteral createLiteral(T)
CodeFactory#<T> spoon.reflect.code.CtNewArray createLiteralArray(T[])
CodeFactory#<T> spoon.reflect.code.CtLocalVariable createLocalVariable(spoon.reflect.reference.CtTypeReference,java.lang.String,spoon.reflect.code.CtExpression)
CodeFactory#<T> spoon.reflect.reference.CtLocalVariableReference createLocalVariableReference(spoon.reflect.code.CtLocalVariable)
CodeFactory#<T> spoon.reflect.reference.CtLocalVariableReference createLocalVariableReference(spoon.reflect.reference.CtTypeReference,java.lang.String)
CodeFactory#<T> spoon.reflect.code.CtCatchVariable createCatchVariable(spoon.reflect.reference.CtTypeReference,java.lang.String,spoon.reflect.declaration.ModifierKind[])
CodeFactory#<T> spoon.reflect.reference.CtCatchVariableReference createCatchVariableReference(spoon.reflect.code.CtCatchVariable)
CodeFactory#<R> spoon.reflect.code.CtStatementList createStatementList(spoon.reflect.code.CtBlock)
CodeFactory#<T> spoon.reflect.code.CtThisAccess createThisAccess(spoon.reflect.reference.CtTypeReference)
CodeFactory#<T> spoon.reflect.code.CtThisAccess createThisAccess(spoon.reflect.reference.CtTypeReference,boolean)
CodeFactory#<T> spoon.reflect.code.CtVariableAccess createVariableRead(spoon.reflect.reference.CtVariableReference,boolean)
CodeFactory#java.util.List createVariableReads(java.util.List)
CodeFactory#<A,T extends A> spoon.reflect.code.CtAssignment createVariableAssignment(spoon.reflect.reference.CtVariableReference,boolean,spoon.reflect.code.CtExpression)
CodeFactory#<T> spoon.reflect.code.CtStatementList createVariableAssignments(java.util.List,java.util.List)
CodeFactory#<T> spoon.reflect.declaration.CtField createCtField(java.lang.String,spoon.reflect.reference.CtTypeReference,java.lang.String,spoon.reflect.declaration.ModifierKind[])
CodeFactory#<T extends spoon.reflect.code.CtStatement> spoon.reflect.code.CtBlock createCtBlock(T extends spoon.reflect.code.CtStatement)
CodeFactory#<T extends spoon.reflect.code.CtStatement> spoon.reflect.code.CtBlock getOrCreateCtBlock(T extends spoon.reflect.code.CtStatement)
CodeFactory#spoon.reflect.code.CtThrow createCtThrow(java.lang.String)
CodeFactory#spoon.reflect.code.CtCatch createCtCatch(java.lang.String,java.lang.Class,spoon.reflect.code.CtBlock)
CodeFactory#<T> spoon.reflect.reference.CtTypeReference createCtTypeReference(java.lang.Class)
CodeFactory#spoon.reflect.reference.CtPackageReference createCtPackageReference(java.lang.Package)
CodeFactory#<A extends java.lang.annotation.Annotation> spoon.reflect.declaration.CtAnnotation createAnnotation(spoon.reflect.reference.CtTypeReference)
CodeFactory#<R extends spoon.reflect.reference.CtReference,E extends spoon.reflect.declaration.CtNamedElement> java.util.List getReferences(java.util.List)
CodeFactory#java.util.Set modifiers(spoon.reflect.declaration.ModifierKind[])
CodeFactory#<T> spoon.reflect.code.CtCodeSnippetExpression createCodeSnippetExpression(java.lang.String)
CodeFactory#spoon.reflect.code.CtCodeSnippetStatement createCodeSnippetStatement(java.lang.String)
CodeFactory#spoon.reflect.code.CtComment createComment(java.lang.String,spoon.reflect.code.CtComment$CommentType)
CodeFactory#spoon.reflect.code.CtComment createInlineComment(java.lang.String)
CodeFactory#spoon.reflect.code.CtJavaDocTag createJavaDocTag(java.lang.String,spoon.reflect.code.CtJavaDocTag$TagType)
CompilationUnitFactory#java.util.Map getMap()
CompilationUnitFactory#spoon.reflect.cu.CompilationUnit create()
CompilationUnitFactory#spoon.reflect.cu.CompilationUnit getOrCreate(java.lang.String)
CompilationUnitFactory#spoon.reflect.cu.CompilationUnit removeFromCache(java.lang.String)
ConstructorFactory#<T> spoon.reflect.declaration.CtConstructor create(spoon.reflect.declaration.CtClass,spoon.reflect.declaration.CtConstructor)
ConstructorFactory#<T> spoon.reflect.declaration.CtConstructor create(spoon.reflect.declaration.CtClass,spoon.reflect.declaration.CtMethod)
ConstructorFactory#<T> spoon.reflect.declaration.CtConstructor create(spoon.reflect.declaration.CtClass,java.util.Set,java.util.List,java.util.Set)
ConstructorFactory#<T> spoon.reflect.declaration.CtConstructor createDefault(spoon.reflect.declaration.CtClass)
ConstructorFactory#<T> spoon.reflect.declaration.CtConstructor create(spoon.reflect.declaration.CtClass,java.util.Set,java.util.List,java.util.Set,spoon.reflect.code.CtBlock)
ConstructorFactory#<T> spoon.reflect.reference.CtExecutableReference createReference(spoon.reflect.declaration.CtConstructor)
ConstructorFactory#<T> spoon.reflect.reference.CtExecutableReference createReference(java.lang.reflect.Constructor)
ConstructorFactory#<T> spoon.reflect.reference.CtExecutableReference createReference(spoon.reflect.reference.CtTypeReference,spoon.reflect.code.CtExpression[])
EnumFactory#spoon.reflect.declaration.CtEnum create(spoon.reflect.declaration.CtPackage,java.lang.String)
EnumFactory#spoon.reflect.declaration.CtEnum create(java.lang.String)
EnumFactory#spoon.reflect.declaration.CtEnum get(java.lang.String)
EnumFactory#<T extends java.lang.Enum> spoon.reflect.declaration.CtEnum getEnum(java.lang.Class)
EvalFactory#spoon.reflect.eval.PartialEvaluator createPartialEvaluator()
ExecutableFactory#spoon.reflect.declaration.CtAnonymousExecutable createAnonymous(spoon.reflect.declaration.CtClass,spoon.reflect.code.CtBlock)
ExecutableFactory#<T> spoon.reflect.declaration.CtParameter createParameter(spoon.reflect.declaration.CtExecutable,spoon.reflect.reference.CtTypeReference,java.lang.String)
ExecutableFactory#<T> spoon.reflect.reference.CtParameterReference createParameterReference(spoon.reflect.declaration.CtParameter)
ExecutableFactory#<T> spoon.reflect.reference.CtExecutableReference createReference(spoon.reflect.declaration.CtExecutable)
ExecutableFactory#<T> spoon.reflect.reference.CtExecutableReference createReference(spoon.reflect.reference.CtTypeReference,spoon.reflect.reference.CtTypeReference,java.lang.String,spoon.reflect.reference.CtTypeReference[])
ExecutableFactory#<T> spoon.reflect.reference.CtExecutableReference createReference(spoon.reflect.reference.CtTypeReference,boolean,spoon.reflect.reference.CtTypeReference,java.lang.String,spoon.reflect.reference.CtTypeReference[])
ExecutableFactory#<T> spoon.reflect.reference.CtExecutableReference createReference(spoon.reflect.reference.CtTypeReference,boolean,spoon.reflect.reference.CtTypeReference,java.lang.String,java.util.List)
ExecutableFactory#<T> spoon.reflect.reference.CtExecutableReference createReference(spoon.reflect.reference.CtTypeReference,spoon.reflect.reference.CtTypeReference,java.lang.String,java.util.List)
ExecutableFactory#<T> spoon.reflect.reference.CtExecutableReference createReference(java.lang.String)
FactoryImpl#spoon.reflect.factory.Factory getParentFactory()
FactoryImpl#spoon.reflect.factory.AnnotationFactory Annotation()
FactoryImpl#spoon.reflect.factory.ClassFactory Class()
FactoryImpl#spoon.reflect.factory.CodeFactory Code()
FactoryImpl#spoon.reflect.factory.ConstructorFactory Constructor()
FactoryImpl#spoon.reflect.factory.CoreFactory Core()
FactoryImpl#spoon.reflect.factory.EnumFactory Enum()
FactoryImpl#spoon.compiler.Environment getEnvironment()
FactoryImpl#spoon.reflect.factory.ExecutableFactory Executable()
FactoryImpl#spoon.reflect.factory.EvalFactory Eval()
FactoryImpl#spoon.reflect.factory.FieldFactory Field()
FactoryImpl#spoon.reflect.factory.InterfaceFactory Interface()
FactoryImpl#spoon.reflect.factory.MethodFactory Method()
FactoryImpl#spoon.reflect.factory.PackageFactory Package()
FactoryImpl#spoon.reflect.factory.CompilationUnitFactory CompilationUnit()
FactoryImpl#spoon.reflect.factory.TypeFactory Type()
FactoryImpl#spoon.reflect.factory.QueryFactory Query()
FactoryImpl#java.lang.String dedup(java.lang.String)
FactoryImpl#spoon.reflect.CtModel getModel()
FactoryImpl#<A extends java.lang.annotation.Annotation> spoon.reflect.declaration.CtAnnotation createAnnotation(spoon.reflect.reference.CtTypeReference)
FactoryImpl#<A,T extends A> spoon.reflect.code.CtAssignment createVariableAssignment(spoon.reflect.reference.CtVariableReference,boolean,spoon.reflect.code.CtExpression)
FactoryImpl#<R> spoon.reflect.code.CtStatementList createStatementList(spoon.reflect.code.CtBlock)
FactoryImpl#<T extends spoon.reflect.code.CtStatement> spoon.reflect.code.CtBlock createCtBlock(T extends spoon.reflect.code.CtStatement)
FactoryImpl#<T> spoon.reflect.code.CtBinaryOperator createBinaryOperator(spoon.reflect.code.CtExpression,spoon.reflect.code.CtExpression,spoon.reflect.code.BinaryOperatorKind)
FactoryImpl#<T> spoon.reflect.code.CtCatchVariable createCatchVariable(spoon.reflect.reference.CtTypeReference,java.lang.String,spoon.reflect.declaration.ModifierKind[])
FactoryImpl#<T> spoon.reflect.code.CtCodeSnippetExpression createCodeSnippetExpression(java.lang.String)
FactoryImpl#<T> spoon.reflect.code.CtConstructorCall createConstructorCall(spoon.reflect.reference.CtTypeReference,spoon.reflect.code.CtExpression[])
FactoryImpl#<T> spoon.reflect.code.CtFieldAccess createClassAccess(spoon.reflect.reference.CtTypeReference)
FactoryImpl#<T> spoon.reflect.code.CtInvocation createInvocation(spoon.reflect.code.CtExpression,spoon.reflect.reference.CtExecutableReference,java.util.List)
FactoryImpl#<T> spoon.reflect.code.CtInvocation createInvocation(spoon.reflect.code.CtExpression,spoon.reflect.reference.CtExecutableReference,spoon.reflect.code.CtExpression[])
FactoryImpl#<T> spoon.reflect.code.CtLiteral createLiteral(T)
FactoryImpl#<T> spoon.reflect.code.CtLocalVariable createLocalVariable(spoon.reflect.reference.CtTypeReference,java.lang.String,spoon.reflect.code.CtExpression)
FactoryImpl#<T> spoon.reflect.code.CtNewArray createLiteralArray(T[])
FactoryImpl#<T> spoon.reflect.code.CtNewClass createNewClass(spoon.reflect.reference.CtTypeReference,spoon.reflect.declaration.CtClass,spoon.reflect.code.CtExpression[])
FactoryImpl#<T> spoon.reflect.code.CtStatementList createVariableAssignments(java.util.List,java.util.List)
FactoryImpl#<T> spoon.reflect.code.CtThisAccess createThisAccess(spoon.reflect.reference.CtTypeReference)
FactoryImpl#<T> spoon.reflect.code.CtThisAccess createThisAccess(spoon.reflect.reference.CtTypeReference,boolean)
FactoryImpl#<T> spoon.reflect.code.CtTypeAccess createTypeAccess(spoon.reflect.reference.CtTypeReference)
FactoryImpl#<T> spoon.reflect.code.CtTypeAccess createTypeAccess(spoon.reflect.reference.CtTypeReference,boolean)
FactoryImpl#<T> spoon.reflect.code.CtTypeAccess createTypeAccessWithoutCloningReference(spoon.reflect.reference.CtTypeReference)
FactoryImpl#<T> spoon.reflect.code.CtVariableAccess createVariableRead(spoon.reflect.reference.CtVariableReference,boolean)
FactoryImpl#<T> spoon.reflect.declaration.CtField createCtField(java.lang.String,spoon.reflect.reference.CtTypeReference,java.lang.String,spoon.reflect.declaration.ModifierKind[])
FactoryImpl#<T> spoon.reflect.reference.CtCatchVariableReference createCatchVariableReference(spoon.reflect.code.CtCatchVariable)
FactoryImpl#<T> spoon.reflect.reference.CtLocalVariableReference createLocalVariableReference(spoon.reflect.code.CtLocalVariable)
FactoryImpl#<T> spoon.reflect.reference.CtLocalVariableReference createLocalVariableReference(spoon.reflect.reference.CtTypeReference,java.lang.String)
FactoryImpl#<T> spoon.reflect.reference.CtTypeReference createCtTypeReference(java.lang.Class)
FactoryImpl#java.util.List createVariableReads(java.util.List)
FactoryImpl#spoon.reflect.code.CtCatch createCtCatch(java.lang.String,java.lang.Class,spoon.reflect.code.CtBlock)
FactoryImpl#spoon.reflect.code.CtCodeSnippetStatement createCodeSnippetStatement(java.lang.String)
FactoryImpl#spoon.reflect.code.CtComment createComment(java.lang.String,spoon.reflect.code.CtComment$CommentType)
FactoryImpl#spoon.reflect.code.CtComment createInlineComment(java.lang.String)
FactoryImpl#spoon.reflect.code.CtJavaDocTag createJavaDocTag(java.lang.String,spoon.reflect.code.CtJavaDocTag$TagType)
FactoryImpl#spoon.reflect.code.CtThrow createCtThrow(java.lang.String)
FactoryImpl#spoon.reflect.reference.CtPackageReference createCtPackageReference(java.lang.Package)
FactoryImpl#<T> spoon.reflect.declaration.CtConstructor createDefault(spoon.reflect.declaration.CtClass)
FactoryImpl#<A extends java.lang.annotation.Annotation> spoon.reflect.declaration.CtAnnotation createAnnotation()
FactoryImpl#<R> spoon.reflect.code.CtBlock createBlock()
FactoryImpl#<R> spoon.reflect.code.CtReturn createReturn()
FactoryImpl#<R> spoon.reflect.code.CtStatementList createStatementList()
FactoryImpl#<S> spoon.reflect.code.CtCase createCase()
FactoryImpl#<S> spoon.reflect.code.CtSwitch createSwitch()
FactoryImpl#<T extends java.lang.Enum> spoon.reflect.declaration.CtEnum createEnum()
FactoryImpl#<T extends java.lang.annotation.Annotation> spoon.reflect.declaration.CtAnnotationType createAnnotationType()
FactoryImpl#<T,A extends T> spoon.reflect.code.CtAssignment createAssignment()
FactoryImpl#<T,A extends T> spoon.reflect.code.CtOperatorAssignment createOperatorAssignment()
FactoryImpl#<T,E extends spoon.reflect.code.CtExpression> spoon.reflect.code.CtExecutableReferenceExpression createExecutableReferenceExpression()
FactoryImpl#<T> spoon.reflect.code.CtAnnotationFieldAccess createAnnotationFieldAccess()
FactoryImpl#<T> spoon.reflect.code.CtArrayRead createArrayRead()
FactoryImpl#<T> spoon.reflect.code.CtArrayWrite createArrayWrite()
FactoryImpl#<T> spoon.reflect.code.CtAssert createAssert()
FactoryImpl#<T> spoon.reflect.code.CtBinaryOperator createBinaryOperator()
FactoryImpl#<T> spoon.reflect.code.CtCatchVariable createCatchVariable()
FactoryImpl#<T> spoon.reflect.code.CtCodeSnippetExpression createCodeSnippetExpression()
FactoryImpl#<T> spoon.reflect.code.CtConditional createConditional()
FactoryImpl#<T> spoon.reflect.code.CtConstructorCall createConstructorCall()
FactoryImpl#<T> spoon.reflect.code.CtFieldRead createFieldRead()
FactoryImpl#<T> spoon.reflect.code.CtFieldWrite createFieldWrite()
FactoryImpl#<T> spoon.reflect.code.CtInvocation createInvocation()
FactoryImpl#<T> spoon.reflect.code.CtLambda createLambda()
FactoryImpl#<T> spoon.reflect.code.CtLiteral createLiteral()
FactoryImpl#<T> spoon.reflect.code.CtLocalVariable createLocalVariable()
FactoryImpl#<T> spoon.reflect.code.CtNewArray createNewArray()
FactoryImpl#<T> spoon.reflect.code.CtNewClass createNewClass()
FactoryImpl#<T> spoon.reflect.code.CtSuperAccess createSuperAccess()
FactoryImpl#<T> spoon.reflect.code.CtThisAccess createThisAccess()
FactoryImpl#<T> spoon.reflect.code.CtTypeAccess createTypeAccess()
FactoryImpl#<T> spoon.reflect.code.CtUnaryOperator createUnaryOperator()
FactoryImpl#<T> spoon.reflect.code.CtVariableRead createVariableRead()
FactoryImpl#<T> spoon.reflect.code.CtVariableWrite createVariableWrite()
FactoryImpl#<T> spoon.reflect.declaration.CtAnnotationMethod createAnnotationMethod()
FactoryImpl#<T> spoon.reflect.declaration.CtClass createClass()
FactoryImpl#<T> spoon.reflect.declaration.CtConstructor createConstructor()
FactoryImpl#<T> spoon.reflect.declaration.CtEnumValue createEnumValue()
FactoryImpl#<T> spoon.reflect.declaration.CtField createField()
FactoryImpl#<T> spoon.reflect.declaration.CtInterface createInterface()
FactoryImpl#<T> spoon.reflect.declaration.CtMethod createMethod()
FactoryImpl#<T> spoon.reflect.declaration.CtParameter createParameter()
FactoryImpl#<T> spoon.reflect.reference.CtArrayTypeReference createArrayTypeReference()
FactoryImpl#<T> spoon.reflect.reference.CtCatchVariableReference createCatchVariableReference()
FactoryImpl#<T> spoon.reflect.reference.CtExecutableReference createExecutableReference()
FactoryImpl#<T> spoon.reflect.reference.CtFieldReference createFieldReference()
FactoryImpl#<T> spoon.reflect.reference.CtIntersectionTypeReference createIntersectionTypeReference()
FactoryImpl#<T> spoon.reflect.reference.CtLocalVariableReference createLocalVariableReference()
FactoryImpl#<T> spoon.reflect.reference.CtParameterReference createParameterReference()
FactoryImpl#<T> spoon.reflect.reference.CtTypeReference createTypeReference()
FactoryImpl#<T> spoon.reflect.reference.CtUnboundVariableReference createUnboundVariableReference()
FactoryImpl#spoon.reflect.code.CtBreak createBreak()
FactoryImpl#spoon.reflect.code.CtCatch createCatch()
FactoryImpl#spoon.reflect.code.CtCodeSnippetStatement createCodeSnippetStatement()
FactoryImpl#spoon.reflect.code.CtComment createComment()
FactoryImpl#spoon.reflect.code.CtContinue createContinue()
FactoryImpl#spoon.reflect.code.CtDo createDo()
FactoryImpl#spoon.reflect.code.CtFor createFor()
FactoryImpl#spoon.reflect.code.CtForEach createForEach()
FactoryImpl#spoon.reflect.code.CtIf createIf()
FactoryImpl#spoon.reflect.code.CtSynchronized createSynchronized()
FactoryImpl#spoon.reflect.code.CtThrow createThrow()
FactoryImpl#spoon.reflect.code.CtTry createTry()
FactoryImpl#spoon.reflect.code.CtTryWithResource createTryWithResource()
FactoryImpl#spoon.reflect.code.CtWhile createWhile()
FactoryImpl#spoon.reflect.cu.CompilationUnit createCompilationUnit()
FactoryImpl#spoon.reflect.cu.SourcePosition createSourcePosition(spoon.reflect.cu.CompilationUnit,int,int,int[])
FactoryImpl#spoon.reflect.cu.position.BodyHolderSourcePosition createBodyHolderSourcePosition(spoon.reflect.cu.CompilationUnit,int,int,int,int,int,int,int,int,int[])
FactoryImpl#spoon.reflect.cu.position.DeclarationSourcePosition createDeclarationSourcePosition(spoon.reflect.cu.CompilationUnit,int,int,int,int,int,int,int[])
FactoryImpl#spoon.reflect.declaration.CtAnonymousExecutable createAnonymousExecutable()
FactoryImpl#spoon.reflect.declaration.CtPackage createPackage()
FactoryImpl#spoon.reflect.declaration.CtTypeParameter createTypeParameter()
FactoryImpl#spoon.reflect.reference.CtPackageReference createPackageReference()
FactoryImpl#spoon.reflect.reference.CtTypeParameterReference createTypeParameterReference()
FactoryImpl#spoon.reflect.reference.CtWildcardReference createWildcardReference()
FactoryImpl#spoon.reflect.eval.PartialEvaluator createPartialEvaluator()
FactoryImpl#<T> spoon.reflect.declaration.CtParameter createParameter(spoon.reflect.declaration.CtExecutable,spoon.reflect.reference.CtTypeReference,java.lang.String)
FactoryImpl#<T> spoon.reflect.reference.CtParameterReference createParameterReference(spoon.reflect.declaration.CtParameter)
FactoryImpl#spoon.reflect.declaration.CtAnonymousExecutable createAnonymous(spoon.reflect.declaration.CtClass,spoon.reflect.code.CtBlock)
FactoryImpl#<T> spoon.reflect.reference.CtArrayTypeReference createArrayReference(java.lang.String)
FactoryImpl#<T> spoon.reflect.reference.CtArrayTypeReference createArrayReference(spoon.reflect.declaration.CtType)
FactoryImpl#<T> spoon.reflect.reference.CtArrayTypeReference createArrayReference(spoon.reflect.reference.CtTypeReference)
FactoryImpl#<T> spoon.reflect.reference.CtIntersectionTypeReference createIntersectionTypeReferenceWithBounds(java.util.List)
FactoryImpl#spoon.support.visitor.GenericTypeAdapter createTypeAdapter(spoon.reflect.declaration.CtFormalTypeDeclarer)
FactoryImpl#java.util.List createReferences(java.util.List)
FactoryImpl#spoon.reflect.reference.CtArrayTypeReference createArrayReference(spoon.reflect.reference.CtTypeReference,int)
FactoryImpl#spoon.reflect.reference.CtTypeParameterReference createTypeParameterReference(java.lang.String)
FactoryImpl#spoon.reflect.visitor.chain.CtQuery createQuery()
FactoryImpl#spoon.reflect.visitor.chain.CtQuery createQuery(java.lang.Object)
FactoryImpl#spoon.reflect.declaration.CtAnnotationType createAnnotationType(java.lang.String)
FactoryImpl#spoon.reflect.declaration.CtAnnotationType createAnnotationType(spoon.reflect.declaration.CtPackage,java.lang.String)
FactoryImpl#spoon.reflect.declaration.CtClass createClass(java.lang.String)
FactoryImpl#spoon.reflect.declaration.CtClass createClass(spoon.reflect.declaration.CtClass,java.lang.String)
FactoryImpl#spoon.reflect.declaration.CtClass createClass(spoon.reflect.declaration.CtPackage,java.lang.String)
FactoryImpl#spoon.reflect.declaration.CtConstructor createConstructor(spoon.reflect.declaration.CtClass,spoon.reflect.declaration.CtConstructor)
FactoryImpl#spoon.reflect.declaration.CtConstructor createConstructor(spoon.reflect.declaration.CtClass,spoon.reflect.declaration.CtMethod)
FactoryImpl#spoon.reflect.declaration.CtConstructor createConstructor(spoon.reflect.declaration.CtClass,java.util.Set,java.util.List,java.util.Set)
FactoryImpl#spoon.reflect.declaration.CtConstructor createConstructor(spoon.reflect.declaration.CtClass,java.util.Set,java.util.List,java.util.Set,spoon.reflect.code.CtBlock)
FactoryImpl#spoon.reflect.declaration.CtEnum createEnum(java.lang.String)
FactoryImpl#spoon.reflect.declaration.CtEnum createEnum(spoon.reflect.declaration.CtPackage,java.lang.String)
FactoryImpl#spoon.reflect.declaration.CtField createField(spoon.reflect.declaration.CtType,java.util.Set,spoon.reflect.reference.CtTypeReference,java.lang.String)
FactoryImpl#spoon.reflect.declaration.CtField createField(spoon.reflect.declaration.CtType,java.util.Set,spoon.reflect.reference.CtTypeReference,java.lang.String,spoon.reflect.code.CtExpression)
FactoryImpl#spoon.reflect.declaration.CtField createField(spoon.reflect.declaration.CtType,spoon.reflect.declaration.CtField)
FactoryImpl#spoon.reflect.declaration.CtInterface createInterface(spoon.reflect.declaration.CtPackage,java.lang.String)
FactoryImpl#spoon.reflect.declaration.CtInterface createInterface(spoon.reflect.declaration.CtType,java.lang.String)
FactoryImpl#spoon.reflect.declaration.CtInterface createInterface(java.lang.String)
FactoryImpl#spoon.reflect.declaration.CtMethod createMethod(spoon.reflect.declaration.CtClass,java.util.Set,spoon.reflect.reference.CtTypeReference,java.lang.String,java.util.List,java.util.Set,spoon.reflect.code.CtBlock)
FactoryImpl#spoon.reflect.declaration.CtMethod createMethod(spoon.reflect.declaration.CtType,spoon.reflect.declaration.CtMethod,boolean)
FactoryImpl#spoon.reflect.declaration.CtMethod createMethod(spoon.reflect.declaration.CtType,java.util.Set,spoon.reflect.reference.CtTypeReference,java.lang.String,java.util.List,java.util.Set)
FactoryImpl#spoon.reflect.declaration.CtPackage createPackage(spoon.reflect.declaration.CtPackage,java.lang.String)
FieldFactory#<T> spoon.reflect.declaration.CtField create(spoon.reflect.declaration.CtType,java.util.Set,spoon.reflect.reference.CtTypeReference,java.lang.String)
FieldFactory#<T> spoon.reflect.declaration.CtField create(spoon.reflect.declaration.CtType,java.util.Set,spoon.reflect.reference.CtTypeReference,java.lang.String,spoon.reflect.code.CtExpression)
FieldFactory#<T> spoon.reflect.declaration.CtField create(spoon.reflect.declaration.CtType,spoon.reflect.declaration.CtField)
FieldFactory#<T> spoon.reflect.reference.CtFieldReference createReference(spoon.reflect.declaration.CtField)
FieldFactory#<T> spoon.reflect.reference.CtFieldReference createReference(spoon.reflect.reference.CtTypeReference,spoon.reflect.reference.CtTypeReference,java.lang.String)
FieldFactory#<T> spoon.reflect.reference.CtFieldReference createReference(java.lang.reflect.Field)
FieldFactory#<T> spoon.reflect.reference.CtFieldReference createReference(java.lang.String)
InterfaceFactory#<T> spoon.reflect.declaration.CtInterface create(spoon.reflect.declaration.CtPackage,java.lang.String)
InterfaceFactory#<T> spoon.reflect.declaration.CtInterface create(spoon.reflect.declaration.CtType,java.lang.String)
InterfaceFactory#<T> spoon.reflect.declaration.CtInterface create(java.lang.String)
InterfaceFactory#<T> spoon.reflect.declaration.CtInterface get(java.lang.String)
InterfaceFactory#<T> spoon.reflect.declaration.CtInterface get(java.lang.Class)
MethodFactory#<R,B extends R> spoon.reflect.declaration.CtMethod create(spoon.reflect.declaration.CtClass,java.util.Set,spoon.reflect.reference.CtTypeReference,java.lang.String,java.util.List,java.util.Set,spoon.reflect.code.CtBlock)
MethodFactory#<T> spoon.reflect.declaration.CtMethod create(spoon.reflect.declaration.CtType,spoon.reflect.declaration.CtMethod,boolean)
MethodFactory#<T> spoon.reflect.declaration.CtMethod create(spoon.reflect.declaration.CtType,java.util.Set,spoon.reflect.reference.CtTypeReference,java.lang.String,java.util.List,java.util.Set)
MethodFactory#<T> spoon.reflect.reference.CtExecutableReference createReference(spoon.reflect.declaration.CtMethod)
MethodFactory#<T> spoon.reflect.reference.CtExecutableReference createReference(java.lang.reflect.Method)
MethodFactory#java.util.Collection getMainMethods()
PackageFactory#spoon.reflect.reference.CtPackageReference createReference(spoon.reflect.declaration.CtPackage)
PackageFactory#spoon.reflect.reference.CtPackageReference createReference(java.lang.Package)
PackageFactory#spoon.reflect.reference.CtPackageReference topLevel()
PackageFactory#spoon.reflect.reference.CtPackageReference createReference(java.lang.String)
PackageFactory#spoon.reflect.declaration.CtPackage create(spoon.reflect.declaration.CtPackage,java.lang.String)
PackageFactory#spoon.reflect.declaration.CtPackage getOrCreate(java.lang.String)
PackageFactory#spoon.reflect.declaration.CtPackage get(java.lang.String)
PackageFactory#java.util.Collection getAll()
PackageFactory#spoon.reflect.declaration.CtPackage getRootPackage()
QueryFactory#spoon.reflect.visitor.chain.CtQuery createQuery()
QueryFactory#spoon.reflect.visitor.chain.CtQuery createQuery(java.lang.Object)
TypeFactory#spoon.reflect.reference.CtTypeReference nullType()
TypeFactory#spoon.reflect.reference.CtTypeReference voidType()
TypeFactory#spoon.reflect.reference.CtTypeReference voidPrimitiveType()
TypeFactory#spoon.reflect.reference.CtTypeReference stringType()
TypeFactory#spoon.reflect.reference.CtTypeReference booleanType()
TypeFactory#spoon.reflect.reference.CtTypeReference booleanPrimitiveType()
TypeFactory#spoon.reflect.reference.CtTypeReference byteType()
TypeFactory#spoon.reflect.reference.CtTypeReference bytePrimitiveType()
TypeFactory#spoon.reflect.reference.CtTypeReference characterType()
TypeFactory#spoon.reflect.reference.CtTypeReference characterPrimitiveType()
TypeFactory#spoon.reflect.reference.CtTypeReference integerType()
TypeFactory#spoon.reflect.reference.CtTypeReference integerPrimitiveType()
TypeFactory#spoon.reflect.reference.CtTypeReference longType()
TypeFactory#spoon.reflect.reference.CtTypeReference longPrimitiveType()
TypeFactory#spoon.reflect.reference.CtTypeReference floatType()
TypeFactory#spoon.reflect.reference.CtTypeReference floatPrimitiveType()
TypeFactory#spoon.reflect.reference.CtTypeReference doubleType()
TypeFactory#spoon.reflect.reference.CtTypeReference doublePrimitiveType()
TypeFactory#spoon.reflect.reference.CtTypeReference shortType()
TypeFactory#spoon.reflect.reference.CtTypeReference shortPrimitiveType()
TypeFactory#spoon.reflect.reference.CtTypeReference dateType()
TypeFactory#spoon.reflect.reference.CtTypeReference objectType()
TypeFactory#<T> spoon.reflect.reference.CtArrayTypeReference createArrayReference(spoon.reflect.declaration.CtType)
TypeFactory#<T> spoon.reflect.reference.CtArrayTypeReference createArrayReference(spoon.reflect.reference.CtTypeReference)
TypeFactory#spoon.reflect.reference.CtArrayTypeReference createArrayReference(spoon.reflect.reference.CtTypeReference,int)
TypeFactory#<T> spoon.reflect.reference.CtArrayTypeReference createArrayReference(java.lang.String)
TypeFactory#<T> spoon.reflect.reference.CtTypeReference createReference(java.lang.Class)
TypeFactory#<T> spoon.reflect.reference.CtTypeReference createReference(spoon.reflect.declaration.CtType)
TypeFactory#<T> spoon.reflect.reference.CtTypeReference createReference(spoon.reflect.declaration.CtType,boolean)
TypeFactory#spoon.reflect.reference.CtTypeParameterReference createReference(spoon.reflect.declaration.CtTypeParameter)
TypeFactory#<T> spoon.reflect.reference.CtTypeReference createReference(java.lang.String)
TypeFactory#<T> spoon.reflect.declaration.CtType get(java.lang.String)
TypeFactory#java.util.List getAll()
TypeFactory#java.util.List getAll(boolean)
TypeFactory#<T> spoon.reflect.declaration.CtType get(java.lang.Class)
TypeFactory#java.util.List createReferences(java.util.List)
TypeFactory#spoon.reflect.reference.CtTypeParameterReference createTypeParameterReference(java.lang.String)
TypeFactory#spoon.support.visitor.GenericTypeAdapter createTypeAdapter(spoon.reflect.declaration.CtFormalTypeDeclarer)
TypeFactory#<T> spoon.reflect.reference.CtIntersectionTypeReference createIntersectionTypeReferenceWithBounds(java.util.List)
AbstractPathElement#java.util.Map getArguments()
AbstractPathElement#<C extends spoon.reflect.path.impl.CtPathElement> C addArgument(java.lang.String,java.lang.String)
CtNamedPathElement#java.lang.String getPattern()
CtNamedPathElement#java.lang.String toString()
CtNamedPathElement#java.util.Collection getElements(java.util.Collection)
CtNamedPathElement#java.util.Collection scanElements(java.util.Collection)
CtPathImpl#java.util.List getElements()
CtPathImpl#<T extends spoon.reflect.declaration.CtElement> java.util.Collection evaluateOn(java.util.Collection)
CtPathImpl#spoon.reflect.path.impl.CtPathImpl addFirst(spoon.reflect.path.impl.CtPathElement)
CtPathImpl#spoon.reflect.path.impl.CtPathImpl addLast(spoon.reflect.path.impl.CtPathElement)
CtPathImpl#java.lang.String toString()
CtRolePathElement#spoon.reflect.path.CtRole getRole()
CtRolePathElement#java.lang.String toString()
CtRolePathElement#java.util.Collection getElements(java.util.Collection)
CtTypedNameElement#java.lang.Class getType()
CtTypedNameElement#java.lang.String toString()
CtTypedNameElement#java.util.Collection getElements(java.util.Collection)
CtPathBuilder#spoon.reflect.path.CtPathBuilder name(java.lang.String,java.lang.String[][])
CtPathBuilder#spoon.reflect.path.CtPathBuilder wildcard()
CtPathBuilder#spoon.reflect.path.CtPathBuilder recursiveWildcard()
CtPathBuilder#<T extends spoon.reflect.declaration.CtElement> spoon.reflect.path.CtPathBuilder type(java.lang.Class,java.lang.String[][])
CtPathBuilder#spoon.reflect.path.CtPathBuilder role(spoon.reflect.path.CtRole,java.lang.String[][])
CtPathBuilder#spoon.reflect.path.CtPath build()
CtPathStringBuilder#spoon.reflect.path.CtPath fromString(java.lang.String)
CtRole#spoon.reflect.path.CtRole fromName(java.lang.String)
CtRole#java.lang.String getCamelCaseName()
CtRole#java.lang.String toString()
CtQueryImpl#java.util.List getInputs()
CtQueryImpl#spoon.reflect.visitor.chain.CtQueryImpl setInput(java.lang.Object[])
CtQueryImpl#spoon.reflect.visitor.chain.CtQueryImpl addInput(java.lang.Object[])
CtQueryImpl#<R> void forEach(spoon.reflect.visitor.chain.CtConsumer)
CtQueryImpl#<R extends java.lang.Object> java.util.List list()
CtQueryImpl#<R> java.util.List list(java.lang.Class)
CtQueryImpl#<R> R first()
CtQueryImpl#<R> R first(java.lang.Class)
CtQueryImpl#<I> spoon.reflect.visitor.chain.CtQueryImpl map(spoon.reflect.visitor.chain.CtConsumableFunction)
CtQueryImpl#<I,R> spoon.reflect.visitor.chain.CtQueryImpl map(spoon.reflect.visitor.chain.CtFunction)
CtQueryImpl#<R extends spoon.reflect.declaration.CtElement> spoon.reflect.visitor.chain.CtQueryImpl filterChildren(spoon.reflect.visitor.Filter)
CtQueryImpl#<R extends spoon.reflect.declaration.CtElement> spoon.reflect.visitor.chain.CtQueryImpl select(spoon.reflect.visitor.Filter)
CtQueryImpl#boolean isTerminated()
CtQueryImpl#void terminate()
CtQueryImpl#<I,R> void evaluate(I,spoon.reflect.visitor.chain.CtConsumer)
CtQueryImpl#spoon.reflect.visitor.chain.CtQueryImpl name(java.lang.String)
CtQueryImpl#spoon.reflect.visitor.chain.CtQueryImpl failurePolicy(spoon.reflect.visitor.chain.QueryFailurePolicy)
CtQueryImpl#spoon.reflect.visitor.chain.CtQueryImpl stepFailurePolicy(spoon.reflect.visitor.chain.QueryFailurePolicy)
CtQueryImpl#spoon.reflect.visitor.chain.CtQueryImpl logging(boolean)
AbstractFilter#java.lang.Class getType()
AbstractFilter#boolean matches(T extends spoon.reflect.declaration.CtElement)
AllMethodsSameSignatureFunction#spoon.reflect.visitor.filter.AllMethodsSameSignatureFunction includingSelf(boolean)
AllMethodsSameSignatureFunction#spoon.reflect.visitor.filter.AllMethodsSameSignatureFunction includingLambdas(boolean)
AllMethodsSameSignatureFunction#void apply(spoon.reflect.declaration.CtExecutable,spoon.reflect.visitor.chain.CtConsumer)
AllMethodsSameSignatureFunction#void setQuery(spoon.reflect.visitor.chain.CtQuery)
AllTypeMembersFunction#spoon.reflect.visitor.filter.AllTypeMembersFunction distinctSet(java.util.Set)
AllTypeMembersFunction#void apply(spoon.reflect.declaration.CtTypeInformation,spoon.reflect.visitor.chain.CtConsumer)
AllTypeMembersFunction#void setQuery(spoon.reflect.visitor.chain.CtQuery)
AnnotationFilter#boolean matches(E extends spoon.reflect.declaration.CtElement)
CatchVariableScopeFunction#void apply(spoon.reflect.code.CtCatchVariable,spoon.reflect.visitor.chain.CtConsumer)
CompositeFilter#boolean matches(T extends spoon.reflect.declaration.CtElement)
CompositeFilter#java.lang.Class getType()
CtScannerFunction#spoon.reflect.visitor.filter.CtScannerFunction includingSelf(boolean)
CtScannerFunction#spoon.reflect.visitor.filter.CtScannerFunction setListener(spoon.reflect.visitor.chain.CtScannerListener)
CtScannerFunction#void apply(spoon.reflect.declaration.CtElement,spoon.reflect.visitor.chain.CtConsumer)
CtScannerFunction#void setQuery(spoon.reflect.visitor.chain.CtQuery)
DirectReferenceFilter#boolean matches(T extends spoon.reflect.reference.CtReference)
ExecutableReferenceFilter#spoon.reflect.visitor.filter.ExecutableReferenceFilter addExecutable(spoon.reflect.declaration.CtExecutable)
ExecutableReferenceFilter#boolean matches(spoon.reflect.reference.CtExecutableReference)
FieldReferenceFunction#void apply(spoon.reflect.declaration.CtElement,spoon.reflect.visitor.chain.CtConsumer)
FieldScopeFunction#void apply(spoon.reflect.declaration.CtField,spoon.reflect.visitor.chain.CtConsumer)
InvocationFilter#boolean matches(spoon.reflect.code.CtInvocation)
LambdaFilter#spoon.reflect.visitor.filter.LambdaFilter addImplementingInterface(spoon.reflect.declaration.CtTypeInformation)
LambdaFilter#boolean matches(spoon.reflect.code.CtLambda)
LineFilter#boolean matches(spoon.reflect.code.CtStatement)
LocalVariableReferenceFunction#void apply(spoon.reflect.declaration.CtElement,spoon.reflect.visitor.chain.CtConsumer)
LocalVariableScopeFunction#void apply(spoon.reflect.code.CtLocalVariable,spoon.reflect.visitor.chain.CtConsumer)
NamedElementFilter#boolean matches(T extends spoon.reflect.declaration.CtNamedElement)
NamedElementFilter#java.lang.Class getType()
OverriddenMethodFilter#spoon.reflect.visitor.filter.OverriddenMethodFilter includingSelf(boolean)
OverriddenMethodFilter#boolean matches(spoon.reflect.declaration.CtMethod)
OverriddenMethodQuery#void apply(spoon.reflect.declaration.CtMethod,spoon.reflect.visitor.chain.CtConsumer)
OverridingMethodFilter#spoon.reflect.visitor.filter.OverridingMethodFilter includingSelf(boolean)
OverridingMethodFilter#boolean matches(spoon.reflect.declaration.CtMethod)
ParameterScopeFunction#void apply(spoon.reflect.declaration.CtParameter,spoon.reflect.visitor.chain.CtConsumer)
ParentFunction#spoon.reflect.visitor.filter.ParentFunction includingSelf(boolean)
ParentFunction#void apply(spoon.reflect.declaration.CtElement,spoon.reflect.visitor.chain.CtConsumer)
ParentFunction#void setQuery(spoon.reflect.visitor.chain.CtQuery)
PotentialVariableDeclarationFunction#void apply(spoon.reflect.declaration.CtElement,spoon.reflect.visitor.chain.CtConsumer)
PotentialVariableDeclarationFunction#boolean isTypeOnTheWay()
PotentialVariableDeclarationFunction#void setQuery(spoon.reflect.visitor.chain.CtQuery)
RegexFilter#boolean matches(E extends spoon.reflect.declaration.CtElement)
RegexFilter#java.lang.Class getType()
ReturnOrThrowFilter#boolean matches(spoon.reflect.code.CtCFlowBreak)
SiblingsFunction#spoon.reflect.visitor.filter.SiblingsFunction includingSelf(boolean)
SiblingsFunction#spoon.reflect.visitor.filter.SiblingsFunction mode(spoon.reflect.visitor.filter.SiblingsFunction$Mode)
SiblingsFunction#void apply(spoon.reflect.declaration.CtElement,spoon.reflect.visitor.chain.CtConsumer)
SubInheritanceHierarchyFunction#spoon.reflect.visitor.filter.SubInheritanceHierarchyFunction includingSelf(boolean)
SubInheritanceHierarchyFunction#spoon.reflect.visitor.filter.SubInheritanceHierarchyFunction includingInterfaces(boolean)
SubInheritanceHierarchyFunction#spoon.reflect.visitor.filter.SubInheritanceHierarchyFunction failOnClassNotFound(boolean)
SubInheritanceHierarchyFunction#void apply(spoon.reflect.declaration.CtTypeInformation,spoon.reflect.visitor.chain.CtConsumer)
SubInheritanceHierarchyFunction#void setQuery(spoon.reflect.visitor.chain.CtQuery)
SubtypeFilter#spoon.reflect.visitor.filter.SubtypeFilter includingSelf(boolean)
SubtypeFilter#boolean matches(spoon.reflect.declaration.CtType)
SuperInheritanceHierarchyFunction#spoon.reflect.visitor.filter.SuperInheritanceHierarchyFunction includingSelf(boolean)
SuperInheritanceHierarchyFunction#spoon.reflect.visitor.filter.SuperInheritanceHierarchyFunction includingInterfaces(boolean)
SuperInheritanceHierarchyFunction#spoon.reflect.visitor.filter.SuperInheritanceHierarchyFunction returnTypeReferences(boolean)
SuperInheritanceHierarchyFunction#spoon.reflect.visitor.filter.SuperInheritanceHierarchyFunction setListener(spoon.reflect.visitor.chain.CtScannerListener)
SuperInheritanceHierarchyFunction#spoon.reflect.visitor.filter.SuperInheritanceHierarchyFunction failOnClassNotFound(boolean)
SuperInheritanceHierarchyFunction#void apply(spoon.reflect.declaration.CtTypeInformation,spoon.reflect.visitor.chain.CtConsumer)
SuperInheritanceHierarchyFunction#void setQuery(spoon.reflect.visitor.chain.CtQuery)
VariableAccessFilter#boolean matches(T extends spoon.reflect.code.CtVariableAccess)
VariableReferenceFunction#void apply(spoon.reflect.declaration.CtElement,spoon.reflect.visitor.chain.CtConsumer)
VariableScopeFunction#void apply(spoon.reflect.declaration.CtVariable,spoon.reflect.visitor.chain.CtConsumer)
AccessibleVariablesFinder#java.util.List find()
AstParentConsistencyChecker#void scan(spoon.reflect.declaration.CtElement)
CommentHelper#void printComment(spoon.reflect.visitor.PrinterHelper,spoon.reflect.code.CtComment)
CommentHelper#void printComment(spoon.reflect.visitor.PrinterHelper,spoon.reflect.code.CtComment$CommentType,java.lang.String,java.util.Collection)
CommentHelper#void printJavaDocTag(spoon.reflect.visitor.PrinterHelper,spoon.reflect.code.CtJavaDocTag)
CtAbstractBiScanner#boolean biScan(java.util.Collection,java.util.Collection)
CtAbstractBiScanner#boolean biScan(spoon.reflect.declaration.CtElement,spoon.reflect.declaration.CtElement)
CtAbstractBiScanner#boolean fail()
CtAbstractVisitor#<A extends java.lang.annotation.Annotation> void visitCtAnnotation(spoon.reflect.declaration.CtAnnotation)
CtAbstractVisitor#<T> void visitCtCodeSnippetExpression(spoon.reflect.code.CtCodeSnippetExpression)
CtAbstractVisitor#void visitCtCodeSnippetStatement(spoon.reflect.code.CtCodeSnippetStatement)
CtAbstractVisitor#<A extends java.lang.annotation.Annotation> void visitCtAnnotationType(spoon.reflect.declaration.CtAnnotationType)
CtAbstractVisitor#void visitCtAnonymousExecutable(spoon.reflect.declaration.CtAnonymousExecutable)
CtAbstractVisitor#<T> void visitCtArrayRead(spoon.reflect.code.CtArrayRead)
CtAbstractVisitor#<T> void visitCtArrayWrite(spoon.reflect.code.CtArrayWrite)
CtAbstractVisitor#<T> void visitCtArrayTypeReference(spoon.reflect.reference.CtArrayTypeReference)
CtAbstractVisitor#<T> void visitCtAssert(spoon.reflect.code.CtAssert)
CtAbstractVisitor#<T,A extends T> void visitCtAssignment(spoon.reflect.code.CtAssignment)
CtAbstractVisitor#<T> void visitCtBinaryOperator(spoon.reflect.code.CtBinaryOperator)
CtAbstractVisitor#<R> void visitCtBlock(spoon.reflect.code.CtBlock)
CtAbstractVisitor#void visitCtBreak(spoon.reflect.code.CtBreak)
CtAbstractVisitor#<S> void visitCtCase(spoon.reflect.code.CtCase)
CtAbstractVisitor#void visitCtCatch(spoon.reflect.code.CtCatch)
CtAbstractVisitor#<T> void visitCtClass(spoon.reflect.declaration.CtClass)
CtAbstractVisitor#void visitCtTypeParameter(spoon.reflect.declaration.CtTypeParameter)
CtAbstractVisitor#<T> void visitCtConditional(spoon.reflect.code.CtConditional)
CtAbstractVisitor#<T> void visitCtConstructor(spoon.reflect.declaration.CtConstructor)
CtAbstractVisitor#void visitCtContinue(spoon.reflect.code.CtContinue)
CtAbstractVisitor#void visitCtDo(spoon.reflect.code.CtDo)
CtAbstractVisitor#<T extends java.lang.Enum> void visitCtEnum(spoon.reflect.declaration.CtEnum)
CtAbstractVisitor#<T> void visitCtExecutableReference(spoon.reflect.reference.CtExecutableReference)
CtAbstractVisitor#<T> void visitCtField(spoon.reflect.declaration.CtField)
CtAbstractVisitor#<T> void visitCtEnumValue(spoon.reflect.declaration.CtEnumValue)
CtAbstractVisitor#<T> void visitCtFieldReference(spoon.reflect.reference.CtFieldReference)
CtAbstractVisitor#void visitCtFor(spoon.reflect.code.CtFor)
CtAbstractVisitor#void visitCtForEach(spoon.reflect.code.CtForEach)
CtAbstractVisitor#void visitCtIf(spoon.reflect.code.CtIf)
CtAbstractVisitor#<T> void visitCtInterface(spoon.reflect.declaration.CtInterface)
CtAbstractVisitor#<T> void visitCtInvocation(spoon.reflect.code.CtInvocation)
CtAbstractVisitor#<T> void visitCtLiteral(spoon.reflect.code.CtLiteral)
CtAbstractVisitor#<T> void visitCtLocalVariable(spoon.reflect.code.CtLocalVariable)
CtAbstractVisitor#<T> void visitCtLocalVariableReference(spoon.reflect.reference.CtLocalVariableReference)
CtAbstractVisitor#<T> void visitCtCatchVariable(spoon.reflect.code.CtCatchVariable)
CtAbstractVisitor#<T> void visitCtMethod(spoon.reflect.declaration.CtMethod)
CtAbstractVisitor#<T> void visitCtAnnotationMethod(spoon.reflect.declaration.CtAnnotationMethod)
CtAbstractVisitor#<T> void visitCtNewArray(spoon.reflect.code.CtNewArray)
CtAbstractVisitor#<T> void visitCtConstructorCall(spoon.reflect.code.CtConstructorCall)
CtAbstractVisitor#<T> void visitCtNewClass(spoon.reflect.code.CtNewClass)
CtAbstractVisitor#<T> void visitCtLambda(spoon.reflect.code.CtLambda)
CtAbstractVisitor#<T,E extends spoon.reflect.code.CtExpression> void visitCtExecutableReferenceExpression(spoon.reflect.code.CtExecutableReferenceExpression)
CtAbstractVisitor#<T,A extends T> void visitCtOperatorAssignment(spoon.reflect.code.CtOperatorAssignment)
CtAbstractVisitor#void visitCtPackage(spoon.reflect.declaration.CtPackage)
CtAbstractVisitor#void visitCtPackageReference(spoon.reflect.reference.CtPackageReference)
CtAbstractVisitor#<T> void visitCtParameter(spoon.reflect.declaration.CtParameter)
CtAbstractVisitor#<T> void visitCtParameterReference(spoon.reflect.reference.CtParameterReference)
CtAbstractVisitor#<R> void visitCtReturn(spoon.reflect.code.CtReturn)
CtAbstractVisitor#<R> void visitCtStatementList(spoon.reflect.code.CtStatementList)
CtAbstractVisitor#<S> void visitCtSwitch(spoon.reflect.code.CtSwitch)
CtAbstractVisitor#void visitCtSynchronized(spoon.reflect.code.CtSynchronized)
CtAbstractVisitor#void visitCtThrow(spoon.reflect.code.CtThrow)
CtAbstractVisitor#void visitCtTry(spoon.reflect.code.CtTry)
CtAbstractVisitor#void visitCtTryWithResource(spoon.reflect.code.CtTryWithResource)
CtAbstractVisitor#void visitCtTypeParameterReference(spoon.reflect.reference.CtTypeParameterReference)
CtAbstractVisitor#void visitCtWildcardReference(spoon.reflect.reference.CtWildcardReference)
CtAbstractVisitor#<T> void visitCtIntersectionTypeReference(spoon.reflect.reference.CtIntersectionTypeReference)
CtAbstractVisitor#<T> void visitCtTypeReference(spoon.reflect.reference.CtTypeReference)
CtAbstractVisitor#<T> void visitCtTypeAccess(spoon.reflect.code.CtTypeAccess)
CtAbstractVisitor#<T> void visitCtUnaryOperator(spoon.reflect.code.CtUnaryOperator)
CtAbstractVisitor#<T> void visitCtVariableRead(spoon.reflect.code.CtVariableRead)
CtAbstractVisitor#<T> void visitCtVariableWrite(spoon.reflect.code.CtVariableWrite)
CtAbstractVisitor#void visitCtWhile(spoon.reflect.code.CtWhile)
CtAbstractVisitor#<T> void visitCtAnnotationFieldAccess(spoon.reflect.code.CtAnnotationFieldAccess)
CtAbstractVisitor#<T> void visitCtThisAccess(spoon.reflect.code.CtThisAccess)
CtAbstractVisitor#<T> void visitCtCatchVariableReference(spoon.reflect.reference.CtCatchVariableReference)
CtAbstractVisitor#<T> void visitCtUnboundVariableReference(spoon.reflect.reference.CtUnboundVariableReference)
CtAbstractVisitor#<T> void visitCtFieldRead(spoon.reflect.code.CtFieldRead)
CtAbstractVisitor#<T> void visitCtFieldWrite(spoon.reflect.code.CtFieldWrite)
CtAbstractVisitor#<T> void visitCtSuperAccess(spoon.reflect.code.CtSuperAccess)
CtAbstractVisitor#void visitCtComment(spoon.reflect.code.CtComment)
CtAbstractVisitor#void visitCtJavaDoc(spoon.reflect.code.CtJavaDoc)
CtAbstractVisitor#void visitCtJavaDocTag(spoon.reflect.code.CtJavaDocTag)
CtBiScannerDefault#<A extends java.lang.annotation.Annotation> void visitCtAnnotation(spoon.reflect.declaration.CtAnnotation)
CtBiScannerDefault#<A extends java.lang.annotation.Annotation> void visitCtAnnotationType(spoon.reflect.declaration.CtAnnotationType)
CtBiScannerDefault#void visitCtAnonymousExecutable(spoon.reflect.declaration.CtAnonymousExecutable)
CtBiScannerDefault#<T> void visitCtArrayRead(spoon.reflect.code.CtArrayRead)
CtBiScannerDefault#<T> void visitCtArrayWrite(spoon.reflect.code.CtArrayWrite)
CtBiScannerDefault#<T> void visitCtArrayTypeReference(spoon.reflect.reference.CtArrayTypeReference)
CtBiScannerDefault#<T> void visitCtAssert(spoon.reflect.code.CtAssert)
CtBiScannerDefault#<T,A extends T> void visitCtAssignment(spoon.reflect.code.CtAssignment)
CtBiScannerDefault#<T> void visitCtBinaryOperator(spoon.reflect.code.CtBinaryOperator)
CtBiScannerDefault#<R> void visitCtBlock(spoon.reflect.code.CtBlock)
CtBiScannerDefault#void visitCtBreak(spoon.reflect.code.CtBreak)
CtBiScannerDefault#<S> void visitCtCase(spoon.reflect.code.CtCase)
CtBiScannerDefault#void visitCtCatch(spoon.reflect.code.CtCatch)
CtBiScannerDefault#<T> void visitCtClass(spoon.reflect.declaration.CtClass)
CtBiScannerDefault#void visitCtTypeParameter(spoon.reflect.declaration.CtTypeParameter)
CtBiScannerDefault#<T> void visitCtConditional(spoon.reflect.code.CtConditional)
CtBiScannerDefault#<T> void visitCtConstructor(spoon.reflect.declaration.CtConstructor)
CtBiScannerDefault#void visitCtContinue(spoon.reflect.code.CtContinue)
CtBiScannerDefault#void visitCtDo(spoon.reflect.code.CtDo)
CtBiScannerDefault#<T extends java.lang.Enum> void visitCtEnum(spoon.reflect.declaration.CtEnum)
CtBiScannerDefault#<T> void visitCtExecutableReference(spoon.reflect.reference.CtExecutableReference)
CtBiScannerDefault#<T> void visitCtField(spoon.reflect.declaration.CtField)
CtBiScannerDefault#<T> void visitCtEnumValue(spoon.reflect.declaration.CtEnumValue)
CtBiScannerDefault#<T> void visitCtThisAccess(spoon.reflect.code.CtThisAccess)
CtBiScannerDefault#<T> void visitCtAnnotationFieldAccess(spoon.reflect.code.CtAnnotationFieldAccess)
CtBiScannerDefault#<T> void visitCtFieldReference(spoon.reflect.reference.CtFieldReference)
CtBiScannerDefault#void visitCtFor(spoon.reflect.code.CtFor)
CtBiScannerDefault#void visitCtForEach(spoon.reflect.code.CtForEach)
CtBiScannerDefault#void visitCtIf(spoon.reflect.code.CtIf)
CtBiScannerDefault#<T> void visitCtInterface(spoon.reflect.declaration.CtInterface)
CtBiScannerDefault#<T> void visitCtInvocation(spoon.reflect.code.CtInvocation)
CtBiScannerDefault#<T> void visitCtLiteral(spoon.reflect.code.CtLiteral)
CtBiScannerDefault#<T> void visitCtLocalVariable(spoon.reflect.code.CtLocalVariable)
CtBiScannerDefault#<T> void visitCtLocalVariableReference(spoon.reflect.reference.CtLocalVariableReference)
CtBiScannerDefault#<T> void visitCtCatchVariable(spoon.reflect.code.CtCatchVariable)
CtBiScannerDefault#<T> void visitCtCatchVariableReference(spoon.reflect.reference.CtCatchVariableReference)
CtBiScannerDefault#<T> void visitCtMethod(spoon.reflect.declaration.CtMethod)
CtBiScannerDefault#<T> void visitCtAnnotationMethod(spoon.reflect.declaration.CtAnnotationMethod)
CtBiScannerDefault#<T> void visitCtNewArray(spoon.reflect.code.CtNewArray)
CtBiScannerDefault#<T> void visitCtConstructorCall(spoon.reflect.code.CtConstructorCall)
CtBiScannerDefault#<T> void visitCtNewClass(spoon.reflect.code.CtNewClass)
CtBiScannerDefault#<T> void visitCtLambda(spoon.reflect.code.CtLambda)
CtBiScannerDefault#<T,E extends spoon.reflect.code.CtExpression> void visitCtExecutableReferenceExpression(spoon.reflect.code.CtExecutableReferenceExpression)
CtBiScannerDefault#<T,A extends T> void visitCtOperatorAssignment(spoon.reflect.code.CtOperatorAssignment)
CtBiScannerDefault#void visitCtPackage(spoon.reflect.declaration.CtPackage)
CtBiScannerDefault#void visitCtPackageReference(spoon.reflect.reference.CtPackageReference)
CtBiScannerDefault#<T> void visitCtParameter(spoon.reflect.declaration.CtParameter)
CtBiScannerDefault#<T> void visitCtParameterReference(spoon.reflect.reference.CtParameterReference)
CtBiScannerDefault#<R> void visitCtReturn(spoon.reflect.code.CtReturn)
CtBiScannerDefault#<R> void visitCtStatementList(spoon.reflect.code.CtStatementList)
CtBiScannerDefault#<S> void visitCtSwitch(spoon.reflect.code.CtSwitch)
CtBiScannerDefault#void visitCtSynchronized(spoon.reflect.code.CtSynchronized)
CtBiScannerDefault#void visitCtThrow(spoon.reflect.code.CtThrow)
CtBiScannerDefault#void visitCtTry(spoon.reflect.code.CtTry)
CtBiScannerDefault#void visitCtTryWithResource(spoon.reflect.code.CtTryWithResource)
CtBiScannerDefault#void visitCtTypeParameterReference(spoon.reflect.reference.CtTypeParameterReference)
CtBiScannerDefault#void visitCtWildcardReference(spoon.reflect.reference.CtWildcardReference)
CtBiScannerDefault#<T> void visitCtIntersectionTypeReference(spoon.reflect.reference.CtIntersectionTypeReference)
CtBiScannerDefault#<T> void visitCtTypeReference(spoon.reflect.reference.CtTypeReference)
CtBiScannerDefault#<T> void visitCtTypeAccess(spoon.reflect.code.CtTypeAccess)
CtBiScannerDefault#<T> void visitCtUnaryOperator(spoon.reflect.code.CtUnaryOperator)
CtBiScannerDefault#<T> void visitCtVariableRead(spoon.reflect.code.CtVariableRead)
CtBiScannerDefault#<T> void visitCtVariableWrite(spoon.reflect.code.CtVariableWrite)
CtBiScannerDefault#void visitCtWhile(spoon.reflect.code.CtWhile)
CtBiScannerDefault#<T> void visitCtCodeSnippetExpression(spoon.reflect.code.CtCodeSnippetExpression)
CtBiScannerDefault#void visitCtCodeSnippetStatement(spoon.reflect.code.CtCodeSnippetStatement)
CtBiScannerDefault#<T> void visitCtUnboundVariableReference(spoon.reflect.reference.CtUnboundVariableReference)
CtBiScannerDefault#<T> void visitCtFieldRead(spoon.reflect.code.CtFieldRead)
CtBiScannerDefault#<T> void visitCtFieldWrite(spoon.reflect.code.CtFieldWrite)
CtBiScannerDefault#<T> void visitCtSuperAccess(spoon.reflect.code.CtSuperAccess)
CtBiScannerDefault#void visitCtComment(spoon.reflect.code.CtComment)
CtBiScannerDefault#void visitCtJavaDoc(spoon.reflect.code.CtJavaDoc)
CtBiScannerDefault#void visitCtJavaDocTag(spoon.reflect.code.CtJavaDocTag)
CtInheritanceScanner#<T> void visitCtCodeSnippetExpression(spoon.reflect.code.CtCodeSnippetExpression)
CtInheritanceScanner#void visitCtCodeSnippetStatement(spoon.reflect.code.CtCodeSnippetStatement)
CtInheritanceScanner#void scan(java.util.Collection)
CtInheritanceScanner#void scan(spoon.reflect.declaration.CtElement)
CtInheritanceScanner#<T> void scanCtAbstractInvocation(spoon.reflect.code.CtAbstractInvocation)
CtInheritanceScanner#void scanCtCFlowBreak(spoon.reflect.code.CtCFlowBreak)
CtInheritanceScanner#void scanCtLabelledFlowBreak(spoon.reflect.code.CtLabelledFlowBreak)
CtInheritanceScanner#void scanCtCodeElement(spoon.reflect.code.CtCodeElement)
CtInheritanceScanner#void scanCtTypeMember(spoon.reflect.declaration.CtTypeMember)
CtInheritanceScanner#void scanCtElement(spoon.reflect.declaration.CtElement)
CtInheritanceScanner#<R> void scanCtExecutable(spoon.reflect.declaration.CtExecutable)
CtInheritanceScanner#<T> void scanCtExpression(spoon.reflect.code.CtExpression)
CtInheritanceScanner#void scanCtFormalTypeDeclarer(spoon.reflect.declaration.CtFormalTypeDeclarer)
CtInheritanceScanner#void scanCtVisitable(spoon.reflect.visitor.CtVisitable)
CtInheritanceScanner#void scanCtActualTypeContainer(spoon.reflect.reference.CtActualTypeContainer)
CtInheritanceScanner#void scanCtLoop(spoon.reflect.code.CtLoop)
CtInheritanceScanner#void scanCtModifiable(spoon.reflect.declaration.CtModifiable)
CtInheritanceScanner#void scanCtNamedElement(spoon.reflect.declaration.CtNamedElement)
CtInheritanceScanner#void scanCtReference(spoon.reflect.reference.CtReference)
CtInheritanceScanner#void scanCtStatement(spoon.reflect.code.CtStatement)
CtInheritanceScanner#<T,E extends spoon.reflect.code.CtExpression> void scanCtTargetedExpression(spoon.reflect.code.CtTargetedExpression)
CtInheritanceScanner#<T> void scanCtType(spoon.reflect.declaration.CtType)
CtInheritanceScanner#<T> void scanCtTypedElement(spoon.reflect.declaration.CtTypedElement)
CtInheritanceScanner#<T> void scanCtVariable(spoon.reflect.declaration.CtVariable)
CtInheritanceScanner#<T,E extends spoon.reflect.code.CtExpression> void scanCtArrayAccess(spoon.reflect.code.CtArrayAccess)
CtInheritanceScanner#<T> void scanCtFieldAccess(spoon.reflect.code.CtFieldAccess)
CtInheritanceScanner#<T> void scanCtVariableAccess(spoon.reflect.code.CtVariableAccess)
CtInheritanceScanner#<T> void visitCtFieldRead(spoon.reflect.code.CtFieldRead)
CtInheritanceScanner#<T> void visitCtFieldWrite(spoon.reflect.code.CtFieldWrite)
CtInheritanceScanner#<T> void visitCtSuperAccess(spoon.reflect.code.CtSuperAccess)
CtInheritanceScanner#void scanCtMultiTypedElement(spoon.reflect.declaration.CtMultiTypedElement)
CtInheritanceScanner#<T,A extends T> void visitCtOperatorAssignment(spoon.reflect.code.CtOperatorAssignment)
CtInheritanceScanner#<T> void scanCtVariableReference(spoon.reflect.reference.CtVariableReference)
CtInheritanceScanner#<T> void scanCtTypeInformation(spoon.reflect.declaration.CtTypeInformation)
CtInheritanceScanner#<A extends java.lang.annotation.Annotation> void visitCtAnnotation(spoon.reflect.declaration.CtAnnotation)
CtInheritanceScanner#<A extends java.lang.annotation.Annotation> void visitCtAnnotationType(spoon.reflect.declaration.CtAnnotationType)
CtInheritanceScanner#void visitCtAnonymousExecutable(spoon.reflect.declaration.CtAnonymousExecutable)
CtInheritanceScanner#<T> void visitCtArrayRead(spoon.reflect.code.CtArrayRead)
CtInheritanceScanner#<T> void visitCtArrayWrite(spoon.reflect.code.CtArrayWrite)
CtInheritanceScanner#<T> void visitCtArrayTypeReference(spoon.reflect.reference.CtArrayTypeReference)
CtInheritanceScanner#<T> void visitCtAssert(spoon.reflect.code.CtAssert)
CtInheritanceScanner#<T,A extends T> void visitCtAssignment(spoon.reflect.code.CtAssignment)
CtInheritanceScanner#<T> void visitCtBinaryOperator(spoon.reflect.code.CtBinaryOperator)
CtInheritanceScanner#<R> void visitCtBlock(spoon.reflect.code.CtBlock)
CtInheritanceScanner#void visitCtBreak(spoon.reflect.code.CtBreak)
CtInheritanceScanner#<E> void visitCtCase(spoon.reflect.code.CtCase)
CtInheritanceScanner#void visitCtCatch(spoon.reflect.code.CtCatch)
CtInheritanceScanner#<T> void visitCtClass(spoon.reflect.declaration.CtClass)
CtInheritanceScanner#void visitCtTypeParameter(spoon.reflect.declaration.CtTypeParameter)
CtInheritanceScanner#<T> void visitCtConditional(spoon.reflect.code.CtConditional)
CtInheritanceScanner#<T> void visitCtConstructor(spoon.reflect.declaration.CtConstructor)
CtInheritanceScanner#void visitCtContinue(spoon.reflect.code.CtContinue)
CtInheritanceScanner#void visitCtDo(spoon.reflect.code.CtDo)
CtInheritanceScanner#<T extends java.lang.Enum> void visitCtEnum(spoon.reflect.declaration.CtEnum)
CtInheritanceScanner#<T> void visitCtExecutableReference(spoon.reflect.reference.CtExecutableReference)
CtInheritanceScanner#<T> void visitCtField(spoon.reflect.declaration.CtField)
CtInheritanceScanner#<T> void visitCtEnumValue(spoon.reflect.declaration.CtEnumValue)
CtInheritanceScanner#<T> void visitCtThisAccess(spoon.reflect.code.CtThisAccess)
CtInheritanceScanner#<T> void visitCtFieldReference(spoon.reflect.reference.CtFieldReference)
CtInheritanceScanner#void visitCtFor(spoon.reflect.code.CtFor)
CtInheritanceScanner#void visitCtForEach(spoon.reflect.code.CtForEach)
CtInheritanceScanner#void visitCtIf(spoon.reflect.code.CtIf)
CtInheritanceScanner#<T> void visitCtInterface(spoon.reflect.declaration.CtInterface)
CtInheritanceScanner#<T> void visitCtInvocation(spoon.reflect.code.CtInvocation)
CtInheritanceScanner#<T> void visitCtLiteral(spoon.reflect.code.CtLiteral)
CtInheritanceScanner#<T> void visitCtLocalVariable(spoon.reflect.code.CtLocalVariable)
CtInheritanceScanner#<T> void visitCtLocalVariableReference(spoon.reflect.reference.CtLocalVariableReference)
CtInheritanceScanner#<T> void visitCtCatchVariable(spoon.reflect.code.CtCatchVariable)
CtInheritanceScanner#<T> void visitCtCatchVariableReference(spoon.reflect.reference.CtCatchVariableReference)
CtInheritanceScanner#<T> void visitCtMethod(spoon.reflect.declaration.CtMethod)
CtInheritanceScanner#<T> void visitCtAnnotationMethod(spoon.reflect.declaration.CtAnnotationMethod)
CtInheritanceScanner#<T> void visitCtNewArray(spoon.reflect.code.CtNewArray)
CtInheritanceScanner#<T> void visitCtConstructorCall(spoon.reflect.code.CtConstructorCall)
CtInheritanceScanner#<T> void visitCtNewClass(spoon.reflect.code.CtNewClass)
CtInheritanceScanner#<T> void visitCtLambda(spoon.reflect.code.CtLambda)
CtInheritanceScanner#<T,E extends spoon.reflect.code.CtExpression> void visitCtExecutableReferenceExpression(spoon.reflect.code.CtExecutableReferenceExpression)
CtInheritanceScanner#<T,A extends T> void visitCtOperatorAssignement(spoon.reflect.code.CtOperatorAssignment)
CtInheritanceScanner#void visitCtPackage(spoon.reflect.declaration.CtPackage)
CtInheritanceScanner#void visitCtPackageReference(spoon.reflect.reference.CtPackageReference)
CtInheritanceScanner#<T> void visitCtParameter(spoon.reflect.declaration.CtParameter)
CtInheritanceScanner#<T> void visitCtParameterReference(spoon.reflect.reference.CtParameterReference)
CtInheritanceScanner#<R> void visitCtReturn(spoon.reflect.code.CtReturn)
CtInheritanceScanner#<R> void visitCtStatementList(spoon.reflect.code.CtStatementList)
CtInheritanceScanner#<E> void visitCtSwitch(spoon.reflect.code.CtSwitch)
CtInheritanceScanner#void visitCtSynchronized(spoon.reflect.code.CtSynchronized)
CtInheritanceScanner#void visitCtThrow(spoon.reflect.code.CtThrow)
CtInheritanceScanner#void visitCtTry(spoon.reflect.code.CtTry)
CtInheritanceScanner#void visitCtTryWithResource(spoon.reflect.code.CtTryWithResource)
CtInheritanceScanner#void visitCtTypeParameterReference(spoon.reflect.reference.CtTypeParameterReference)
CtInheritanceScanner#void visitCtWildcardReference(spoon.reflect.reference.CtWildcardReference)
CtInheritanceScanner#<T> void visitCtIntersectionTypeReference(spoon.reflect.reference.CtIntersectionTypeReference)
CtInheritanceScanner#<T> void visitCtTypeReference(spoon.reflect.reference.CtTypeReference)
CtInheritanceScanner#<T> void visitCtTypeAccess(spoon.reflect.code.CtTypeAccess)
CtInheritanceScanner#<T> void visitCtUnaryOperator(spoon.reflect.code.CtUnaryOperator)
CtInheritanceScanner#<T> void visitCtVariableRead(spoon.reflect.code.CtVariableRead)
CtInheritanceScanner#<T> void visitCtVariableWrite(spoon.reflect.code.CtVariableWrite)
CtInheritanceScanner#void visitCtComment(spoon.reflect.code.CtComment)
CtInheritanceScanner#void visitCtJavaDoc(spoon.reflect.code.CtJavaDoc)
CtInheritanceScanner#void visitCtJavaDocTag(spoon.reflect.code.CtJavaDocTag)
CtInheritanceScanner#<T> void visitCtAnnotationFieldAccess(spoon.reflect.code.CtAnnotationFieldAccess)
CtInheritanceScanner#void visitCtWhile(spoon.reflect.code.CtWhile)
CtInheritanceScanner#<T> void visitCtUnboundVariableReference(spoon.reflect.reference.CtUnboundVariableReference)
CtInheritanceScanner#void scanCtCodeSnippet(spoon.reflect.declaration.CtCodeSnippet)
CtScanner#void scan(java.util.Collection)
CtScanner#void scan(spoon.reflect.declaration.CtElement)
CtScanner#<A extends java.lang.annotation.Annotation> void visitCtAnnotation(spoon.reflect.declaration.CtAnnotation)
CtScanner#void scan(java.lang.Object)
CtScanner#<A extends java.lang.annotation.Annotation> void visitCtAnnotationType(spoon.reflect.declaration.CtAnnotationType)
CtScanner#void visitCtAnonymousExecutable(spoon.reflect.declaration.CtAnonymousExecutable)
CtScanner#<T> void visitCtArrayRead(spoon.reflect.code.CtArrayRead)
CtScanner#<T> void visitCtArrayWrite(spoon.reflect.code.CtArrayWrite)
CtScanner#<T> void visitCtArrayTypeReference(spoon.reflect.reference.CtArrayTypeReference)
CtScanner#<T> void visitCtAssert(spoon.reflect.code.CtAssert)
CtScanner#<T,A extends T> void visitCtAssignment(spoon.reflect.code.CtAssignment)
CtScanner#<T> void visitCtBinaryOperator(spoon.reflect.code.CtBinaryOperator)
CtScanner#<R> void visitCtBlock(spoon.reflect.code.CtBlock)
CtScanner#void visitCtBreak(spoon.reflect.code.CtBreak)
CtScanner#<S> void visitCtCase(spoon.reflect.code.CtCase)
CtScanner#void visitCtCatch(spoon.reflect.code.CtCatch)
CtScanner#<T> void visitCtClass(spoon.reflect.declaration.CtClass)
CtScanner#void visitCtTypeParameter(spoon.reflect.declaration.CtTypeParameter)
CtScanner#<T> void visitCtConditional(spoon.reflect.code.CtConditional)
CtScanner#<T> void visitCtConstructor(spoon.reflect.declaration.CtConstructor)
CtScanner#void visitCtContinue(spoon.reflect.code.CtContinue)
CtScanner#void visitCtDo(spoon.reflect.code.CtDo)
CtScanner#<T extends java.lang.Enum> void visitCtEnum(spoon.reflect.declaration.CtEnum)
CtScanner#<T> void visitCtExecutableReference(spoon.reflect.reference.CtExecutableReference)
CtScanner#<T> void visitCtField(spoon.reflect.declaration.CtField)
CtScanner#<T> void visitCtEnumValue(spoon.reflect.declaration.CtEnumValue)
CtScanner#<T> void visitCtThisAccess(spoon.reflect.code.CtThisAccess)
CtScanner#<T> void visitCtAnnotationFieldAccess(spoon.reflect.code.CtAnnotationFieldAccess)
CtScanner#<T> void visitCtFieldReference(spoon.reflect.reference.CtFieldReference)
CtScanner#void visitCtFor(spoon.reflect.code.CtFor)
CtScanner#void visitCtForEach(spoon.reflect.code.CtForEach)
CtScanner#void visitCtIf(spoon.reflect.code.CtIf)
CtScanner#<T> void visitCtInterface(spoon.reflect.declaration.CtInterface)
CtScanner#<T> void visitCtInvocation(spoon.reflect.code.CtInvocation)
CtScanner#<T> void visitCtLiteral(spoon.reflect.code.CtLiteral)
CtScanner#<T> void visitCtLocalVariable(spoon.reflect.code.CtLocalVariable)
CtScanner#<T> void visitCtLocalVariableReference(spoon.reflect.reference.CtLocalVariableReference)
CtScanner#<T> void visitCtCatchVariable(spoon.reflect.code.CtCatchVariable)
CtScanner#<T> void visitCtCatchVariableReference(spoon.reflect.reference.CtCatchVariableReference)
CtScanner#<T> void visitCtMethod(spoon.reflect.declaration.CtMethod)
CtScanner#<T> void visitCtAnnotationMethod(spoon.reflect.declaration.CtAnnotationMethod)
CtScanner#<T> void visitCtNewArray(spoon.reflect.code.CtNewArray)
CtScanner#<T> void visitCtConstructorCall(spoon.reflect.code.CtConstructorCall)
CtScanner#<T> void visitCtNewClass(spoon.reflect.code.CtNewClass)
CtScanner#<T> void visitCtLambda(spoon.reflect.code.CtLambda)
CtScanner#<T,E extends spoon.reflect.code.CtExpression> void visitCtExecutableReferenceExpression(spoon.reflect.code.CtExecutableReferenceExpression)
CtScanner#<T,A extends T> void visitCtOperatorAssignment(spoon.reflect.code.CtOperatorAssignment)
CtScanner#void visitCtPackage(spoon.reflect.declaration.CtPackage)
CtScanner#void visitCtPackageReference(spoon.reflect.reference.CtPackageReference)
CtScanner#<T> void visitCtParameter(spoon.reflect.declaration.CtParameter)
CtScanner#<T> void visitCtParameterReference(spoon.reflect.reference.CtParameterReference)
CtScanner#<R> void visitCtReturn(spoon.reflect.code.CtReturn)
CtScanner#<R> void visitCtStatementList(spoon.reflect.code.CtStatementList)
CtScanner#<S> void visitCtSwitch(spoon.reflect.code.CtSwitch)
CtScanner#void visitCtSynchronized(spoon.reflect.code.CtSynchronized)
CtScanner#void visitCtThrow(spoon.reflect.code.CtThrow)
CtScanner#void visitCtTry(spoon.reflect.code.CtTry)
CtScanner#void visitCtTryWithResource(spoon.reflect.code.CtTryWithResource)
CtScanner#void visitCtTypeParameterReference(spoon.reflect.reference.CtTypeParameterReference)
CtScanner#void visitCtWildcardReference(spoon.reflect.reference.CtWildcardReference)
CtScanner#<T> void visitCtIntersectionTypeReference(spoon.reflect.reference.CtIntersectionTypeReference)
CtScanner#<T> void visitCtTypeReference(spoon.reflect.reference.CtTypeReference)
CtScanner#<T> void visitCtTypeAccess(spoon.reflect.code.CtTypeAccess)
CtScanner#<T> void visitCtUnaryOperator(spoon.reflect.code.CtUnaryOperator)
CtScanner#<T> void visitCtVariableRead(spoon.reflect.code.CtVariableRead)
CtScanner#<T> void visitCtVariableWrite(spoon.reflect.code.CtVariableWrite)
CtScanner#void visitCtWhile(spoon.reflect.code.CtWhile)
CtScanner#<T> void visitCtCodeSnippetExpression(spoon.reflect.code.CtCodeSnippetExpression)
CtScanner#void visitCtCodeSnippetStatement(spoon.reflect.code.CtCodeSnippetStatement)
CtScanner#<T> void visitCtUnboundVariableReference(spoon.reflect.reference.CtUnboundVariableReference)
CtScanner#<T> void visitCtFieldRead(spoon.reflect.code.CtFieldRead)
CtScanner#<T> void visitCtFieldWrite(spoon.reflect.code.CtFieldWrite)
CtScanner#<T> void visitCtSuperAccess(spoon.reflect.code.CtSuperAccess)
CtScanner#void visitCtComment(spoon.reflect.code.CtComment)
CtScanner#void visitCtJavaDoc(spoon.reflect.code.CtJavaDoc)
CtScanner#void visitCtJavaDocTag(spoon.reflect.code.CtJavaDocTag)
DefaultJavaPrettyPrinter#java.lang.String getLineSeparator()
DefaultJavaPrettyPrinter#spoon.reflect.visitor.DefaultJavaPrettyPrinter setLineSeparator(java.lang.String)
DefaultJavaPrettyPrinter#java.util.Collection computeImports(spoon.reflect.declaration.CtType)
DefaultJavaPrettyPrinter#void computeImports(spoon.reflect.declaration.CtElement)
DefaultJavaPrettyPrinter#spoon.reflect.visitor.DefaultJavaPrettyPrinter scan(spoon.reflect.declaration.CtElement)
DefaultJavaPrettyPrinter#java.lang.String toString()
DefaultJavaPrettyPrinter#<A extends java.lang.annotation.Annotation> void visitCtAnnotation(spoon.reflect.declaration.CtAnnotation)
DefaultJavaPrettyPrinter#<A extends java.lang.annotation.Annotation> void visitCtAnnotationType(spoon.reflect.declaration.CtAnnotationType)
DefaultJavaPrettyPrinter#void visitCtAnonymousExecutable(spoon.reflect.declaration.CtAnonymousExecutable)
DefaultJavaPrettyPrinter#<T> void visitCtArrayRead(spoon.reflect.code.CtArrayRead)
DefaultJavaPrettyPrinter#<T> void visitCtArrayWrite(spoon.reflect.code.CtArrayWrite)
DefaultJavaPrettyPrinter#<T> void visitCtArrayTypeReference(spoon.reflect.reference.CtArrayTypeReference)
DefaultJavaPrettyPrinter#<T> void visitCtAssert(spoon.reflect.code.CtAssert)
DefaultJavaPrettyPrinter#<T,A extends T> void visitCtAssignment(spoon.reflect.code.CtAssignment)
DefaultJavaPrettyPrinter#<T> void visitCtBinaryOperator(spoon.reflect.code.CtBinaryOperator)
DefaultJavaPrettyPrinter#<R> void visitCtBlock(spoon.reflect.code.CtBlock)
DefaultJavaPrettyPrinter#void visitCtBreak(spoon.reflect.code.CtBreak)
DefaultJavaPrettyPrinter#<E> void visitCtCase(spoon.reflect.code.CtCase)
DefaultJavaPrettyPrinter#void visitCtCatch(spoon.reflect.code.CtCatch)
DefaultJavaPrettyPrinter#<T> void visitCtClass(spoon.reflect.declaration.CtClass)
DefaultJavaPrettyPrinter#void visitCtTypeParameter(spoon.reflect.declaration.CtTypeParameter)
DefaultJavaPrettyPrinter#<T> void visitCtConditional(spoon.reflect.code.CtConditional)
DefaultJavaPrettyPrinter#<T> void visitCtConstructor(spoon.reflect.declaration.CtConstructor)
DefaultJavaPrettyPrinter#void visitCtContinue(spoon.reflect.code.CtContinue)
DefaultJavaPrettyPrinter#void visitCtDo(spoon.reflect.code.CtDo)
DefaultJavaPrettyPrinter#<T extends java.lang.Enum> void visitCtEnum(spoon.reflect.declaration.CtEnum)
DefaultJavaPrettyPrinter#<T> void visitCtExecutableReference(spoon.reflect.reference.CtExecutableReference)
DefaultJavaPrettyPrinter#<T> void visitCtField(spoon.reflect.declaration.CtField)
DefaultJavaPrettyPrinter#<T> void visitCtEnumValue(spoon.reflect.declaration.CtEnumValue)
DefaultJavaPrettyPrinter#<T> void visitCtFieldRead(spoon.reflect.code.CtFieldRead)
DefaultJavaPrettyPrinter#<T> void visitCtFieldWrite(spoon.reflect.code.CtFieldWrite)
DefaultJavaPrettyPrinter#<T> void visitCtThisAccess(spoon.reflect.code.CtThisAccess)
DefaultJavaPrettyPrinter#<T> void visitCtSuperAccess(spoon.reflect.code.CtSuperAccess)
DefaultJavaPrettyPrinter#void visitCtJavaDoc(spoon.reflect.code.CtJavaDoc)
DefaultJavaPrettyPrinter#void visitCtJavaDocTag(spoon.reflect.code.CtJavaDocTag)
DefaultJavaPrettyPrinter#void visitCtComment(spoon.reflect.code.CtComment)
DefaultJavaPrettyPrinter#<T> void visitCtAnnotationFieldAccess(spoon.reflect.code.CtAnnotationFieldAccess)
DefaultJavaPrettyPrinter#<T> void visitCtFieldReference(spoon.reflect.reference.CtFieldReference)
DefaultJavaPrettyPrinter#void visitCtFor(spoon.reflect.code.CtFor)
DefaultJavaPrettyPrinter#void visitCtForEach(spoon.reflect.code.CtForEach)
DefaultJavaPrettyPrinter#void visitCtIf(spoon.reflect.code.CtIf)
DefaultJavaPrettyPrinter#<T> void visitCtInterface(spoon.reflect.declaration.CtInterface)
DefaultJavaPrettyPrinter#<T> void visitCtInvocation(spoon.reflect.code.CtInvocation)
DefaultJavaPrettyPrinter#<T> void visitCtLiteral(spoon.reflect.code.CtLiteral)
DefaultJavaPrettyPrinter#<T> void visitCtLocalVariable(spoon.reflect.code.CtLocalVariable)
DefaultJavaPrettyPrinter#<T> void visitCtLocalVariableReference(spoon.reflect.reference.CtLocalVariableReference)
DefaultJavaPrettyPrinter#<T> void visitCtCatchVariable(spoon.reflect.code.CtCatchVariable)
DefaultJavaPrettyPrinter#<T> void visitCtCatchVariableReference(spoon.reflect.reference.CtCatchVariableReference)
DefaultJavaPrettyPrinter#<T> void visitCtMethod(spoon.reflect.declaration.CtMethod)
DefaultJavaPrettyPrinter#<T> void visitCtAnnotationMethod(spoon.reflect.declaration.CtAnnotationMethod)
DefaultJavaPrettyPrinter#<T> void visitCtNewArray(spoon.reflect.code.CtNewArray)
DefaultJavaPrettyPrinter#<T> void visitCtConstructorCall(spoon.reflect.code.CtConstructorCall)
DefaultJavaPrettyPrinter#<T> void visitCtNewClass(spoon.reflect.code.CtNewClass)
DefaultJavaPrettyPrinter#<T> void visitCtLambda(spoon.reflect.code.CtLambda)
DefaultJavaPrettyPrinter#<T,E extends spoon.reflect.code.CtExpression> void visitCtExecutableReferenceExpression(spoon.reflect.code.CtExecutableReferenceExpression)
DefaultJavaPrettyPrinter#<T,A extends T> void visitCtOperatorAssignment(spoon.reflect.code.CtOperatorAssignment)
DefaultJavaPrettyPrinter#void visitCtPackage(spoon.reflect.declaration.CtPackage)
DefaultJavaPrettyPrinter#void visitCtPackageReference(spoon.reflect.reference.CtPackageReference)
DefaultJavaPrettyPrinter#<T> void visitCtParameter(spoon.reflect.declaration.CtParameter)
DefaultJavaPrettyPrinter#<T> void visitCtParameterReference(spoon.reflect.reference.CtParameterReference)
DefaultJavaPrettyPrinter#<R> void visitCtReturn(spoon.reflect.code.CtReturn)
DefaultJavaPrettyPrinter#void visitCtStatementList(spoon.reflect.code.CtStatementList)
DefaultJavaPrettyPrinter#<E> void visitCtSwitch(spoon.reflect.code.CtSwitch)
DefaultJavaPrettyPrinter#void visitCtSynchronized(spoon.reflect.code.CtSynchronized)
DefaultJavaPrettyPrinter#void visitCtThrow(spoon.reflect.code.CtThrow)
DefaultJavaPrettyPrinter#void visitCtTry(spoon.reflect.code.CtTry)
DefaultJavaPrettyPrinter#void visitCtTryWithResource(spoon.reflect.code.CtTryWithResource)
DefaultJavaPrettyPrinter#void visitCtTypeParameterReference(spoon.reflect.reference.CtTypeParameterReference)
DefaultJavaPrettyPrinter#void visitCtWildcardReference(spoon.reflect.reference.CtWildcardReference)
DefaultJavaPrettyPrinter#<T> void visitCtIntersectionTypeReference(spoon.reflect.reference.CtIntersectionTypeReference)
DefaultJavaPrettyPrinter#<T> void visitCtTypeReference(spoon.reflect.reference.CtTypeReference)
DefaultJavaPrettyPrinter#<T> void visitCtTypeAccess(spoon.reflect.code.CtTypeAccess)
DefaultJavaPrettyPrinter#<T> void visitCtUnaryOperator(spoon.reflect.code.CtUnaryOperator)
DefaultJavaPrettyPrinter#<T> void visitCtVariableRead(spoon.reflect.code.CtVariableRead)
DefaultJavaPrettyPrinter#<T> void visitCtVariableWrite(spoon.reflect.code.CtVariableWrite)
DefaultJavaPrettyPrinter#void visitCtWhile(spoon.reflect.code.CtWhile)
DefaultJavaPrettyPrinter#<T> void visitCtCodeSnippetExpression(spoon.reflect.code.CtCodeSnippetExpression)
DefaultJavaPrettyPrinter#void visitCtCodeSnippetStatement(spoon.reflect.code.CtCodeSnippetStatement)
DefaultJavaPrettyPrinter#spoon.reflect.visitor.ElementPrinterHelper getElementPrinterHelper()
DefaultJavaPrettyPrinter#spoon.reflect.visitor.PrintingContext getContext()
DefaultJavaPrettyPrinter#<T> void visitCtUnboundVariableReference(spoon.reflect.reference.CtUnboundVariableReference)
DefaultJavaPrettyPrinter#java.lang.String printPackageInfo(spoon.reflect.declaration.CtPackage)
DefaultJavaPrettyPrinter#java.lang.String getResult()
DefaultJavaPrettyPrinter#void calculate(spoon.reflect.cu.CompilationUnit,java.util.List)
DefaultJavaPrettyPrinter#java.util.Map getLineNumberMapping()
DefaultJavaPrettyPrinter#spoon.reflect.visitor.DefaultJavaPrettyPrinter setPrinterTokenWriter(spoon.reflect.visitor.TokenWriter)
DefaultTokenWriter#spoon.reflect.visitor.DefaultTokenWriter writeOperator(java.lang.String)
DefaultTokenWriter#spoon.reflect.visitor.DefaultTokenWriter writeSeparator(java.lang.String)
DefaultTokenWriter#spoon.reflect.visitor.DefaultTokenWriter writeLiteral(java.lang.String)
DefaultTokenWriter#spoon.reflect.visitor.DefaultTokenWriter writeKeyword(java.lang.String)
DefaultTokenWriter#spoon.reflect.visitor.DefaultTokenWriter writeIdentifier(java.lang.String)
DefaultTokenWriter#spoon.reflect.visitor.DefaultTokenWriter writeCodeSnippet(java.lang.String)
DefaultTokenWriter#spoon.reflect.visitor.DefaultTokenWriter writeComment(spoon.reflect.code.CtComment)
DefaultTokenWriter#spoon.reflect.visitor.DefaultTokenWriter writeln()
DefaultTokenWriter#spoon.reflect.visitor.DefaultTokenWriter incTab()
DefaultTokenWriter#spoon.reflect.visitor.DefaultTokenWriter decTab()
DefaultTokenWriter#void reset()
DefaultTokenWriter#spoon.reflect.visitor.TokenWriter writeSpace()
DefaultTokenWriter#spoon.reflect.visitor.PrinterHelper getPrinterHelper()
EarlyTerminatingScanner#T getResult()
EarlyTerminatingScanner#spoon.reflect.visitor.chain.CtScannerListener getListener()
EarlyTerminatingScanner#spoon.reflect.visitor.EarlyTerminatingScanner setListener(spoon.reflect.visitor.chain.CtScannerListener)
EarlyTerminatingScanner#void scan(java.util.Collection)
EarlyTerminatingScanner#void scan(spoon.reflect.declaration.CtElement)
EarlyTerminatingScanner#void scan(java.lang.Object)
ElementPrinterHelper#void writeAnnotations(spoon.reflect.declaration.CtElement)
ElementPrinterHelper#void writeModifiers(spoon.reflect.declaration.CtModifiable)
ElementPrinterHelper#void visitCtNamedElement(spoon.reflect.declaration.CtNamedElement,spoon.reflect.cu.CompilationUnit)
ElementPrinterHelper#void writeExtendsClause(spoon.reflect.declaration.CtType)
ElementPrinterHelper#void writeImplementsClause(spoon.reflect.declaration.CtType)
ElementPrinterHelper#void writeExecutableParameters(spoon.reflect.declaration.CtExecutable)
ElementPrinterHelper#void writeThrowsClause(spoon.reflect.declaration.CtExecutable)
ElementPrinterHelper#void writeStatement(spoon.reflect.code.CtStatement)
ElementPrinterHelper#void writeElementList(java.util.List)
ElementPrinterHelper#void writeAnnotationElement(spoon.reflect.factory.Factory,java.lang.Object)
ElementPrinterHelper#void writeFormalTypeParameters(spoon.reflect.declaration.CtFormalTypeDeclarer)
ElementPrinterHelper#void writeActualTypeArguments(spoon.reflect.reference.CtActualTypeContainer)
ElementPrinterHelper#void writeImports(java.util.Collection)
ElementPrinterHelper#void writeHeader(java.util.List,java.util.Collection)
ElementPrinterHelper#void writePackageLine(java.lang.String)
ElementPrinterHelper#void writeComment(spoon.reflect.code.CtComment)
ElementPrinterHelper#void writeComment(spoon.reflect.declaration.CtElement)
ElementPrinterHelper#void writeComment(spoon.reflect.declaration.CtElement,spoon.reflect.visitor.printer.CommentOffset)
ElementPrinterHelper#java.util.List getComments(spoon.reflect.declaration.CtElement,spoon.reflect.visitor.printer.CommentOffset)
ElementPrinterHelper#void writeIfOrLoopBlock(spoon.reflect.code.CtStatement)
ElementPrinterHelper#spoon.reflect.visitor.ListPrinter createListPrinter(boolean,java.lang.String,boolean,boolean,java.lang.String,boolean,boolean,java.lang.String)
ElementPrinterHelper#spoon.reflect.visitor.TokenWriter writeQualifiedName(java.lang.String)
ImportScannerImpl#<T> void visitCtFieldRead(spoon.reflect.code.CtFieldRead)
ImportScannerImpl#<T> void visitCtFieldReference(spoon.reflect.reference.CtFieldReference)
ImportScannerImpl#<T> void visitCtExecutableReference(spoon.reflect.reference.CtExecutableReference)
ImportScannerImpl#<T> void visitCtTypeReference(spoon.reflect.reference.CtTypeReference)
ImportScannerImpl#void scan(spoon.reflect.declaration.CtElement)
ImportScannerImpl#<A extends java.lang.annotation.Annotation> void visitCtAnnotationType(spoon.reflect.declaration.CtAnnotationType)
ImportScannerImpl#<T extends java.lang.Enum> void visitCtEnum(spoon.reflect.declaration.CtEnum)
ImportScannerImpl#<T> void visitCtInterface(spoon.reflect.declaration.CtInterface)
ImportScannerImpl#<T> void visitCtClass(spoon.reflect.declaration.CtClass)
ImportScannerImpl#<T> void visitCtCatchVariable(spoon.reflect.code.CtCatchVariable)
ImportScannerImpl#java.util.Collection getAllImports()
ImportScannerImpl#void computeImports(spoon.reflect.declaration.CtElement)
ImportScannerImpl#boolean isImported(spoon.reflect.reference.CtReference)
JavaIdentifiers#boolean isLegalJavaIdentifier(java.lang.String)
JavaIdentifiers#boolean isLegalJavaPackageIdentifier(java.lang.String)
JavaIdentifiers#boolean isLegalJavaExecutableIdentifier(java.lang.String)
ListPrinter#void printSeparatorIfAppropriate()
ListPrinter#void close()
LiteralHelper#<T> java.lang.String getLiteralToken(spoon.reflect.code.CtLiteral)
ModelConsistencyChecker#void enter(spoon.reflect.declaration.CtElement)
OperatorHelper#boolean isPrefixOperator(spoon.reflect.code.UnaryOperatorKind)
OperatorHelper#boolean isSufixOperator(spoon.reflect.code.UnaryOperatorKind)
OperatorHelper#java.lang.String getOperatorText(spoon.reflect.code.UnaryOperatorKind)
OperatorHelper#java.lang.String getOperatorText(spoon.reflect.code.BinaryOperatorKind)
PrinterHelper#void reset()
PrinterHelper#spoon.reflect.visitor.PrinterHelper write(java.lang.String)
PrinterHelper#spoon.reflect.visitor.PrinterHelper write(char)
PrinterHelper#spoon.reflect.visitor.PrinterHelper writeln()
PrinterHelper#spoon.reflect.visitor.PrinterHelper writeTabs()
PrinterHelper#spoon.reflect.visitor.PrinterHelper incTab()
PrinterHelper#spoon.reflect.visitor.PrinterHelper decTab()
PrinterHelper#int getTabCount()
PrinterHelper#spoon.reflect.visitor.PrinterHelper setTabCount(int)
PrinterHelper#boolean removeLine()
PrinterHelper#spoon.reflect.visitor.PrinterHelper adjustStartPosition(spoon.reflect.declaration.CtElement)
PrinterHelper#spoon.reflect.visitor.PrinterHelper adjustEndPosition(spoon.reflect.declaration.CtElement)
PrinterHelper#void undefineLine()
PrinterHelper#void mapLine(spoon.reflect.declaration.CtElement,spoon.reflect.cu.CompilationUnit)
PrinterHelper#void putLineNumberMapping(int)
PrinterHelper#java.util.Map getLineNumberMapping()
PrinterHelper#java.lang.String toString()
PrinterHelper#java.lang.String getLineSeparator()
PrinterHelper#void setLineSeparator(java.lang.String)
PrinterHelper#void writeSpace()
PrintingContext#boolean noTypeDecl()
PrintingContext#boolean ignoreGenerics()
PrintingContext#boolean skipArray()
PrintingContext#boolean ignoreStaticAccess()
PrintingContext#boolean ignoreEnclosingClass()
PrintingContext#boolean forceWildcardGenerics()
PrintingContext#spoon.reflect.visitor.PrintingContext$Writable modify()
PrintingContext#spoon.reflect.reference.CtTypeReference getCurrentTypeReference()
PrintingContext#void pushCurrentThis(spoon.reflect.declaration.CtType)
PrintingContext#void popCurrentThis()
PrintingContext#java.lang.String toString()
PrintingContext#boolean isInCurrentScope(spoon.reflect.reference.CtTypeReference)
Query#<E extends spoon.reflect.declaration.CtElement> java.util.List getElements(spoon.reflect.factory.Factory,spoon.reflect.visitor.Filter)
Query#<E extends spoon.reflect.declaration.CtElement> java.util.List getElements(spoon.reflect.declaration.CtElement,spoon.reflect.visitor.Filter)
Query#<T extends spoon.reflect.reference.CtReference> java.util.List getReferences(spoon.reflect.declaration.CtElement,spoon.reflect.visitor.Filter)
Query#<R extends spoon.reflect.reference.CtReference> java.util.List getReferences(spoon.reflect.factory.Factory,spoon.reflect.visitor.Filter)
TypeContext#boolean isNameConflict(java.lang.String)
TypeContext#java.lang.String getSimpleName()
TypeContext#spoon.reflect.reference.CtPackageReference getPackage()
Changes#java.util.List getAdded()
Changes#java.util.List getRemoved()
Changes#java.util.List getModified()
Changes#boolean hasAdded()
Changes#boolean hasModified()
Changes#boolean hasRemoved()
CtModelImpl#spoon.reflect.declaration.CtPackage getRootPackage()
CtModelImpl#java.util.Collection getAllTypes()
CtModelImpl#java.util.Collection getAllPackages()
CtModelImpl#void processWith(spoon.processing.Processor)
CtModelImpl#<E extends spoon.reflect.declaration.CtElement> java.util.List getElements(spoon.reflect.visitor.Filter)
CtLineElementComparator#int compare(spoon.reflect.declaration.CtElement,spoon.reflect.declaration.CtElement)
DeepRepresentationComparator#int compare(spoon.reflect.declaration.CtElement,spoon.reflect.declaration.CtElement)
QualifiedNameComparator#int compare(spoon.reflect.declaration.CtElement,spoon.reflect.declaration.CtElement)
SignatureComparator#int compare(spoon.reflect.declaration.CtElement,spoon.reflect.declaration.CtElement)
ASTPair#java.lang.String toString()
CompilationUnitWrapper#char[] getContents()
FactoryCompilerConfig#void initializeCompiler(spoon.support.compiler.jdt.JDTBatchCompiler)
FileCompilerConfig#void initializeCompiler(spoon.support.compiler.jdt.JDTBatchCompiler)
JDTBasedSpoonCompiler#boolean build()
JDTBasedSpoonCompiler#boolean build(spoon.compiler.builder.JDTBuilder)
JDTBasedSpoonCompiler#boolean compile(spoon.SpoonModelBuilder$InputType[])
JDTBasedSpoonCompiler#void instantiateAndProcess(java.util.List)
JDTBasedSpoonCompiler#void process(java.util.Collection)
JDTBasedSpoonCompiler#void generateProcessedSourceFiles(spoon.OutputType)
JDTBasedSpoonCompiler#void generateProcessedSourceFiles(spoon.OutputType,spoon.reflect.visitor.Filter)
JDTBasedSpoonCompiler#void addInputSource(java.io.File)
JDTBasedSpoonCompiler#void addInputSource(spoon.compiler.SpoonResource)
JDTBasedSpoonCompiler#void addInputSources(java.util.List)
JDTBasedSpoonCompiler#java.util.Set getInputSources()
JDTBasedSpoonCompiler#void addTemplateSource(spoon.compiler.SpoonResource)
JDTBasedSpoonCompiler#void addTemplateSource(java.io.File)
JDTBasedSpoonCompiler#void addTemplateSources(java.util.List)
JDTBasedSpoonCompiler#java.util.Set getTemplateSources()
JDTBasedSpoonCompiler#void setSourceOutputDirectory(java.io.File)
JDTBasedSpoonCompiler#java.io.File getSourceOutputDirectory()
JDTBasedSpoonCompiler#void setBinaryOutputDirectory(java.io.File)
JDTBasedSpoonCompiler#java.io.File getBinaryOutputDirectory()
JDTBasedSpoonCompiler#java.lang.String[] getSourceClasspath()
JDTBasedSpoonCompiler#void setSourceClasspath(java.lang.String[])
JDTBasedSpoonCompiler#java.lang.String[] getTemplateClasspath()
JDTBasedSpoonCompiler#void setTemplateClasspath(java.lang.String[])
JDTBasedSpoonCompiler#void setBuildOnlyOutdatedFiles(boolean)
JDTBasedSpoonCompiler#void forceBuild(spoon.compiler.SpoonResource)
JDTBasedSpoonCompiler#spoon.reflect.factory.Factory getFactory()
JDTBasedSpoonCompiler#void setEnvironment(org.eclipse.jdt.internal.compiler.env.INameEnvironment)
JDTBasedSpoonCompiler#void reportProblem(org.eclipse.jdt.core.compiler.CategorizedProblem)
JDTBasedSpoonCompiler#void reportProblems(spoon.compiler.Environment)
JDTBasedSpoonCompiler#java.util.List getProblems()
JDTBasedSpoonCompiler#spoon.compiler.SpoonFolder getSource()
JDTBasedSpoonCompiler#spoon.compiler.SpoonFolder getTemplates()
JDTBasedSpoonCompiler#void addCompilationUnitFilter(spoon.support.compiler.jdt.CompilationUnitFilter)
JDTBasedSpoonCompiler#void removeCompilationUnitFilter(spoon.support.compiler.jdt.CompilationUnitFilter)
JDTBasedSpoonCompiler#java.util.List getCompilationUnitFilter()
JDTBatchCompiler#org.eclipse.jdt.internal.compiler.batch.CompilationUnit[] getCompilationUnits()
JDTBatchCompiler#void setCompilationUnits(org.eclipse.jdt.internal.compiler.batch.CompilationUnit[])
JDTBatchCompiler#org.eclipse.jdt.internal.compiler.ICompilerRequestor getBatchRequestor()
JDTBatchCompiler#void ignoreFile(java.lang.String)
JDTBatchCompiler#org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration[] getUnits()
JDTBatchCompiler#spoon.support.compiler.jdt.JDTBasedSpoonCompiler getJdtCompiler()
JDTCommentBuilder#void build()
JDTCommentBuilder#java.lang.String cleanComment(java.lang.String)
JDTImportBuilder#void build()
JDTSnippetCompiler#boolean build()
JDTSnippetCompiler#boolean build(spoon.compiler.builder.JDTBuilder)
JDTSnippetCompiler#spoon.reflect.cu.CompilationUnit getSnippetCompilationUnit()
JDTTreeBuilder#org.apache.log4j.Logger getLogger()
JDTTreeBuilder#spoon.support.compiler.jdt.PositionBuilder getPositionBuilder()
JDTTreeBuilder#spoon.support.compiler.jdt.ContextBuilder getContextBuilder()
JDTTreeBuilder#spoon.support.compiler.jdt.ReferenceBuilder getReferencesBuilder()
JDTTreeBuilder#spoon.support.compiler.jdt.JDTTreeBuilderHelper getHelper()
JDTTreeBuilder#spoon.support.compiler.jdt.ParentExiter getExiter()
JDTTreeBuilder#spoon.reflect.factory.Factory getFactory()
JDTTreeBuilder#void endVisit(org.eclipse.jdt.internal.compiler.ast.AllocationExpression,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#void endVisit(org.eclipse.jdt.internal.compiler.ast.AND_AND_Expression,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#void endVisit(org.eclipse.jdt.internal.compiler.ast.AnnotationMethodDeclaration,org.eclipse.jdt.internal.compiler.lookup.ClassScope)
JDTTreeBuilder#void endVisit(org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#void endVisit(org.eclipse.jdt.internal.compiler.ast.ArrayAllocationExpression,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#void endVisit(org.eclipse.jdt.internal.compiler.ast.ArrayInitializer,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#void endVisit(org.eclipse.jdt.internal.compiler.ast.ArrayReference,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#void endVisit(org.eclipse.jdt.internal.compiler.ast.ArrayTypeReference,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#void endVisit(org.eclipse.jdt.internal.compiler.ast.ArrayTypeReference,org.eclipse.jdt.internal.compiler.lookup.ClassScope)
JDTTreeBuilder#void endVisit(org.eclipse.jdt.internal.compiler.ast.ArrayQualifiedTypeReference,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#void endVisit(org.eclipse.jdt.internal.compiler.ast.ArrayQualifiedTypeReference,org.eclipse.jdt.internal.compiler.lookup.ClassScope)
JDTTreeBuilder#void endVisit(org.eclipse.jdt.internal.compiler.ast.AssertStatement,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#void endVisit(org.eclipse.jdt.internal.compiler.ast.Assignment,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#void endVisit(org.eclipse.jdt.internal.compiler.ast.BinaryExpression,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#void endVisit(org.eclipse.jdt.internal.compiler.ast.Block,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#void endVisit(org.eclipse.jdt.internal.compiler.ast.BreakStatement,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#void endVisit(org.eclipse.jdt.internal.compiler.ast.CaseStatement,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#void endVisit(org.eclipse.jdt.internal.compiler.ast.CharLiteral,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#void endVisit(org.eclipse.jdt.internal.compiler.ast.ClassLiteralAccess,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#void endVisit(org.eclipse.jdt.internal.compiler.ast.CompoundAssignment,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#void endVisit(org.eclipse.jdt.internal.compiler.ast.ConditionalExpression,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#void endVisit(org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration,org.eclipse.jdt.internal.compiler.lookup.ClassScope)
JDTTreeBuilder#void endVisit(org.eclipse.jdt.internal.compiler.ast.ContinueStatement,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#void endVisit(org.eclipse.jdt.internal.compiler.ast.DoStatement,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#void endVisit(org.eclipse.jdt.internal.compiler.ast.DoubleLiteral,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#void endVisit(org.eclipse.jdt.internal.compiler.ast.EqualExpression,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#void endVisit(org.eclipse.jdt.internal.compiler.ast.ExplicitConstructorCall,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#void endVisit(org.eclipse.jdt.internal.compiler.ast.ExtendedStringLiteral,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#void endVisit(org.eclipse.jdt.internal.compiler.ast.FalseLiteral,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#void endVisit(org.eclipse.jdt.internal.compiler.ast.FieldDeclaration,org.eclipse.jdt.internal.compiler.lookup.MethodScope)
JDTTreeBuilder#void endVisit(org.eclipse.jdt.internal.compiler.ast.FieldReference,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#void endVisit(org.eclipse.jdt.internal.compiler.ast.FloatLiteral,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#void endVisit(org.eclipse.jdt.internal.compiler.ast.ForeachStatement,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#void endVisit(org.eclipse.jdt.internal.compiler.ast.ForStatement,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#void endVisit(org.eclipse.jdt.internal.compiler.ast.IfStatement,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#void endVisit(org.eclipse.jdt.internal.compiler.ast.Initializer,org.eclipse.jdt.internal.compiler.lookup.MethodScope)
JDTTreeBuilder#void endVisit(org.eclipse.jdt.internal.compiler.ast.InstanceOfExpression,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#void endVisit(org.eclipse.jdt.internal.compiler.ast.IntLiteral,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#void endVisit(org.eclipse.jdt.internal.compiler.ast.LocalDeclaration,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#void endVisit(org.eclipse.jdt.internal.compiler.ast.LongLiteral,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#void endVisit(org.eclipse.jdt.internal.compiler.ast.NormalAnnotation,org.eclipse.jdt.internal.compiler.lookup.ClassScope)
JDTTreeBuilder#void endVisit(org.eclipse.jdt.internal.compiler.ast.MarkerAnnotation,org.eclipse.jdt.internal.compiler.lookup.ClassScope)
JDTTreeBuilder#void endVisit(org.eclipse.jdt.internal.compiler.ast.MarkerAnnotation,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#void endVisit(org.eclipse.jdt.internal.compiler.ast.MemberValuePair,org.eclipse.jdt.internal.compiler.lookup.ClassScope)
JDTTreeBuilder#void endVisit(org.eclipse.jdt.internal.compiler.ast.MemberValuePair,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#void endVisit(org.eclipse.jdt.internal.compiler.ast.MessageSend,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#void endVisit(org.eclipse.jdt.internal.compiler.ast.MethodDeclaration,org.eclipse.jdt.internal.compiler.lookup.ClassScope)
JDTTreeBuilder#void endVisit(org.eclipse.jdt.internal.compiler.ast.NormalAnnotation,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#void endVisit(org.eclipse.jdt.internal.compiler.ast.NullLiteral,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#void endVisit(org.eclipse.jdt.internal.compiler.ast.OR_OR_Expression,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#void endVisit(org.eclipse.jdt.internal.compiler.ast.ParameterizedQualifiedTypeReference,org.eclipse.jdt.internal.compiler.lookup.ClassScope)
JDTTreeBuilder#void endVisit(org.eclipse.jdt.internal.compiler.ast.ParameterizedQualifiedTypeReference,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#void endVisit(org.eclipse.jdt.internal.compiler.ast.ParameterizedSingleTypeReference,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#void endVisit(org.eclipse.jdt.internal.compiler.ast.ParameterizedSingleTypeReference,org.eclipse.jdt.internal.compiler.lookup.ClassScope)
JDTTreeBuilder#void endVisit(org.eclipse.jdt.internal.compiler.ast.PostfixExpression,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#void endVisit(org.eclipse.jdt.internal.compiler.ast.PrefixExpression,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#void endVisit(org.eclipse.jdt.internal.compiler.ast.QualifiedAllocationExpression,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#void endVisit(org.eclipse.jdt.internal.compiler.ast.QualifiedNameReference,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#void endVisit(org.eclipse.jdt.internal.compiler.ast.QualifiedThisReference,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#void endVisit(org.eclipse.jdt.internal.compiler.ast.QualifiedTypeReference,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#void endVisit(org.eclipse.jdt.internal.compiler.ast.QualifiedTypeReference,org.eclipse.jdt.internal.compiler.lookup.ClassScope)
JDTTreeBuilder#void endVisit(org.eclipse.jdt.internal.compiler.ast.ReturnStatement,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#void endVisit(org.eclipse.jdt.internal.compiler.ast.SingleMemberAnnotation,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#void endVisit(org.eclipse.jdt.internal.compiler.ast.SingleNameReference,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#void endVisit(org.eclipse.jdt.internal.compiler.ast.SingleTypeReference,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#void endVisit(org.eclipse.jdt.internal.compiler.ast.SingleTypeReference,org.eclipse.jdt.internal.compiler.lookup.ClassScope)
JDTTreeBuilder#void endVisit(org.eclipse.jdt.internal.compiler.ast.StringLiteral,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#void endVisit(org.eclipse.jdt.internal.compiler.ast.StringLiteralConcatenation,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#void endVisit(org.eclipse.jdt.internal.compiler.ast.QualifiedSuperReference,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#void endVisit(org.eclipse.jdt.internal.compiler.ast.SuperReference,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#void endVisit(org.eclipse.jdt.internal.compiler.ast.QualifiedThisReference,org.eclipse.jdt.internal.compiler.lookup.ClassScope)
JDTTreeBuilder#void endVisit(org.eclipse.jdt.internal.compiler.ast.ThisReference,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#void endVisit(org.eclipse.jdt.internal.compiler.ast.SwitchStatement,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#void endVisit(org.eclipse.jdt.internal.compiler.ast.SynchronizedStatement,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#void endVisit(org.eclipse.jdt.internal.compiler.ast.ThrowStatement,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#void endVisit(org.eclipse.jdt.internal.compiler.ast.TrueLiteral,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#void endVisit(org.eclipse.jdt.internal.compiler.ast.TryStatement,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#void endVisit(org.eclipse.jdt.internal.compiler.ast.TypeParameter,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#void endVisit(org.eclipse.jdt.internal.compiler.ast.TypeParameter,org.eclipse.jdt.internal.compiler.lookup.ClassScope)
JDTTreeBuilder#void endVisit(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#void endVisit(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration,org.eclipse.jdt.internal.compiler.lookup.ClassScope)
JDTTreeBuilder#void endVisit(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration,org.eclipse.jdt.internal.compiler.lookup.CompilationUnitScope)
JDTTreeBuilder#void endVisit(org.eclipse.jdt.internal.compiler.ast.UnaryExpression,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#void endVisit(org.eclipse.jdt.internal.compiler.ast.WhileStatement,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#void endVisit(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,org.eclipse.jdt.internal.compiler.lookup.CompilationUnitScope)
JDTTreeBuilder#boolean visit(org.eclipse.jdt.internal.compiler.ast.Javadoc,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#boolean visit(org.eclipse.jdt.internal.compiler.ast.Javadoc,org.eclipse.jdt.internal.compiler.lookup.ClassScope)
JDTTreeBuilder#boolean visit(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,org.eclipse.jdt.internal.compiler.lookup.CompilationUnitScope)
JDTTreeBuilder#boolean visit(org.eclipse.jdt.internal.compiler.ast.ReferenceExpression,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#void endVisit(org.eclipse.jdt.internal.compiler.ast.ReferenceExpression,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#boolean visit(org.eclipse.jdt.internal.compiler.ast.LambdaExpression,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#void endVisit(org.eclipse.jdt.internal.compiler.ast.LambdaExpression,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#boolean visit(org.eclipse.jdt.internal.compiler.ast.AllocationExpression,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#boolean visit(org.eclipse.jdt.internal.compiler.ast.QualifiedAllocationExpression,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#boolean visit(org.eclipse.jdt.internal.compiler.ast.AND_AND_Expression,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#boolean visit(org.eclipse.jdt.internal.compiler.ast.AnnotationMethodDeclaration,org.eclipse.jdt.internal.compiler.lookup.ClassScope)
JDTTreeBuilder#boolean visit(org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#boolean visit(org.eclipse.jdt.internal.compiler.ast.ArrayAllocationExpression,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#boolean visit(org.eclipse.jdt.internal.compiler.ast.ArrayInitializer,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#boolean visit(org.eclipse.jdt.internal.compiler.ast.ArrayReference,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#boolean visit(org.eclipse.jdt.internal.compiler.ast.ArrayTypeReference,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#boolean visit(org.eclipse.jdt.internal.compiler.ast.ArrayTypeReference,org.eclipse.jdt.internal.compiler.lookup.ClassScope)
JDTTreeBuilder#boolean visit(org.eclipse.jdt.internal.compiler.ast.ArrayQualifiedTypeReference,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#boolean visit(org.eclipse.jdt.internal.compiler.ast.ArrayQualifiedTypeReference,org.eclipse.jdt.internal.compiler.lookup.ClassScope)
JDTTreeBuilder#boolean visit(org.eclipse.jdt.internal.compiler.ast.AssertStatement,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#boolean visit(org.eclipse.jdt.internal.compiler.ast.Assignment,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#boolean visit(org.eclipse.jdt.internal.compiler.ast.CompoundAssignment,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#boolean visit(org.eclipse.jdt.internal.compiler.ast.BinaryExpression,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#boolean visit(org.eclipse.jdt.internal.compiler.ast.Block,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#boolean visit(org.eclipse.jdt.internal.compiler.ast.BreakStatement,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#boolean visit(org.eclipse.jdt.internal.compiler.ast.CastExpression,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#boolean visit(org.eclipse.jdt.internal.compiler.ast.CharLiteral,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#boolean visit(org.eclipse.jdt.internal.compiler.ast.ClassLiteralAccess,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#boolean visit(org.eclipse.jdt.internal.compiler.ast.ConditionalExpression,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#boolean visit(org.eclipse.jdt.internal.compiler.ast.MethodDeclaration,org.eclipse.jdt.internal.compiler.lookup.ClassScope)
JDTTreeBuilder#boolean visit(org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration,org.eclipse.jdt.internal.compiler.lookup.ClassScope)
JDTTreeBuilder#boolean visit(org.eclipse.jdt.internal.compiler.ast.TypeParameter,org.eclipse.jdt.internal.compiler.lookup.ClassScope)
JDTTreeBuilder#boolean visit(org.eclipse.jdt.internal.compiler.ast.TypeParameter,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#boolean visit(org.eclipse.jdt.internal.compiler.ast.ContinueStatement,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#boolean visit(org.eclipse.jdt.internal.compiler.ast.DoStatement,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#boolean visit(org.eclipse.jdt.internal.compiler.ast.DoubleLiteral,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#boolean visit(org.eclipse.jdt.internal.compiler.ast.EqualExpression,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#boolean visit(org.eclipse.jdt.internal.compiler.ast.ExplicitConstructorCall,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#boolean visit(org.eclipse.jdt.internal.compiler.ast.ExtendedStringLiteral,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#boolean visit(org.eclipse.jdt.internal.compiler.ast.FalseLiteral,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#boolean visit(org.eclipse.jdt.internal.compiler.ast.FieldDeclaration,org.eclipse.jdt.internal.compiler.lookup.MethodScope)
JDTTreeBuilder#boolean visit(org.eclipse.jdt.internal.compiler.ast.FieldReference,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#boolean visit(org.eclipse.jdt.internal.compiler.ast.FloatLiteral,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#boolean visit(org.eclipse.jdt.internal.compiler.ast.ForeachStatement,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#boolean visit(org.eclipse.jdt.internal.compiler.ast.ForStatement,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#boolean visit(org.eclipse.jdt.internal.compiler.ast.IfStatement,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#boolean visit(org.eclipse.jdt.internal.compiler.ast.Initializer,org.eclipse.jdt.internal.compiler.lookup.MethodScope)
JDTTreeBuilder#boolean visit(org.eclipse.jdt.internal.compiler.ast.InstanceOfExpression,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#boolean visit(org.eclipse.jdt.internal.compiler.ast.IntLiteral,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#boolean visit(org.eclipse.jdt.internal.compiler.ast.LabeledStatement,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#boolean visit(org.eclipse.jdt.internal.compiler.ast.LocalDeclaration,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#boolean visit(org.eclipse.jdt.internal.compiler.ast.LongLiteral,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#boolean visit(org.eclipse.jdt.internal.compiler.ast.NormalAnnotation,org.eclipse.jdt.internal.compiler.lookup.ClassScope)
JDTTreeBuilder#boolean visit(org.eclipse.jdt.internal.compiler.ast.NormalAnnotation,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#boolean visit(org.eclipse.jdt.internal.compiler.ast.MarkerAnnotation,org.eclipse.jdt.internal.compiler.lookup.ClassScope)
JDTTreeBuilder#boolean visit(org.eclipse.jdt.internal.compiler.ast.MarkerAnnotation,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#boolean visit(org.eclipse.jdt.internal.compiler.ast.SingleMemberAnnotation,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#boolean visit(org.eclipse.jdt.internal.compiler.ast.MemberValuePair,org.eclipse.jdt.internal.compiler.lookup.ClassScope)
JDTTreeBuilder#boolean visit(org.eclipse.jdt.internal.compiler.ast.MemberValuePair,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#boolean visit(org.eclipse.jdt.internal.compiler.ast.MessageSend,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#boolean visit(org.eclipse.jdt.internal.compiler.ast.NullLiteral,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#boolean visit(org.eclipse.jdt.internal.compiler.ast.OR_OR_Expression,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#boolean visit(org.eclipse.jdt.internal.compiler.ast.ParameterizedQualifiedTypeReference,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#boolean visit(org.eclipse.jdt.internal.compiler.ast.ParameterizedQualifiedTypeReference,org.eclipse.jdt.internal.compiler.lookup.ClassScope)
JDTTreeBuilder#boolean visit(org.eclipse.jdt.internal.compiler.ast.ParameterizedSingleTypeReference,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#boolean visit(org.eclipse.jdt.internal.compiler.ast.ParameterizedSingleTypeReference,org.eclipse.jdt.internal.compiler.lookup.ClassScope)
JDTTreeBuilder#boolean visit(org.eclipse.jdt.internal.compiler.ast.PostfixExpression,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#boolean visit(org.eclipse.jdt.internal.compiler.ast.PrefixExpression,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#boolean visit(org.eclipse.jdt.internal.compiler.ast.QualifiedNameReference,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#boolean visit(org.eclipse.jdt.internal.compiler.ast.QualifiedTypeReference,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#boolean visit(org.eclipse.jdt.internal.compiler.ast.QualifiedTypeReference,org.eclipse.jdt.internal.compiler.lookup.ClassScope)
JDTTreeBuilder#boolean visit(org.eclipse.jdt.internal.compiler.ast.ReturnStatement,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#boolean visit(org.eclipse.jdt.internal.compiler.ast.SingleNameReference,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#boolean visit(org.eclipse.jdt.internal.compiler.ast.QualifiedSuperReference,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#boolean visit(org.eclipse.jdt.internal.compiler.ast.SuperReference,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#boolean visit(org.eclipse.jdt.internal.compiler.ast.QualifiedThisReference,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#boolean visit(org.eclipse.jdt.internal.compiler.ast.ThisReference,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#void endVisit(org.eclipse.jdt.internal.compiler.ast.UnionTypeReference,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#void endVisit(org.eclipse.jdt.internal.compiler.ast.UnionTypeReference,org.eclipse.jdt.internal.compiler.lookup.ClassScope)
JDTTreeBuilder#boolean visit(org.eclipse.jdt.internal.compiler.ast.UnionTypeReference,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#boolean visit(org.eclipse.jdt.internal.compiler.ast.UnionTypeReference,org.eclipse.jdt.internal.compiler.lookup.ClassScope)
JDTTreeBuilder#boolean visit(org.eclipse.jdt.internal.compiler.ast.SingleTypeReference,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#boolean visit(org.eclipse.jdt.internal.compiler.ast.SingleTypeReference,org.eclipse.jdt.internal.compiler.lookup.ClassScope)
JDTTreeBuilder#boolean visit(org.eclipse.jdt.internal.compiler.ast.StringLiteral,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#boolean visit(org.eclipse.jdt.internal.compiler.ast.StringLiteralConcatenation,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#boolean visit(org.eclipse.jdt.internal.compiler.ast.CaseStatement,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#boolean visit(org.eclipse.jdt.internal.compiler.ast.SwitchStatement,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#boolean visit(org.eclipse.jdt.internal.compiler.ast.SynchronizedStatement,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#boolean visit(org.eclipse.jdt.internal.compiler.ast.ThrowStatement,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#boolean visit(org.eclipse.jdt.internal.compiler.ast.TrueLiteral,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#boolean visit(org.eclipse.jdt.internal.compiler.ast.TryStatement,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#boolean visit(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#boolean visit(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration,org.eclipse.jdt.internal.compiler.lookup.ClassScope)
JDTTreeBuilder#boolean visit(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration,org.eclipse.jdt.internal.compiler.lookup.CompilationUnitScope)
JDTTreeBuilder#boolean visit(org.eclipse.jdt.internal.compiler.ast.UnaryExpression,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilder#boolean visit(org.eclipse.jdt.internal.compiler.ast.WhileStatement,org.eclipse.jdt.internal.compiler.lookup.BlockScope)
JDTTreeBuilderHelper#<T> spoon.reflect.code.CtVariableAccess createVariableAccess(spoon.reflect.reference.CtVariableReference,boolean)
JDTTreeBuilderHelper#<T> spoon.reflect.code.CtFieldAccess createFieldAccess(spoon.reflect.reference.CtVariableReference,spoon.reflect.code.CtExpression,boolean)
ParentExiter#void setChild(spoon.reflect.declaration.CtElement)
ParentExiter#void setChild(org.eclipse.jdt.internal.compiler.ast.ASTNode)
ParentExiter#void scanCtElement(spoon.reflect.declaration.CtElement)
ParentExiter#<R> void scanCtExecutable(spoon.reflect.declaration.CtExecutable)
ParentExiter#void scanCtFormalTypeDeclarer(spoon.reflect.declaration.CtFormalTypeDeclarer)
ParentExiter#void scanCtLoop(spoon.reflect.code.CtLoop)
ParentExiter#<T,E extends spoon.reflect.code.CtExpression> void scanCtTargetedExpression(spoon.reflect.code.CtTargetedExpression)
ParentExiter#<T> void scanCtType(spoon.reflect.declaration.CtType)
ParentExiter#<T> void scanCtVariable(spoon.reflect.declaration.CtVariable)
ParentExiter#<A extends java.lang.annotation.Annotation> void visitCtAnnotation(spoon.reflect.declaration.CtAnnotation)
ParentExiter#<T> void visitCtConstructor(spoon.reflect.declaration.CtConstructor)
ParentExiter#<T> void visitCtMethod(spoon.reflect.declaration.CtMethod)
ParentExiter#<T> void visitCtAnnotationMethod(spoon.reflect.declaration.CtAnnotationMethod)
ParentExiter#void visitCtAnonymousExecutable(spoon.reflect.declaration.CtAnonymousExecutable)
ParentExiter#<T> void visitCtArrayRead(spoon.reflect.code.CtArrayRead)
ParentExiter#<T> void visitCtArrayWrite(spoon.reflect.code.CtArrayWrite)
ParentExiter#<T> void visitCtAssert(spoon.reflect.code.CtAssert)
ParentExiter#<T,A extends T> void visitCtAssignment(spoon.reflect.code.CtAssignment)
ParentExiter#<T> void visitCtBinaryOperator(spoon.reflect.code.CtBinaryOperator)
ParentExiter#<R> void visitCtBlock(spoon.reflect.code.CtBlock)
ParentExiter#<E> void visitCtCase(spoon.reflect.code.CtCase)
ParentExiter#void visitCtCatch(spoon.reflect.code.CtCatch)
ParentExiter#<T> void visitCtCatchVariable(spoon.reflect.code.CtCatchVariable)
ParentExiter#<T> void visitCtClass(spoon.reflect.declaration.CtClass)
ParentExiter#void visitCtTypeParameter(spoon.reflect.declaration.CtTypeParameter)
ParentExiter#<T> void visitCtConditional(spoon.reflect.code.CtConditional)
ParentExiter#void visitCtDo(spoon.reflect.code.CtDo)
ParentExiter#void visitCtFor(spoon.reflect.code.CtFor)
ParentExiter#void visitCtForEach(spoon.reflect.code.CtForEach)
ParentExiter#void visitCtWhile(spoon.reflect.code.CtWhile)
ParentExiter#void visitCtIf(spoon.reflect.code.CtIf)
ParentExiter#<T> void visitCtSuperAccess(spoon.reflect.code.CtSuperAccess)
ParentExiter#<T> void visitCtInvocation(spoon.reflect.code.CtInvocation)
ParentExiter#<T> void visitCtNewArray(spoon.reflect.code.CtNewArray)
ParentExiter#<T> void visitCtConstructorCall(spoon.reflect.code.CtConstructorCall)
ParentExiter#<T> void visitCtNewClass(spoon.reflect.code.CtNewClass)
ParentExiter#<T> void visitCtLambda(spoon.reflect.code.CtLambda)
ParentExiter#<T,E extends spoon.reflect.code.CtExpression> void visitCtExecutableReferenceExpression(spoon.reflect.code.CtExecutableReferenceExpression)
ParentExiter#void visitCtPackage(spoon.reflect.declaration.CtPackage)
ParentExiter#<R> void visitCtReturn(spoon.reflect.code.CtReturn)
ParentExiter#<E> void visitCtSwitch(spoon.reflect.code.CtSwitch)
ParentExiter#void visitCtSynchronized(spoon.reflect.code.CtSynchronized)
ParentExiter#void visitCtThrow(spoon.reflect.code.CtThrow)
ParentExiter#void visitCtTry(spoon.reflect.code.CtTry)
ParentExiter#void visitCtTryWithResource(spoon.reflect.code.CtTryWithResource)
ParentExiter#<T> void visitCtUnaryOperator(spoon.reflect.code.CtUnaryOperator)
ParentExiter#void visitCtTypeParameterReference(spoon.reflect.reference.CtTypeParameterReference)
ReferenceBuilder#spoon.reflect.reference.CtExecutableReference getLambdaExecutableReference(org.eclipse.jdt.internal.compiler.ast.SingleNameReference)
TreeBuilderCompiler#org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration[] buildUnits(org.eclipse.jdt.internal.compiler.batch.CompilationUnit[])
TreeBuilderRequestor#void acceptResult(org.eclipse.jdt.internal.compiler.CompilationResult)
FileSystemFile#java.io.InputStream getContent()
FileSystemFile#java.lang.String getName()
FileSystemFile#spoon.compiler.SpoonFolder getParent()
FileSystemFile#java.io.File getFileSystemParent()
FileSystemFile#boolean isFile()
FileSystemFile#boolean isJava()
FileSystemFile#java.lang.String getPath()
FileSystemFile#java.lang.String toString()
FileSystemFile#boolean isArchive()
FileSystemFile#java.io.File toFile()
FileSystemFile#boolean isActualFile()
FileSystemFile#boolean equals(java.lang.Object)
FileSystemFile#int hashCode()
FileSystemFolder#java.util.List getAllFiles()
FileSystemFolder#java.util.List getFiles()
FileSystemFolder#java.lang.String getName()
FileSystemFolder#spoon.compiler.SpoonFolder getParent()
FileSystemFolder#java.util.List getSubFolders()
FileSystemFolder#boolean isFile()
FileSystemFolder#java.lang.String toString()
FileSystemFolder#java.util.List getAllJavaFiles()
FileSystemFolder#java.lang.String getPath()
FileSystemFolder#boolean isArchive()
FileSystemFolder#java.io.File getFileSystemParent()
FileSystemFolder#java.io.File toFile()
FileSystemFolder#boolean equals(java.lang.Object)
FileSystemFolder#int hashCode()
FileSystemFolder#void addFile(spoon.compiler.SpoonFile)
FileSystemFolder#void addFolder(spoon.compiler.SpoonFolder)
FilteringFolder#spoon.support.compiler.FilteringFolder removeAllThatMatch(java.lang.String)
SnippetCompilationHelper#void compileAndReplaceSnippetsIn(spoon.reflect.declaration.CtType)
SnippetCompilationHelper#spoon.reflect.code.CtStatement compileStatement(spoon.reflect.code.CtCodeSnippetStatement)
SnippetCompilationHelper#spoon.reflect.code.CtStatement compileStatement(spoon.reflect.code.CtCodeSnippetStatement,spoon.reflect.reference.CtTypeReference)
SnippetCompilationHelper#<T> spoon.reflect.code.CtExpression compileExpression(spoon.reflect.code.CtCodeSnippetExpression)
VirtualFile#java.io.InputStream getContent()
VirtualFile#boolean isJava()
VirtualFile#java.lang.String getName()
VirtualFile#spoon.compiler.SpoonFolder getParent()
VirtualFile#java.io.File getFileSystemParent()
VirtualFile#java.lang.String getPath()
VirtualFile#boolean isFile()
VirtualFile#boolean isArchive()
VirtualFile#java.io.File toFile()
VirtualFile#boolean isActualFile()
VirtualFolder#void addFile(spoon.compiler.SpoonFile)
VirtualFolder#void addFolder(spoon.compiler.SpoonFolder)
VirtualFolder#java.util.List getAllFiles()
VirtualFolder#java.util.List getAllJavaFiles()
VirtualFolder#java.util.List getFiles()
VirtualFolder#java.lang.String getName()
VirtualFolder#spoon.compiler.SpoonFolder getParent()
VirtualFolder#java.util.List getSubFolders()
VirtualFolder#boolean isFile()
VirtualFolder#java.lang.String getPath()
VirtualFolder#java.io.File getFileSystemParent()
VirtualFolder#boolean isArchive()
VirtualFolder#java.io.File toFile()
VirtualFolder#java.lang.String toString()
ZipFile#java.io.InputStream getContent()
ZipFile#java.lang.String getName()
ZipFile#spoon.compiler.SpoonFolder getParent()
ZipFile#java.io.File getFileSystemParent()
ZipFile#boolean isFile()
ZipFile#boolean isJava()
ZipFile#java.lang.String getPath()
ZipFile#java.lang.String toString()
ZipFile#boolean isArchive()
ZipFile#java.io.File toFile()
ZipFile#boolean isActualFile()
ZipFile#boolean equals(java.lang.Object)
ZipFile#int hashCode()
ZipFolder#java.util.List getAllFiles()
ZipFolder#java.util.List getAllJavaFiles()
ZipFolder#java.util.List getFiles()
ZipFolder#java.lang.String getName()
ZipFolder#spoon.compiler.SpoonFolder getParent()
ZipFolder#java.util.List getSubFolders()
ZipFolder#boolean isFile()
ZipFolder#java.lang.String toString()
ZipFolder#java.lang.String getPath()
ZipFolder#boolean isArchive()
ZipFolder#java.io.File getFileSystemParent()
ZipFolder#java.io.File toFile()
ZipFolder#boolean equals(java.lang.Object)
ZipFolder#int hashCode()
ZipFolder#void addFile(spoon.compiler.SpoonFile)
ZipFolder#void addFolder(spoon.compiler.SpoonFolder)
ZipFolder#void extract(java.io.File)
SpoonModelTree#void keyPressed(java.awt.event.KeyEvent)
SpoonModelTree#void keyReleased(java.awt.event.KeyEvent)
SpoonModelTree#void keyTyped(java.awt.event.KeyEvent)
SpoonModelTree#void mouseClicked(java.awt.event.MouseEvent)
SpoonModelTree#void mouseEntered(java.awt.event.MouseEvent)
SpoonModelTree#void mouseExited(java.awt.event.MouseEvent)
SpoonModelTree#void mousePressed(java.awt.event.MouseEvent)
SpoonModelTree#void mouseReleased(java.awt.event.MouseEvent)
SpoonModelTree#javax.swing.tree.DefaultMutableTreeNode next()
SpoonModelTree#javax.swing.tree.DefaultMutableTreeNode search()
SpoonModelTree#javax.swing.tree.DefaultMutableTreeNode expandAll(javax.swing.tree.DefaultMutableTreeNode)
SpoonModelTree#void expand(javax.swing.tree.DefaultMutableTreeNode)
SpoonModelTree#void setVisible(javax.swing.tree.DefaultMutableTreeNode)
SpoonTreeBuilder#void enter(spoon.reflect.declaration.CtElement)
SpoonTreeBuilder#void exit(spoon.reflect.declaration.CtElement)
SpoonTreeBuilder#javax.swing.tree.DefaultMutableTreeNode getRoot()
CtAnnotationFieldAccessImpl#void accept(spoon.reflect.visitor.CtVisitor)
CtAnnotationFieldAccessImpl#spoon.support.reflect.code.CtAnnotationFieldAccessImpl clone()
CtArrayAccessImpl#spoon.reflect.code.CtExpression getIndexExpression()
CtArrayAccessImpl#<C extends spoon.reflect.code.CtArrayAccess> C setIndexExpression(spoon.reflect.code.CtExpression)
CtArrayAccessImpl#spoon.reflect.code.CtArrayAccess clone()
CtArrayReadImpl#void accept(spoon.reflect.visitor.CtVisitor)
CtArrayReadImpl#spoon.reflect.code.CtArrayRead clone()
CtArrayWriteImpl#void accept(spoon.reflect.visitor.CtVisitor)
CtArrayWriteImpl#spoon.reflect.code.CtArrayWrite clone()
CtAssertImpl#void accept(spoon.reflect.visitor.CtVisitor)
CtAssertImpl#spoon.reflect.code.CtExpression getAssertExpression()
CtAssertImpl#<A extends spoon.reflect.code.CtAssert> A setAssertExpression(spoon.reflect.code.CtExpression)
CtAssertImpl#spoon.reflect.code.CtExpression getExpression()
CtAssertImpl#<A extends spoon.reflect.code.CtAssert> A setExpression(spoon.reflect.code.CtExpression)
CtAssertImpl#spoon.reflect.code.CtAssert clone()
CtAssignmentImpl#void accept(spoon.reflect.visitor.CtVisitor)
CtAssignmentImpl#spoon.reflect.code.CtExpression getAssigned()
CtAssignmentImpl#spoon.reflect.code.CtExpression getAssignment()
CtAssignmentImpl#spoon.reflect.reference.CtTypeReference getType()
CtAssignmentImpl#java.util.List getTypeCasts()
CtAssignmentImpl#<C extends spoon.reflect.code.CtAssignment> C setAssigned(spoon.reflect.code.CtExpression)
CtAssignmentImpl#<C extends spoon.reflect.code.CtRHSReceiver> C setAssignment(spoon.reflect.code.CtExpression)
CtAssignmentImpl#<C extends spoon.reflect.declaration.CtTypedElement> C setType(spoon.reflect.reference.CtTypeReference)
CtAssignmentImpl#<C extends spoon.reflect.code.CtExpression> C setTypeCasts(java.util.List)
CtAssignmentImpl#<C extends spoon.reflect.code.CtExpression> C addTypeCast(spoon.reflect.reference.CtTypeReference)
CtAssignmentImpl#<E extends T> void replace(spoon.reflect.code.CtExpression)
CtAssignmentImpl#T S()
CtAssignmentImpl#spoon.reflect.code.CtAssignment clone()
CtBinaryOperatorImpl#void accept(spoon.reflect.visitor.CtVisitor)
CtBinaryOperatorImpl#spoon.reflect.code.CtExpression getLeftHandOperand()
CtBinaryOperatorImpl#spoon.reflect.code.CtExpression getRightHandOperand()
CtBinaryOperatorImpl#<C extends spoon.reflect.code.CtBinaryOperator> C setLeftHandOperand(spoon.reflect.code.CtExpression)
CtBinaryOperatorImpl#<C extends spoon.reflect.code.CtBinaryOperator> C setRightHandOperand(spoon.reflect.code.CtExpression)
CtBinaryOperatorImpl#<C extends spoon.reflect.code.CtBinaryOperator> C setKind(spoon.reflect.code.BinaryOperatorKind)
CtBinaryOperatorImpl#spoon.reflect.code.BinaryOperatorKind getKind()
CtBinaryOperatorImpl#spoon.reflect.code.CtBinaryOperator clone()
CtBlockImpl#void accept(spoon.reflect.visitor.CtVisitor)
CtBlockImpl#java.util.List getStatements()
CtBlockImpl#<T extends spoon.reflect.code.CtStatement> T getStatement(int)
CtBlockImpl#<T extends spoon.reflect.code.CtStatement> T getLastStatement()
CtBlockImpl#<T extends spoon.reflect.code.CtStatementList> T insertBegin(spoon.reflect.code.CtStatementList)
CtBlockImpl#<T extends spoon.reflect.code.CtStatementList> T insertBegin(spoon.reflect.code.CtStatement)
CtBlockImpl#<T extends spoon.reflect.code.CtStatementList> T insertEnd(spoon.reflect.code.CtStatement)
CtBlockImpl#<T extends spoon.reflect.code.CtStatementList> T insertEnd(spoon.reflect.code.CtStatementList)
CtBlockImpl#<T extends spoon.reflect.code.CtStatementList> T insertAfter(spoon.reflect.visitor.Filter,spoon.reflect.code.CtStatement)
CtBlockImpl#<T extends spoon.reflect.code.CtStatementList> T insertAfter(spoon.reflect.visitor.Filter,spoon.reflect.code.CtStatementList)
CtBlockImpl#<T extends spoon.reflect.code.CtStatementList> T insertBefore(spoon.reflect.visitor.Filter,spoon.reflect.code.CtStatement)
CtBlockImpl#<T extends spoon.reflect.code.CtStatementList> T insertBefore(spoon.reflect.visitor.Filter,spoon.reflect.code.CtStatementList)
CtBlockImpl#<T extends spoon.reflect.code.CtStatementList> T setStatements(java.util.List)
CtBlockImpl#<T extends spoon.reflect.code.CtStatementList> T addStatement(spoon.reflect.code.CtStatement)
CtBlockImpl#<T extends spoon.reflect.code.CtStatementList> T addStatement(int,spoon.reflect.code.CtStatement)
CtBlockImpl#void removeStatement(spoon.reflect.code.CtStatement)
CtBlockImpl#java.util.Iterator iterator()
CtBlockImpl#<T extends R> void replace(spoon.reflect.code.CtBlock)
CtBlockImpl#R S()
CtBlockImpl#spoon.reflect.code.CtBlock clone()
CtBreakImpl#void accept(spoon.reflect.visitor.CtVisitor)
CtBreakImpl#java.lang.String getTargetLabel()
CtBreakImpl#<T extends spoon.reflect.code.CtLabelledFlowBreak> T setTargetLabel(java.lang.String)
CtBreakImpl#spoon.reflect.code.CtStatement getLabelledStatement()
CtBreakImpl#spoon.reflect.code.CtBreak clone()
CtCaseImpl#void accept(spoon.reflect.visitor.CtVisitor)
CtCaseImpl#spoon.reflect.code.CtExpression getCaseExpression()
CtCaseImpl#java.util.List getStatements()
CtCaseImpl#<T extends spoon.reflect.code.CtCase> T setCaseExpression(spoon.reflect.code.CtExpression)
CtCaseImpl#<T extends spoon.reflect.code.CtStatementList> T setStatements(java.util.List)
CtCaseImpl#<T extends spoon.reflect.code.CtStatementList> T addStatement(spoon.reflect.code.CtStatement)
CtCaseImpl#<T extends spoon.reflect.code.CtStatementList> T addStatement(int,spoon.reflect.code.CtStatement)
CtCaseImpl#<T extends spoon.reflect.code.CtStatementList> T insertBegin(spoon.reflect.code.CtStatement)
CtCaseImpl#<T extends spoon.reflect.code.CtStatementList> T insertBegin(spoon.reflect.code.CtStatementList)
CtCaseImpl#<T extends spoon.reflect.code.CtStatementList> T insertEnd(spoon.reflect.code.CtStatement)
CtCaseImpl#<T extends spoon.reflect.code.CtStatementList> T insertEnd(spoon.reflect.code.CtStatementList)
CtCaseImpl#<T extends spoon.reflect.code.CtStatementList> T insertBefore(spoon.reflect.visitor.Filter,spoon.reflect.code.CtStatement)
CtCaseImpl#<T extends spoon.reflect.code.CtStatementList> T insertBefore(spoon.reflect.visitor.Filter,spoon.reflect.code.CtStatementList)
CtCaseImpl#<T extends spoon.reflect.code.CtStatementList> T insertAfter(spoon.reflect.visitor.Filter,spoon.reflect.code.CtStatement)
CtCaseImpl#<T extends spoon.reflect.code.CtStatementList> T insertAfter(spoon.reflect.visitor.Filter,spoon.reflect.code.CtStatementList)
CtCaseImpl#<T extends spoon.reflect.code.CtStatement> T getStatement(int)
CtCaseImpl#<T extends spoon.reflect.code.CtStatement> T getLastStatement()
CtCaseImpl#void removeStatement(spoon.reflect.code.CtStatement)
CtCaseImpl#java.util.Iterator iterator()
CtCaseImpl#spoon.reflect.code.CtCase clone()
CtCatchImpl#void accept(spoon.reflect.visitor.CtVisitor)
CtCatchImpl#spoon.reflect.code.CtBlock getBody()
CtCatchImpl#spoon.reflect.code.CtCatchVariable getParameter()
CtCatchImpl#<T extends spoon.reflect.code.CtBodyHolder> T setBody(spoon.reflect.code.CtStatement)
CtCatchImpl#<T extends spoon.reflect.code.CtCatch> T setParameter(spoon.reflect.code.CtCatchVariable)
CtCatchImpl#spoon.reflect.code.CtCatch clone()
CtCatchVariableImpl#void accept(spoon.reflect.visitor.CtVisitor)
CtCatchVariableImpl#spoon.reflect.code.CtExpression getDefaultExpression()
CtCatchVariableImpl#spoon.reflect.reference.CtCatchVariableReference getReference()
CtCatchVariableImpl#java.lang.String getSimpleName()
CtCatchVariableImpl#spoon.reflect.reference.CtTypeReference getType()
CtCatchVariableImpl#<C extends spoon.reflect.declaration.CtVariable> C setDefaultExpression(spoon.reflect.code.CtExpression)
CtCatchVariableImpl#<C extends spoon.reflect.declaration.CtNamedElement> C setSimpleName(java.lang.String)
CtCatchVariableImpl#<C extends spoon.reflect.declaration.CtTypedElement> C setType(spoon.reflect.reference.CtTypeReference)
CtCatchVariableImpl#<T extends spoon.reflect.declaration.CtMultiTypedElement> T addMultiType(spoon.reflect.reference.CtTypeReference)
CtCatchVariableImpl#boolean removeMultiType(spoon.reflect.reference.CtTypeReference)
CtCatchVariableImpl#java.util.List getMultiTypes()
CtCatchVariableImpl#<T extends spoon.reflect.declaration.CtMultiTypedElement> T setMultiTypes(java.util.List)
CtCatchVariableImpl#java.util.Set getModifiers()
CtCatchVariableImpl#boolean hasModifier(spoon.reflect.declaration.ModifierKind)
CtCatchVariableImpl#<C extends spoon.reflect.declaration.CtModifiable> C setModifiers(java.util.Set)
CtCatchVariableImpl#<C extends spoon.reflect.declaration.CtModifiable> C addModifier(spoon.reflect.declaration.ModifierKind)
CtCatchVariableImpl#boolean removeModifier(spoon.reflect.declaration.ModifierKind)
CtCatchVariableImpl#<C extends spoon.reflect.declaration.CtModifiable> C setVisibility(spoon.reflect.declaration.ModifierKind)
CtCatchVariableImpl#spoon.reflect.declaration.ModifierKind getVisibility()
CtCatchVariableImpl#spoon.reflect.code.CtCatchVariable clone()
CtCodeElementImpl#<R extends spoon.reflect.code.CtCodeElement> R partiallyEvaluate()
CtCodeElementImpl#spoon.reflect.code.CtCodeElement clone()
CtCodeSnippetExpressionImpl#void accept(spoon.reflect.visitor.CtVisitor)
CtCodeSnippetExpressionImpl#java.lang.String getValue()
CtCodeSnippetExpressionImpl#<C extends spoon.reflect.declaration.CtCodeSnippet> C setValue(java.lang.String)
CtCodeSnippetExpressionImpl#<E extends spoon.reflect.code.CtExpression> E compile()
CtCodeSnippetExpressionImpl#spoon.reflect.code.CtCodeSnippetExpression clone()
CtCodeSnippetStatementImpl#void accept(spoon.reflect.visitor.CtVisitor)
CtCodeSnippetStatementImpl#java.lang.String getValue()
CtCodeSnippetStatementImpl#<C extends spoon.reflect.declaration.CtCodeSnippet> C setValue(java.lang.String)
CtCodeSnippetStatementImpl#<S extends spoon.reflect.code.CtStatement> S compile()
CtCodeSnippetStatementImpl#spoon.reflect.code.CtCodeSnippetStatement clone()
CtCommentImpl#java.lang.String getContent()
CtCommentImpl#<E extends spoon.reflect.code.CtComment> E setContent(java.lang.String)
CtCommentImpl#spoon.reflect.code.CtComment$CommentType getCommentType()
CtCommentImpl#<E extends spoon.reflect.code.CtComment> E setCommentType(spoon.reflect.code.CtComment$CommentType)
CtCommentImpl#void accept(spoon.reflect.visitor.CtVisitor)
CtCommentImpl#boolean equals(java.lang.Object)
CtCommentImpl#int hashCode()
CtCommentImpl#spoon.reflect.code.CtComment clone()
CtConditionalImpl#void accept(spoon.reflect.visitor.CtVisitor)
CtConditionalImpl#spoon.reflect.code.CtExpression getElseExpression()
CtConditionalImpl#spoon.reflect.code.CtExpression getCondition()
CtConditionalImpl#spoon.reflect.code.CtExpression getThenExpression()
CtConditionalImpl#<C extends spoon.reflect.code.CtConditional> C setElseExpression(spoon.reflect.code.CtExpression)
CtConditionalImpl#<C extends spoon.reflect.code.CtConditional> C setCondition(spoon.reflect.code.CtExpression)
CtConditionalImpl#<C extends spoon.reflect.code.CtConditional> C setThenExpression(spoon.reflect.code.CtExpression)
CtConditionalImpl#spoon.reflect.code.CtConditional clone()
CtConstructorCallImpl#void accept(spoon.reflect.visitor.CtVisitor)
CtConstructorCallImpl#java.util.List getArguments()
CtConstructorCallImpl#spoon.reflect.reference.CtExecutableReference getExecutable()
CtConstructorCallImpl#java.lang.String getLabel()
CtConstructorCallImpl#<C extends spoon.reflect.code.CtStatement> C insertAfter(spoon.reflect.code.CtStatement)
CtConstructorCallImpl#<C extends spoon.reflect.code.CtStatement> C insertBefore(spoon.reflect.code.CtStatement)
CtConstructorCallImpl#<C extends spoon.reflect.code.CtStatement> C insertAfter(spoon.reflect.code.CtStatementList)
CtConstructorCallImpl#<C extends spoon.reflect.code.CtStatement> C insertBefore(spoon.reflect.code.CtStatementList)
CtConstructorCallImpl#<C extends spoon.reflect.code.CtAbstractInvocation> C setArguments(java.util.List)
CtConstructorCallImpl#<C extends spoon.reflect.code.CtAbstractInvocation> C addArgument(spoon.reflect.code.CtExpression)
CtConstructorCallImpl#void removeArgument(spoon.reflect.code.CtExpression)
CtConstructorCallImpl#<C extends spoon.reflect.code.CtAbstractInvocation> C setExecutable(spoon.reflect.reference.CtExecutableReference)
CtConstructorCallImpl#<C extends spoon.reflect.code.CtStatement> C setLabel(java.lang.String)
CtConstructorCallImpl#void replace(spoon.reflect.code.CtStatement)
CtConstructorCallImpl#java.util.List getActualTypeArguments()
CtConstructorCallImpl#<T extends spoon.reflect.reference.CtActualTypeContainer> T setActualTypeArguments(java.util.List)
CtConstructorCallImpl#<T extends spoon.reflect.reference.CtActualTypeContainer> T addActualTypeArgument(spoon.reflect.reference.CtTypeReference)
CtConstructorCallImpl#boolean removeActualTypeArgument(spoon.reflect.reference.CtTypeReference)
CtConstructorCallImpl#spoon.reflect.reference.CtTypeReference getType()
CtConstructorCallImpl#<C extends spoon.reflect.declaration.CtTypedElement> C setType(spoon.reflect.reference.CtTypeReference)
CtConstructorCallImpl#spoon.reflect.code.CtConstructorCall clone()
CtContinueImpl#void accept(spoon.reflect.visitor.CtVisitor)
CtContinueImpl#java.lang.String getTargetLabel()
CtContinueImpl#<T extends spoon.reflect.code.CtLabelledFlowBreak> T setTargetLabel(java.lang.String)
CtContinueImpl#spoon.reflect.code.CtStatement getLabelledStatement()
CtContinueImpl#spoon.reflect.code.CtContinue clone()
CtDoImpl#void accept(spoon.reflect.visitor.CtVisitor)
CtDoImpl#spoon.reflect.code.CtExpression getLoopingExpression()
CtDoImpl#<T extends spoon.reflect.code.CtDo> T setLoopingExpression(spoon.reflect.code.CtExpression)
CtDoImpl#spoon.reflect.code.CtDo clone()
CtExecutableReferenceExpressionImpl#void accept(spoon.reflect.visitor.CtVisitor)
CtExecutableReferenceExpressionImpl#spoon.reflect.reference.CtExecutableReference getExecutable()
CtExecutableReferenceExpressionImpl#<C extends spoon.reflect.code.CtExecutableReferenceExpression> C setExecutable(spoon.reflect.reference.CtExecutableReference)
CtExecutableReferenceExpressionImpl#spoon.reflect.code.CtExecutableReferenceExpression clone()
CtExpressionImpl#spoon.reflect.reference.CtTypeReference getType()
CtExpressionImpl#java.util.List getTypeCasts()
CtExpressionImpl#<C extends spoon.reflect.declaration.CtTypedElement> C setType(spoon.reflect.reference.CtTypeReference)
CtExpressionImpl#<C extends spoon.reflect.code.CtExpression> C setTypeCasts(java.util.List)
CtExpressionImpl#<C extends spoon.reflect.code.CtExpression> C addTypeCast(spoon.reflect.reference.CtTypeReference)
CtExpressionImpl#<E extends T> void replace(spoon.reflect.code.CtExpression)
CtExpressionImpl#T S()
CtExpressionImpl#spoon.reflect.code.CtExpression clone()
CtFieldAccessImpl#spoon.reflect.code.CtExpression getTarget()
CtFieldAccessImpl#<C extends spoon.reflect.code.CtTargetedExpression> C setTarget(spoon.reflect.code.CtExpression)
CtFieldAccessImpl#spoon.reflect.reference.CtFieldReference getVariable()
CtFieldAccessImpl#spoon.reflect.code.CtFieldAccess clone()
CtFieldReadImpl#void accept(spoon.reflect.visitor.CtVisitor)
CtFieldReadImpl#spoon.reflect.code.CtFieldRead clone()
CtFieldWriteImpl#void accept(spoon.reflect.visitor.CtVisitor)
CtFieldWriteImpl#spoon.reflect.code.CtFieldWrite clone()
CtForEachImpl#void accept(spoon.reflect.visitor.CtVisitor)
CtForEachImpl#spoon.reflect.code.CtExpression getExpression()
CtForEachImpl#spoon.reflect.code.CtLocalVariable getVariable()
CtForEachImpl#<T extends spoon.reflect.code.CtForEach> T setExpression(spoon.reflect.code.CtExpression)
CtForEachImpl#<T extends spoon.reflect.code.CtForEach> T setVariable(spoon.reflect.code.CtLocalVariable)
CtForEachImpl#spoon.reflect.code.CtForEach clone()
CtForImpl#void accept(spoon.reflect.visitor.CtVisitor)
CtForImpl#spoon.reflect.code.CtExpression getExpression()
CtForImpl#<T extends spoon.reflect.code.CtFor> T setExpression(spoon.reflect.code.CtExpression)
CtForImpl#java.util.List getForInit()
CtForImpl#<T extends spoon.reflect.code.CtFor> T addForInit(spoon.reflect.code.CtStatement)
CtForImpl#<T extends spoon.reflect.code.CtFor> T setForInit(java.util.List)
CtForImpl#boolean removeForInit(spoon.reflect.code.CtStatement)
CtForImpl#java.util.List getForUpdate()
CtForImpl#<T extends spoon.reflect.code.CtFor> T addForUpdate(spoon.reflect.code.CtStatement)
CtForImpl#<T extends spoon.reflect.code.CtFor> T setForUpdate(java.util.List)
CtForImpl#boolean removeForUpdate(spoon.reflect.code.CtStatement)
CtForImpl#spoon.reflect.code.CtFor clone()
CtIfImpl#void accept(spoon.reflect.visitor.CtVisitor)
CtIfImpl#spoon.reflect.code.CtExpression getCondition()
CtIfImpl#<S extends spoon.reflect.code.CtStatement> S getElseStatement()
CtIfImpl#<S extends spoon.reflect.code.CtStatement> S getThenStatement()
CtIfImpl#<T extends spoon.reflect.code.CtIf> T setCondition(spoon.reflect.code.CtExpression)
CtIfImpl#<T extends spoon.reflect.code.CtIf> T setElseStatement(spoon.reflect.code.CtStatement)
CtIfImpl#<T extends spoon.reflect.code.CtIf> T setThenStatement(spoon.reflect.code.CtStatement)
CtIfImpl#spoon.reflect.code.CtIf clone()
CtIfImpl#java.lang.Void S()
CtIfImpl#spoon.reflect.code.CtCodeElement getSubstitution(spoon.reflect.declaration.CtType)
CtInvocationImpl#void accept(spoon.reflect.visitor.CtVisitor)
CtInvocationImpl#java.util.List getArguments()
CtInvocationImpl#<C extends spoon.reflect.code.CtAbstractInvocation> C addArgument(spoon.reflect.code.CtExpression)
CtInvocationImpl#void removeArgument(spoon.reflect.code.CtExpression)
CtInvocationImpl#spoon.reflect.reference.CtExecutableReference getExecutable()
CtInvocationImpl#<C extends spoon.reflect.code.CtStatement> C insertAfter(spoon.reflect.code.CtStatement)
CtInvocationImpl#<C extends spoon.reflect.code.CtStatement> C insertBefore(spoon.reflect.code.CtStatement)
CtInvocationImpl#<C extends spoon.reflect.code.CtStatement> C insertAfter(spoon.reflect.code.CtStatementList)
CtInvocationImpl#<C extends spoon.reflect.code.CtStatement> C insertBefore(spoon.reflect.code.CtStatementList)
CtInvocationImpl#<C extends spoon.reflect.code.CtAbstractInvocation> C setArguments(java.util.List)
CtInvocationImpl#<C extends spoon.reflect.code.CtAbstractInvocation> C setExecutable(spoon.reflect.reference.CtExecutableReference)
CtInvocationImpl#java.lang.String getLabel()
CtInvocationImpl#<C extends spoon.reflect.code.CtStatement> C setLabel(java.lang.String)
CtInvocationImpl#void replace(spoon.reflect.code.CtStatement)
CtInvocationImpl#spoon.reflect.reference.CtTypeReference getType()
CtInvocationImpl#<C extends spoon.reflect.declaration.CtTypedElement> C setType(spoon.reflect.reference.CtTypeReference)
CtInvocationImpl#java.util.List getActualTypeArguments()
CtInvocationImpl#<T extends spoon.reflect.reference.CtActualTypeContainer> T setActualTypeArguments(java.util.List)
CtInvocationImpl#<T extends spoon.reflect.reference.CtActualTypeContainer> T addActualTypeArgument(spoon.reflect.reference.CtTypeReference)
CtInvocationImpl#boolean removeActualTypeArgument(spoon.reflect.reference.CtTypeReference)
CtInvocationImpl#spoon.reflect.code.CtInvocation clone()
CtJavaDocImpl#java.util.List getTags()
CtJavaDocImpl#<E extends spoon.reflect.code.CtJavaDoc> E setTags(java.util.List)
CtJavaDocImpl#<E extends spoon.reflect.code.CtJavaDoc> E addTag(spoon.reflect.code.CtJavaDocTag)
CtJavaDocImpl#<E extends spoon.reflect.code.CtJavaDoc> E addTag(int,spoon.reflect.code.CtJavaDocTag)
CtJavaDocImpl#<E extends spoon.reflect.code.CtJavaDoc> E removeTag(int)
CtJavaDocImpl#<E extends spoon.reflect.code.CtJavaDoc> E removeTag(spoon.reflect.code.CtJavaDocTag)
CtJavaDocImpl#java.lang.String getShortDescription()
CtJavaDocImpl#java.lang.String getLongDescription()
CtJavaDocImpl#void accept(spoon.reflect.visitor.CtVisitor)
CtJavaDocImpl#spoon.reflect.code.CtJavaDoc clone()
CtJavaDocTagImpl#spoon.reflect.code.CtJavaDocTag$TagType getType()
CtJavaDocTagImpl#<E extends spoon.reflect.code.CtJavaDocTag> E setType(java.lang.String)
CtJavaDocTagImpl#<E extends spoon.reflect.code.CtJavaDocTag> E setType(spoon.reflect.code.CtJavaDocTag$TagType)
CtJavaDocTagImpl#java.lang.String getContent()
CtJavaDocTagImpl#<E extends spoon.reflect.code.CtJavaDocTag> E setContent(java.lang.String)
CtJavaDocTagImpl#java.lang.String getParam()
CtJavaDocTagImpl#<E extends spoon.reflect.code.CtJavaDocTag> E setParam(java.lang.String)
CtJavaDocTagImpl#void accept(spoon.reflect.visitor.CtVisitor)
CtJavaDocTagImpl#spoon.reflect.code.CtJavaDocTag clone()
CtLambdaImpl#void accept(spoon.reflect.visitor.CtVisitor)
CtLambdaImpl#java.lang.String getSimpleName()
CtLambdaImpl#<C extends spoon.reflect.declaration.CtNamedElement> C setSimpleName(java.lang.String)
CtLambdaImpl#spoon.reflect.code.CtBlock getBody()
CtLambdaImpl#<C extends spoon.reflect.code.CtBodyHolder> C setBody(spoon.reflect.code.CtStatement)
CtLambdaImpl#<R> spoon.reflect.declaration.CtMethod getOverriddenMethod()
CtLambdaImpl#java.util.List getParameters()
CtLambdaImpl#<C extends spoon.reflect.declaration.CtExecutable> C setParameters(java.util.List)
CtLambdaImpl#<C extends spoon.reflect.declaration.CtExecutable> C addParameter(spoon.reflect.declaration.CtParameter)
CtLambdaImpl#boolean removeParameter(spoon.reflect.declaration.CtParameter)
CtLambdaImpl#java.util.Set getThrownTypes()
CtLambdaImpl#<C extends spoon.reflect.declaration.CtExecutable> C setThrownTypes(java.util.Set)
CtLambdaImpl#<C extends spoon.reflect.declaration.CtExecutable> C addThrownType(spoon.reflect.reference.CtTypeReference)
CtLambdaImpl#boolean removeThrownType(spoon.reflect.reference.CtTypeReference)
CtLambdaImpl#java.lang.String getSignature()
CtLambdaImpl#spoon.reflect.reference.CtExecutableReference getReference()
CtLambdaImpl#spoon.reflect.code.CtExpression getExpression()
CtLambdaImpl#<C extends spoon.reflect.code.CtLambda> C setExpression(spoon.reflect.code.CtExpression)
CtLambdaImpl#spoon.reflect.code.CtLambda clone()
CtLiteralImpl#void accept(spoon.reflect.visitor.CtVisitor)
CtLiteralImpl#T getValue()
CtLiteralImpl#<C extends spoon.reflect.code.CtLiteral> C setValue(T)
CtLiteralImpl#spoon.reflect.code.CtLiteral clone()
CtLocalVariableImpl#void accept(spoon.reflect.visitor.CtVisitor)
CtLocalVariableImpl#spoon.reflect.code.CtExpression getDefaultExpression()
CtLocalVariableImpl#spoon.reflect.reference.CtLocalVariableReference getReference()
CtLocalVariableImpl#java.lang.String getSimpleName()
CtLocalVariableImpl#spoon.reflect.reference.CtTypeReference getType()
CtLocalVariableImpl#<C extends spoon.reflect.declaration.CtVariable> C setDefaultExpression(spoon.reflect.code.CtExpression)
CtLocalVariableImpl#<C extends spoon.reflect.declaration.CtNamedElement> C setSimpleName(java.lang.String)
CtLocalVariableImpl#<C extends spoon.reflect.declaration.CtTypedElement> C setType(spoon.reflect.reference.CtTypeReference)
CtLocalVariableImpl#java.util.Set getModifiers()
CtLocalVariableImpl#boolean hasModifier(spoon.reflect.declaration.ModifierKind)
CtLocalVariableImpl#<C extends spoon.reflect.declaration.CtModifiable> C setModifiers(java.util.Set)
CtLocalVariableImpl#<C extends spoon.reflect.declaration.CtModifiable> C addModifier(spoon.reflect.declaration.ModifierKind)
CtLocalVariableImpl#boolean removeModifier(spoon.reflect.declaration.ModifierKind)
CtLocalVariableImpl#<C extends spoon.reflect.declaration.CtModifiable> C setVisibility(spoon.reflect.declaration.ModifierKind)
CtLocalVariableImpl#spoon.reflect.declaration.ModifierKind getVisibility()
CtLocalVariableImpl#spoon.reflect.code.CtExpression getAssignment()
CtLocalVariableImpl#<C extends spoon.reflect.code.CtRHSReceiver> C setAssignment(spoon.reflect.code.CtExpression)
CtLocalVariableImpl#spoon.reflect.code.CtLocalVariable clone()
CtLoopImpl#spoon.reflect.code.CtStatement getBody()
CtLoopImpl#<T extends spoon.reflect.code.CtBodyHolder> T setBody(spoon.reflect.code.CtStatement)
CtLoopImpl#spoon.reflect.code.CtLoop clone()
CtLoopImpl#java.lang.Void S()
CtLoopImpl#spoon.reflect.code.CtCodeElement getSubstitution(spoon.reflect.declaration.CtType)
CtNewArrayImpl#void accept(spoon.reflect.visitor.CtVisitor)
CtNewArrayImpl#java.util.List getDimensionExpressions()
CtNewArrayImpl#java.util.List getElements()
CtNewArrayImpl#<C extends spoon.reflect.code.CtNewArray> C setDimensionExpressions(java.util.List)
CtNewArrayImpl#<C extends spoon.reflect.code.CtNewArray> C addDimensionExpression(spoon.reflect.code.CtExpression)
CtNewArrayImpl#boolean removeDimensionExpression(spoon.reflect.code.CtExpression)
CtNewArrayImpl#<C extends spoon.reflect.code.CtNewArray> C setElements(java.util.List)
CtNewArrayImpl#<C extends spoon.reflect.code.CtNewArray> C addElement(spoon.reflect.code.CtExpression)
CtNewArrayImpl#boolean removeElement(spoon.reflect.code.CtExpression)
CtNewArrayImpl#spoon.reflect.code.CtNewArray clone()
CtNewClassImpl#void accept(spoon.reflect.visitor.CtVisitor)
CtNewClassImpl#spoon.reflect.declaration.CtClass getAnonymousClass()
CtNewClassImpl#<N extends spoon.reflect.code.CtNewClass> N setAnonymousClass(spoon.reflect.declaration.CtClass)
CtNewClassImpl#spoon.reflect.code.CtNewClass clone()
CtOperatorAssignmentImpl#void accept(spoon.reflect.visitor.CtVisitor)
CtOperatorAssignmentImpl#spoon.reflect.code.BinaryOperatorKind getKind()
CtOperatorAssignmentImpl#<C extends spoon.reflect.code.CtOperatorAssignment> C setKind(spoon.reflect.code.BinaryOperatorKind)
CtOperatorAssignmentImpl#spoon.reflect.code.CtOperatorAssignment clone()
CtReturnImpl#void accept(spoon.reflect.visitor.CtVisitor)
CtReturnImpl#spoon.reflect.code.CtExpression getReturnedExpression()
CtReturnImpl#<T extends spoon.reflect.code.CtReturn> T setReturnedExpression(spoon.reflect.code.CtExpression)
CtReturnImpl#spoon.reflect.code.CtReturn clone()
CtReturnImpl#java.lang.Void S()
CtReturnImpl#spoon.reflect.code.CtCodeElement getSubstitution(spoon.reflect.declaration.CtType)
CtStatementImpl#void insertAfter(spoon.reflect.code.CtStatement,spoon.reflect.code.CtStatement)
CtStatementImpl#void insertAfter(spoon.reflect.code.CtStatement,spoon.reflect.code.CtStatementList)
CtStatementImpl#void insertBefore(spoon.reflect.code.CtStatement,spoon.reflect.code.CtStatement)
CtStatementImpl#void insertBefore(spoon.reflect.code.CtStatement,spoon.reflect.code.CtStatementList)
CtStatementImpl#<T extends spoon.reflect.code.CtStatement> T insertBefore(spoon.reflect.code.CtStatement)
CtStatementImpl#<T extends spoon.reflect.code.CtStatement> T insertBefore(spoon.reflect.code.CtStatementList)
CtStatementImpl#<T extends spoon.reflect.code.CtStatement> T insertAfter(spoon.reflect.code.CtStatement)
CtStatementImpl#<T extends spoon.reflect.code.CtStatement> T insertAfter(spoon.reflect.code.CtStatementList)
CtStatementImpl#java.lang.String getLabel()
CtStatementImpl#<T extends spoon.reflect.code.CtStatement> T setLabel(java.lang.String)
CtStatementImpl#void replace(spoon.reflect.code.CtStatement)
CtStatementImpl#spoon.reflect.code.CtStatement clone()
CtStatementListImpl#void accept(spoon.reflect.visitor.CtVisitor)
CtStatementListImpl#java.util.List getStatements()
CtStatementListImpl#<T extends spoon.reflect.code.CtStatementList> T setStatements(java.util.List)
CtStatementListImpl#<T extends spoon.reflect.code.CtStatementList> T addStatement(spoon.reflect.code.CtStatement)
CtStatementListImpl#<T extends spoon.reflect.code.CtStatementList> T addStatement(int,spoon.reflect.code.CtStatement)
CtStatementListImpl#<T extends spoon.reflect.code.CtStatementList> T insertBegin(spoon.reflect.code.CtStatementList)
CtStatementListImpl#<T extends spoon.reflect.code.CtStatementList> T insertBegin(spoon.reflect.code.CtStatement)
CtStatementListImpl#<T extends spoon.reflect.code.CtStatementList> T insertEnd(spoon.reflect.code.CtStatement)
CtStatementListImpl#<T extends spoon.reflect.code.CtStatementList> T insertEnd(spoon.reflect.code.CtStatementList)
CtStatementListImpl#<T extends spoon.reflect.code.CtStatementList> T insertAfter(spoon.reflect.visitor.Filter,spoon.reflect.code.CtStatement)
CtStatementListImpl#<T extends spoon.reflect.code.CtStatementList> T insertAfter(spoon.reflect.visitor.Filter,spoon.reflect.code.CtStatementList)
CtStatementListImpl#<T extends spoon.reflect.code.CtStatementList> T insertBefore(spoon.reflect.visitor.Filter,spoon.reflect.code.CtStatement)
CtStatementListImpl#<T extends spoon.reflect.code.CtStatementList> T insertBefore(spoon.reflect.visitor.Filter,spoon.reflect.code.CtStatementList)
CtStatementListImpl#<T extends spoon.reflect.code.CtStatement> T getStatement(int)
CtStatementListImpl#<T extends spoon.reflect.code.CtStatement> T getLastStatement()
CtStatementListImpl#void removeStatement(spoon.reflect.code.CtStatement)
CtStatementListImpl#<E extends spoon.reflect.declaration.CtElement> E setPosition(spoon.reflect.cu.SourcePosition)
CtStatementListImpl#java.util.Iterator iterator()
CtStatementListImpl#spoon.reflect.code.CtStatementList clone()
CtStatementListImpl#spoon.reflect.code.CtStatementList getSubstitution(spoon.reflect.declaration.CtType)
CtSuperAccessImpl#void accept(spoon.reflect.visitor.CtVisitor)
CtSuperAccessImpl#spoon.reflect.code.CtExpression getTarget()
CtSuperAccessImpl#<C extends spoon.reflect.code.CtTargetedExpression> C setTarget(spoon.reflect.code.CtExpression)
CtSuperAccessImpl#spoon.reflect.code.CtSuperAccess clone()
CtSwitchImpl#void accept(spoon.reflect.visitor.CtVisitor)
CtSwitchImpl#java.util.List getCases()
CtSwitchImpl#spoon.reflect.code.CtExpression getSelector()
CtSwitchImpl#<T extends spoon.reflect.code.CtSwitch> T setCases(java.util.List)
CtSwitchImpl#<T extends spoon.reflect.code.CtSwitch> T setSelector(spoon.reflect.code.CtExpression)
CtSwitchImpl#<T extends spoon.reflect.code.CtSwitch> T addCase(spoon.reflect.code.CtCase)
CtSwitchImpl#boolean removeCase(spoon.reflect.code.CtCase)
CtSwitchImpl#spoon.reflect.code.CtSwitch clone()
CtSynchronizedImpl#void accept(spoon.reflect.visitor.CtVisitor)
CtSynchronizedImpl#spoon.reflect.code.CtBlock getBlock()
CtSynchronizedImpl#spoon.reflect.code.CtExpression getExpression()
CtSynchronizedImpl#<T extends spoon.reflect.code.CtSynchronized> T setBlock(spoon.reflect.code.CtBlock)
CtSynchronizedImpl#<T extends spoon.reflect.code.CtSynchronized> T setExpression(spoon.reflect.code.CtExpression)
CtSynchronizedImpl#spoon.reflect.code.CtSynchronized clone()
CtTargetedExpressionImpl#T getTarget()
CtTargetedExpressionImpl#<C extends spoon.reflect.code.CtTargetedExpression> C setTarget(T extends spoon.reflect.code.CtExpression)
CtTargetedExpressionImpl#spoon.reflect.code.CtTargetedExpression clone()
CtThisAccessImpl#void accept(spoon.reflect.visitor.CtVisitor)
CtThisAccessImpl#spoon.reflect.code.CtThisAccess clone()
CtThrowImpl#void accept(spoon.reflect.visitor.CtVisitor)
CtThrowImpl#spoon.reflect.code.CtExpression getThrownExpression()
CtThrowImpl#<T extends spoon.reflect.code.CtThrow> T setThrownExpression(spoon.reflect.code.CtExpression)
CtThrowImpl#spoon.reflect.code.CtThrow clone()
CtThrowImpl#java.lang.Void S()
CtThrowImpl#spoon.reflect.code.CtCodeElement getSubstitution(spoon.reflect.declaration.CtType)
CtTryImpl#void accept(spoon.reflect.visitor.CtVisitor)
CtTryImpl#java.util.List getCatchers()
CtTryImpl#<T extends spoon.reflect.code.CtTry> T setCatchers(java.util.List)
CtTryImpl#<T extends spoon.reflect.code.CtTry> T addCatcher(spoon.reflect.code.CtCatch)
CtTryImpl#boolean removeCatcher(spoon.reflect.code.CtCatch)
CtTryImpl#spoon.reflect.code.CtBlock getFinalizer()
CtTryImpl#<T extends spoon.reflect.code.CtTry> T setFinalizer(spoon.reflect.code.CtBlock)
CtTryImpl#spoon.reflect.code.CtBlock getBody()
CtTryImpl#<T extends spoon.reflect.code.CtBodyHolder> T setBody(spoon.reflect.code.CtStatement)
CtTryImpl#spoon.reflect.code.CtTry clone()
CtTryImpl#java.lang.Void S()
CtTryImpl#spoon.reflect.code.CtCodeElement getSubstitution(spoon.reflect.declaration.CtType)
CtTryWithResourceImpl#void accept(spoon.reflect.visitor.CtVisitor)
CtTryWithResourceImpl#java.util.List getResources()
CtTryWithResourceImpl#<T extends spoon.reflect.code.CtTryWithResource> T setResources(java.util.List)
CtTryWithResourceImpl#<T extends spoon.reflect.code.CtTryWithResource> T addResource(spoon.reflect.code.CtLocalVariable)
CtTryWithResourceImpl#boolean removeResource(spoon.reflect.code.CtLocalVariable)
CtTryWithResourceImpl#spoon.reflect.code.CtTryWithResource clone()
CtTypeAccessImpl#void accept(spoon.reflect.visitor.CtVisitor)
CtTypeAccessImpl#spoon.reflect.reference.CtTypeReference getAccessedType()
CtTypeAccessImpl#<C extends spoon.reflect.code.CtTypeAccess> C setAccessedType(spoon.reflect.reference.CtTypeReference)
CtTypeAccessImpl#spoon.reflect.reference.CtTypeReference getType()
CtTypeAccessImpl#<C extends spoon.reflect.declaration.CtTypedElement> C setType(spoon.reflect.reference.CtTypeReference)
CtTypeAccessImpl#spoon.reflect.code.CtTypeAccess clone()
CtUnaryOperatorImpl#void accept(spoon.reflect.visitor.CtVisitor)
CtUnaryOperatorImpl#spoon.reflect.code.CtExpression getOperand()
CtUnaryOperatorImpl#spoon.reflect.code.UnaryOperatorKind getKind()
CtUnaryOperatorImpl#java.lang.String getLabel()
CtUnaryOperatorImpl#<C extends spoon.reflect.code.CtStatement> C insertAfter(spoon.reflect.code.CtStatement)
CtUnaryOperatorImpl#<C extends spoon.reflect.code.CtStatement> C insertBefore(spoon.reflect.code.CtStatement)
CtUnaryOperatorImpl#<C extends spoon.reflect.code.CtStatement> C insertAfter(spoon.reflect.code.CtStatementList)
CtUnaryOperatorImpl#<C extends spoon.reflect.code.CtStatement> C insertBefore(spoon.reflect.code.CtStatementList)
CtUnaryOperatorImpl#<C extends spoon.reflect.code.CtUnaryOperator> C setOperand(spoon.reflect.code.CtExpression)
CtUnaryOperatorImpl#<C extends spoon.reflect.code.CtUnaryOperator> C setKind(spoon.reflect.code.UnaryOperatorKind)
CtUnaryOperatorImpl#<C extends spoon.reflect.code.CtStatement> C setLabel(java.lang.String)
CtUnaryOperatorImpl#void replace(spoon.reflect.code.CtStatement)
CtUnaryOperatorImpl#spoon.reflect.code.CtUnaryOperator clone()
CtVariableAccessImpl#spoon.reflect.reference.CtVariableReference getVariable()
CtVariableAccessImpl#<C extends spoon.reflect.code.CtVariableAccess> C setVariable(spoon.reflect.reference.CtVariableReference)
CtVariableAccessImpl#spoon.reflect.reference.CtTypeReference getType()
CtVariableAccessImpl#<C extends spoon.reflect.declaration.CtTypedElement> C setType(spoon.reflect.reference.CtTypeReference)
CtVariableAccessImpl#spoon.reflect.code.CtVariableAccess clone()
CtVariableReadImpl#void accept(spoon.reflect.visitor.CtVisitor)
CtVariableReadImpl#spoon.reflect.code.CtVariableRead clone()
CtVariableWriteImpl#void accept(spoon.reflect.visitor.CtVisitor)
CtVariableWriteImpl#spoon.reflect.code.CtVariableWrite clone()
CtWhileImpl#void accept(spoon.reflect.visitor.CtVisitor)
CtWhileImpl#spoon.reflect.code.CtExpression getLoopingExpression()
CtWhileImpl#<T extends spoon.reflect.code.CtWhile> T setLoopingExpression(spoon.reflect.code.CtExpression)
CtWhileImpl#spoon.reflect.code.CtWhile clone()
BodyHolderSourcePositionImpl#int getBodyStart()
BodyHolderSourcePositionImpl#int getBodyEnd()
DeclarationSourcePositionImpl#int getSourceEnd()
DeclarationSourcePositionImpl#int getSourceStart()
DeclarationSourcePositionImpl#int getModifierSourceStart()
DeclarationSourcePositionImpl#int getNameStart()
DeclarationSourcePositionImpl#int getNameEnd()
DeclarationSourcePositionImpl#void setModifierSourceEnd(int)
DeclarationSourcePositionImpl#int getModifierSourceEnd()
DeclarationSourcePositionImpl#int getEndLine()
SourcePositionImpl#int getColumn()
SourcePositionImpl#int getEndColumn()
SourcePositionImpl#java.io.File getFile()
SourcePositionImpl#int getLine()
SourcePositionImpl#int getEndLine()
SourcePositionImpl#int getSourceEnd()
SourcePositionImpl#int getSourceStart()
SourcePositionImpl#java.lang.String toString()
SourcePositionImpl#boolean equals(java.lang.Object)
SourcePositionImpl#int hashCode()
SourcePositionImpl#spoon.reflect.cu.CompilationUnit getCompilationUnit()
CompilationUnitImpl#java.util.List getDeclaredTypes()
CompilationUnitImpl#java.io.File getFile()
CompilationUnitImpl#spoon.reflect.declaration.CtType getMainType()
CompilationUnitImpl#void setDeclaredTypes(java.util.List)
CompilationUnitImpl#spoon.reflect.declaration.CtPackage getDeclaredPackage()
CompilationUnitImpl#void setDeclaredPackage(spoon.reflect.declaration.CtPackage)
CompilationUnitImpl#void setFile(java.io.File)
CompilationUnitImpl#java.util.List getBinaryFiles()
CompilationUnitImpl#java.lang.String getOriginalSourceCode()
CompilationUnitImpl#int beginOfLineIndex(int)
CompilationUnitImpl#int nextLineIndex(int)
CompilationUnitImpl#int getTabCount(int)
CompilationUnitImpl#java.util.Collection getImports()
CompilationUnitImpl#void setImports(java.util.Collection)
CompilationUnitImpl#spoon.reflect.factory.Factory getFactory()
CompilationUnitImpl#void setFactory(spoon.reflect.factory.Factory)
CompilationUnitImpl#boolean isAutoImport()
CompilationUnitImpl#void setAutoImport(boolean)
CtAnnotationImpl#void accept(spoon.reflect.visitor.CtVisitor)
CtAnnotationImpl#<T extends spoon.reflect.declaration.CtAnnotation> T addValue(java.lang.String,java.lang.Object)
CtAnnotationImpl#<T extends spoon.reflect.declaration.CtAnnotation> T addValue(java.lang.String,spoon.reflect.code.CtLiteral)
CtAnnotationImpl#<T extends spoon.reflect.declaration.CtAnnotation> T addValue(java.lang.String,spoon.reflect.code.CtNewArray)
CtAnnotationImpl#<T extends spoon.reflect.declaration.CtAnnotation> T addValue(java.lang.String,spoon.reflect.code.CtFieldAccess)
CtAnnotationImpl#<T extends spoon.reflect.declaration.CtAnnotation> T addValue(java.lang.String,spoon.reflect.declaration.CtAnnotation)
CtAnnotationImpl#spoon.reflect.reference.CtTypeReference getAnnotationType()
CtAnnotationImpl#<T> T getElementValue(java.lang.String)
CtAnnotationImpl#<T extends spoon.reflect.code.CtExpression> T getValue(java.lang.String)
CtAnnotationImpl#java.util.Map getElementValues()
CtAnnotationImpl#java.util.Map getValues()
CtAnnotationImpl#<T extends spoon.reflect.declaration.CtAnnotation> T setAnnotationType(spoon.reflect.reference.CtTypeReference)
CtAnnotationImpl#<T extends spoon.reflect.declaration.CtAnnotation> T setElementValues(java.util.Map)
CtAnnotationImpl#<T extends spoon.reflect.declaration.CtAnnotation> T setValues(java.util.Map)
CtAnnotationImpl#spoon.reflect.declaration.CtElement getAnnotatedElement()
CtAnnotationImpl#spoon.reflect.declaration.CtAnnotatedElementType getAnnotatedElementType()
CtAnnotationImpl#A getActualAnnotation()
CtAnnotationImpl#boolean isShadow()
CtAnnotationImpl#<E extends spoon.reflect.declaration.CtShadowable> E setShadow(boolean)
CtAnnotationImpl#spoon.reflect.declaration.CtAnnotation clone()
CtAnnotationMethodImpl#void accept(spoon.reflect.visitor.CtVisitor)
CtAnnotationMethodImpl#spoon.reflect.code.CtExpression getDefaultExpression()
CtAnnotationMethodImpl#<C extends spoon.reflect.declaration.CtAnnotationMethod> C setDefaultExpression(spoon.reflect.code.CtExpression)
CtAnnotationMethodImpl#spoon.reflect.declaration.CtAnnotationMethod clone()
CtAnnotationTypeImpl#void accept(spoon.reflect.visitor.CtVisitor)
CtAnnotationTypeImpl#boolean isAnnotationType()
CtAnnotationTypeImpl#java.util.Set getSuperInterfaces()
CtAnnotationTypeImpl#<C extends spoon.reflect.declaration.CtType> C setSuperclass(spoon.reflect.reference.CtTypeReference)
CtAnnotationTypeImpl#<C extends spoon.reflect.declaration.CtType> C setSuperInterfaces(java.util.Set)
CtAnnotationTypeImpl#boolean isSubtypeOf(spoon.reflect.reference.CtTypeReference)
CtAnnotationTypeImpl#spoon.reflect.declaration.CtAnnotationType clone()
CtAnnotationTypeImpl#java.util.Set getAnnotationMethods()
CtAnnotationTypeImpl#<M,C extends spoon.reflect.declaration.CtType> C addMethod(spoon.reflect.declaration.CtMethod)
CtAnonymousExecutableImpl#void accept(spoon.reflect.visitor.CtVisitor)
CtAnonymousExecutableImpl#<T extends spoon.reflect.declaration.CtModifiable> T addModifier(spoon.reflect.declaration.ModifierKind)
CtAnonymousExecutableImpl#boolean removeModifier(spoon.reflect.declaration.ModifierKind)
CtAnonymousExecutableImpl#java.util.Set getModifiers()
CtAnonymousExecutableImpl#spoon.reflect.declaration.ModifierKind getVisibility()
CtAnonymousExecutableImpl#boolean hasModifier(spoon.reflect.declaration.ModifierKind)
CtAnonymousExecutableImpl#<T extends spoon.reflect.declaration.CtModifiable> T setModifiers(java.util.Set)
CtAnonymousExecutableImpl#<T extends spoon.reflect.declaration.CtModifiable> T setVisibility(spoon.reflect.declaration.ModifierKind)
CtAnonymousExecutableImpl#java.util.List getParameters()
CtAnonymousExecutableImpl#spoon.reflect.declaration.CtExecutable setParameters(java.util.List)
CtAnonymousExecutableImpl#spoon.reflect.declaration.CtExecutable addParameter(spoon.reflect.declaration.CtParameter)
CtAnonymousExecutableImpl#boolean removeParameter(spoon.reflect.declaration.CtParameter)
CtAnonymousExecutableImpl#java.util.Set getThrownTypes()
CtAnonymousExecutableImpl#spoon.reflect.declaration.CtExecutable setThrownTypes(java.util.Set)
CtAnonymousExecutableImpl#spoon.reflect.declaration.CtExecutable addThrownType(spoon.reflect.reference.CtTypeReference)
CtAnonymousExecutableImpl#boolean removeThrownType(spoon.reflect.reference.CtTypeReference)
CtAnonymousExecutableImpl#java.lang.String getSimpleName()
CtAnonymousExecutableImpl#<T extends spoon.reflect.declaration.CtNamedElement> T setSimpleName(java.lang.String)
CtAnonymousExecutableImpl#spoon.reflect.reference.CtTypeReference getType()
CtAnonymousExecutableImpl#<C extends spoon.reflect.declaration.CtTypedElement> C setType(spoon.reflect.reference.CtTypeReference)
CtAnonymousExecutableImpl#spoon.reflect.declaration.CtAnonymousExecutable clone()
CtClassImpl#void accept(spoon.reflect.visitor.CtVisitor)
CtClassImpl#java.util.List getAnonymousExecutables()
CtClassImpl#spoon.reflect.declaration.CtConstructor getConstructor(spoon.reflect.reference.CtTypeReference[])
CtClassImpl#java.util.Set getConstructors()
CtClassImpl#<C extends spoon.reflect.declaration.CtClass> C addAnonymousExecutable(spoon.reflect.declaration.CtAnonymousExecutable)
CtClassImpl#boolean removeAnonymousExecutable(spoon.reflect.declaration.CtAnonymousExecutable)
CtClassImpl#spoon.reflect.reference.CtTypeReference getSuperclass()
CtClassImpl#<C extends spoon.reflect.declaration.CtClass> C setAnonymousExecutables(java.util.List)
CtClassImpl#<C extends spoon.reflect.declaration.CtClass> C setConstructors(java.util.Set)
CtClassImpl#<C extends spoon.reflect.declaration.CtClass> C addConstructor(spoon.reflect.declaration.CtConstructor)
CtClassImpl#void removeConstructor(spoon.reflect.declaration.CtConstructor)
CtClassImpl#<C extends spoon.reflect.declaration.CtType> C setSuperclass(spoon.reflect.reference.CtTypeReference)
CtClassImpl#boolean isClass()
CtClassImpl#boolean isAnonymous()
CtClassImpl#boolean isSubtypeOf(spoon.reflect.reference.CtTypeReference)
CtClassImpl#<C extends spoon.reflect.code.CtStatement> C insertAfter(spoon.reflect.code.CtStatement)
CtClassImpl#<C extends spoon.reflect.code.CtStatement> C insertAfter(spoon.reflect.code.CtStatementList)
CtClassImpl#<C extends spoon.reflect.code.CtStatement> C insertBefore(spoon.reflect.code.CtStatement)
CtClassImpl#<C extends spoon.reflect.code.CtStatement> C insertBefore(spoon.reflect.code.CtStatementList)
CtClassImpl#java.lang.String getLabel()
CtClassImpl#<C extends spoon.reflect.code.CtStatement> C setLabel(java.lang.String)
CtClassImpl#<R extends spoon.reflect.code.CtCodeElement> R partiallyEvaluate()
CtClassImpl#java.util.Collection getDeclaredExecutables()
CtClassImpl#void replace(spoon.reflect.code.CtStatement)
CtClassImpl#spoon.reflect.declaration.CtClass clone()
CtClassImpl#T newInstance()
CtClassImpl#java.util.Collection getAllExecutables()
CtConstructorImpl#void accept(spoon.reflect.visitor.CtVisitor)
CtConstructorImpl#<C extends spoon.reflect.declaration.CtNamedElement> C setSimpleName(java.lang.String)
CtConstructorImpl#java.lang.String getSimpleName()
CtConstructorImpl#spoon.reflect.declaration.CtType getDeclaringType()
CtConstructorImpl#spoon.reflect.reference.CtTypeReference getType()
CtConstructorImpl#<C extends spoon.reflect.declaration.CtTypedElement> C setType(spoon.reflect.reference.CtTypeReference)
CtConstructorImpl#java.util.List getFormalCtTypeParameters()
CtConstructorImpl#<C extends spoon.reflect.declaration.CtFormalTypeDeclarer> C setFormalCtTypeParameters(java.util.List)
CtConstructorImpl#<C extends spoon.reflect.declaration.CtFormalTypeDeclarer> C addFormalCtTypeParameter(spoon.reflect.declaration.CtTypeParameter)
CtConstructorImpl#boolean removeFormalCtTypeParameter(spoon.reflect.declaration.CtTypeParameter)
CtConstructorImpl#java.util.Set getModifiers()
CtConstructorImpl#boolean hasModifier(spoon.reflect.declaration.ModifierKind)
CtConstructorImpl#<C extends spoon.reflect.declaration.CtModifiable> C setModifiers(java.util.Set)
CtConstructorImpl#<C extends spoon.reflect.declaration.CtModifiable> C addModifier(spoon.reflect.declaration.ModifierKind)
CtConstructorImpl#boolean removeModifier(spoon.reflect.declaration.ModifierKind)
CtConstructorImpl#<C extends spoon.reflect.declaration.CtModifiable> C setVisibility(spoon.reflect.declaration.ModifierKind)
CtConstructorImpl#spoon.reflect.declaration.ModifierKind getVisibility()
CtConstructorImpl#boolean isShadow()
CtConstructorImpl#<E extends spoon.reflect.declaration.CtShadowable> E setShadow(boolean)
CtConstructorImpl#spoon.reflect.declaration.CtConstructor clone()
CtElementImpl#<T> java.util.List emptyList()
CtElementImpl#<T> java.util.Set emptySet()
CtElementImpl#<T> java.util.List unmodifiableList(java.util.List)
CtElementImpl#java.lang.String getShortRepresentation()
CtElementImpl#boolean equals(java.lang.Object)
CtElementImpl#<A extends java.lang.annotation.Annotation> A getAnnotation(java.lang.Class)
CtElementImpl#<A extends java.lang.annotation.Annotation> spoon.reflect.declaration.CtAnnotation getAnnotation(spoon.reflect.reference.CtTypeReference)
CtElementImpl#java.util.List getAnnotations()
CtElementImpl#java.lang.String getDocComment()
CtElementImpl#spoon.reflect.cu.SourcePosition getPosition()
CtElementImpl#int hashCode()
CtElementImpl#<E extends spoon.reflect.declaration.CtElement> E setAnnotations(java.util.List)
CtElementImpl#void delete()
CtElementImpl#<E extends spoon.reflect.declaration.CtElement> E addAnnotation(spoon.reflect.declaration.CtAnnotation)
CtElementImpl#boolean removeAnnotation(spoon.reflect.declaration.CtAnnotation)
CtElementImpl#<E extends spoon.reflect.declaration.CtElement> E setDocComment(java.lang.String)
CtElementImpl#<E extends spoon.reflect.declaration.CtElement> E setPosition(spoon.reflect.cu.SourcePosition)
CtElementImpl#<E extends spoon.reflect.declaration.CtElement> E setPositions(spoon.reflect.cu.SourcePosition)
CtElementImpl#java.lang.String toString()
CtElementImpl#<E extends spoon.reflect.declaration.CtElement> java.util.List getAnnotatedChildren(java.lang.Class)
CtElementImpl#boolean isImplicit()
CtElementImpl#<E extends spoon.reflect.declaration.CtElement> E setImplicit(boolean)
CtElementImpl#java.util.Set getReferencedTypes()
CtElementImpl#<E extends spoon.reflect.declaration.CtElement> java.util.List getElements(spoon.reflect.visitor.Filter)
CtElementImpl#<I> spoon.reflect.visitor.chain.CtQuery map(spoon.reflect.visitor.chain.CtConsumableFunction)
CtElementImpl#<I,R> spoon.reflect.visitor.chain.CtQuery map(spoon.reflect.visitor.chain.CtFunction)
CtElementImpl#<P extends spoon.reflect.declaration.CtElement> spoon.reflect.visitor.chain.CtQuery filterChildren(spoon.reflect.visitor.Filter)
CtElementImpl#spoon.reflect.declaration.CtElement getParent()
CtElementImpl#<E extends spoon.reflect.declaration.CtElement> E setParent(E extends spoon.reflect.declaration.CtElement)
CtElementImpl#boolean isParentInitialized()
CtElementImpl#<P extends spoon.reflect.declaration.CtElement> P getParent(java.lang.Class)
CtElementImpl#<E extends spoon.reflect.declaration.CtElement> E getParent(spoon.reflect.visitor.Filter)
CtElementImpl#boolean hasParent(spoon.reflect.declaration.CtElement)
CtElementImpl#void updateAllParentsBelow()
CtElementImpl#spoon.reflect.factory.Factory getFactory()
CtElementImpl#void setFactory(spoon.reflect.factory.Factory)
CtElementImpl#void replace(spoon.reflect.declaration.CtElement)
CtElementImpl#<E extends spoon.reflect.declaration.CtElement> void replace(java.util.Collection)
CtElementImpl#<E extends spoon.reflect.declaration.CtElement> E putMetadata(java.lang.String,java.lang.Object)
CtElementImpl#java.lang.Object getMetadata(java.lang.String)
CtElementImpl#java.util.Set getMetadataKeys()
CtElementImpl#java.util.List getComments()
CtElementImpl#<E extends spoon.reflect.declaration.CtElement> E addComment(spoon.reflect.code.CtComment)
CtElementImpl#<E extends spoon.reflect.declaration.CtElement> E removeComment(spoon.reflect.code.CtComment)
CtElementImpl#<E extends spoon.reflect.declaration.CtElement> E setComments(java.util.List)
CtElementImpl#spoon.reflect.declaration.CtElement clone()
CtEnumImpl#void accept(spoon.reflect.visitor.CtVisitor)
CtEnumImpl#java.util.Set getAllMethods()
CtEnumImpl#boolean isSubtypeOf(spoon.reflect.reference.CtTypeReference)
CtEnumImpl#<C extends spoon.reflect.declaration.CtEnum> C addEnumValue(spoon.reflect.declaration.CtEnumValue)
CtEnumImpl#boolean removeEnumValue(spoon.reflect.declaration.CtEnumValue)
CtEnumImpl#spoon.reflect.declaration.CtEnumValue getEnumValue(java.lang.String)
CtEnumImpl#java.util.List getEnumValues()
CtEnumImpl#<C extends spoon.reflect.declaration.CtEnum> C setEnumValues(java.util.List)
CtEnumImpl#java.util.List getFields()
CtEnumImpl#spoon.reflect.declaration.CtField getField(java.lang.String)
CtEnumImpl#spoon.reflect.declaration.CtEnum clone()
CtEnumImpl#spoon.reflect.reference.CtTypeReference getSuperclass()
CtEnumImpl#<R> spoon.reflect.declaration.CtMethod getMethod(java.lang.String,spoon.reflect.reference.CtTypeReference[])
CtEnumImpl#<R> spoon.reflect.declaration.CtMethod getMethod(spoon.reflect.reference.CtTypeReference,java.lang.String,spoon.reflect.reference.CtTypeReference[])
CtEnumImpl#boolean isClass()
CtEnumImpl#boolean isEnum()
CtEnumValueImpl#void accept(spoon.reflect.visitor.CtVisitor)
CtEnumValueImpl#spoon.reflect.declaration.CtEnumValue clone()
CtExecutableImpl#spoon.reflect.declaration.CtType getDeclaringType()
CtExecutableImpl#<T> spoon.reflect.declaration.CtType getTopLevelType()
CtExecutableImpl#spoon.reflect.code.CtBlock getBody()
CtExecutableImpl#<T extends spoon.reflect.code.CtBodyHolder> T setBody(spoon.reflect.code.CtStatement)
CtExecutableImpl#java.util.List getParameters()
CtExecutableImpl#<T extends spoon.reflect.declaration.CtExecutable> T setParameters(java.util.List)
CtExecutableImpl#<T extends spoon.reflect.declaration.CtExecutable> T addParameter(spoon.reflect.declaration.CtParameter)
CtExecutableImpl#boolean removeParameter(spoon.reflect.declaration.CtParameter)
CtExecutableImpl#java.util.Set getThrownTypes()
CtExecutableImpl#<T extends spoon.reflect.declaration.CtExecutable> T setThrownTypes(java.util.Set)
CtExecutableImpl#<T extends spoon.reflect.declaration.CtExecutable> T addThrownType(spoon.reflect.reference.CtTypeReference)
CtExecutableImpl#boolean removeThrownType(spoon.reflect.reference.CtTypeReference)
CtExecutableImpl#java.lang.String getSignature()
CtExecutableImpl#spoon.reflect.reference.CtExecutableReference getReference()
CtExecutableImpl#spoon.reflect.declaration.CtExecutable clone()
CtFieldImpl#void accept(spoon.reflect.visitor.CtVisitor)
CtFieldImpl#spoon.reflect.declaration.CtType getDeclaringType()
CtFieldImpl#<T> spoon.reflect.declaration.CtType getTopLevelType()
CtFieldImpl#spoon.reflect.code.CtExpression getDefaultExpression()
CtFieldImpl#spoon.reflect.reference.CtFieldReference getReference()
CtFieldImpl#spoon.reflect.reference.CtTypeReference getType()
CtFieldImpl#<C extends spoon.reflect.declaration.CtVariable> C setDefaultExpression(spoon.reflect.code.CtExpression)
CtFieldImpl#<C extends spoon.reflect.declaration.CtTypedElement> C setType(spoon.reflect.reference.CtTypeReference)
CtFieldImpl#java.util.Set getModifiers()
CtFieldImpl#boolean hasModifier(spoon.reflect.declaration.ModifierKind)
CtFieldImpl#<C extends spoon.reflect.declaration.CtModifiable> C setModifiers(java.util.Set)
CtFieldImpl#<C extends spoon.reflect.declaration.CtModifiable> C addModifier(spoon.reflect.declaration.ModifierKind)
CtFieldImpl#boolean removeModifier(spoon.reflect.declaration.ModifierKind)
CtFieldImpl#<C extends spoon.reflect.declaration.CtModifiable> C setVisibility(spoon.reflect.declaration.ModifierKind)
CtFieldImpl#spoon.reflect.declaration.ModifierKind getVisibility()
CtFieldImpl#<R extends T> void replace(spoon.reflect.declaration.CtField)
CtFieldImpl#spoon.reflect.code.CtExpression getAssignment()
CtFieldImpl#<C extends spoon.reflect.code.CtRHSReceiver> C setAssignment(spoon.reflect.code.CtExpression)
CtFieldImpl#boolean isShadow()
CtFieldImpl#<E extends spoon.reflect.declaration.CtShadowable> E setShadow(boolean)
CtFieldImpl#spoon.reflect.declaration.CtField clone()
CtInterfaceImpl#void accept(spoon.reflect.visitor.CtVisitor)
CtInterfaceImpl#boolean isSubtypeOf(spoon.reflect.reference.CtTypeReference)
CtInterfaceImpl#boolean isInterface()
CtInterfaceImpl#java.util.Collection getDeclaredExecutables()
CtInterfaceImpl#spoon.reflect.declaration.CtInterface clone()
CtInterfaceImpl#<C extends spoon.reflect.declaration.CtType> C setSuperclass(spoon.reflect.reference.CtTypeReference)
CtMethodImpl#void accept(spoon.reflect.visitor.CtVisitor)
CtMethodImpl#spoon.reflect.reference.CtTypeReference getType()
CtMethodImpl#<C extends spoon.reflect.declaration.CtTypedElement> C setType(spoon.reflect.reference.CtTypeReference)
CtMethodImpl#boolean isDefaultMethod()
CtMethodImpl#<C extends spoon.reflect.declaration.CtMethod> C setDefaultMethod(boolean)
CtMethodImpl#java.util.List getFormalCtTypeParameters()
CtMethodImpl#<C extends spoon.reflect.declaration.CtFormalTypeDeclarer> C setFormalCtTypeParameters(java.util.List)
CtMethodImpl#<C extends spoon.reflect.declaration.CtFormalTypeDeclarer> C addFormalCtTypeParameter(spoon.reflect.declaration.CtTypeParameter)
CtMethodImpl#boolean removeFormalCtTypeParameter(spoon.reflect.declaration.CtTypeParameter)
CtMethodImpl#java.util.Set getModifiers()
CtMethodImpl#boolean hasModifier(spoon.reflect.declaration.ModifierKind)
CtMethodImpl#<C extends spoon.reflect.declaration.CtModifiable> C setModifiers(java.util.Set)
CtMethodImpl#<C extends spoon.reflect.declaration.CtModifiable> C addModifier(spoon.reflect.declaration.ModifierKind)
CtMethodImpl#boolean removeModifier(spoon.reflect.declaration.ModifierKind)
CtMethodImpl#<C extends spoon.reflect.declaration.CtModifiable> C setVisibility(spoon.reflect.declaration.ModifierKind)
CtMethodImpl#spoon.reflect.declaration.ModifierKind getVisibility()
CtMethodImpl#<R extends T> void replace(spoon.reflect.declaration.CtMethod)
CtMethodImpl#boolean isOverriding(spoon.reflect.declaration.CtMethod)
CtMethodImpl#boolean isShadow()
CtMethodImpl#<E extends spoon.reflect.declaration.CtShadowable> E setShadow(boolean)
CtMethodImpl#spoon.reflect.declaration.CtMethod clone()
CtNamedElementImpl#spoon.reflect.reference.CtReference getReference()
CtNamedElementImpl#java.lang.String getSimpleName()
CtNamedElementImpl#<T extends spoon.reflect.declaration.CtNamedElement> T setSimpleName(java.lang.String)
CtNamedElementImpl#spoon.reflect.declaration.CtNamedElement clone()
CtPackageImpl#void accept(spoon.reflect.visitor.CtVisitor)
CtPackageImpl#<T extends spoon.reflect.declaration.CtPackage> T addPackage(spoon.reflect.declaration.CtPackage)
CtPackageImpl#boolean removePackage(spoon.reflect.declaration.CtPackage)
CtPackageImpl#spoon.reflect.declaration.CtPackage getDeclaringPackage()
CtPackageImpl#spoon.reflect.declaration.CtPackage getPackage(java.lang.String)
CtPackageImpl#java.util.Set getPackages()
CtPackageImpl#java.lang.String getQualifiedName()
CtPackageImpl#<T extends spoon.reflect.declaration.CtType> T getType(java.lang.String)
CtPackageImpl#java.util.Set getTypes()
CtPackageImpl#<T extends spoon.reflect.declaration.CtPackage> T setPackages(java.util.Set)
CtPackageImpl#<T extends spoon.reflect.declaration.CtPackage> T setTypes(java.util.Set)
CtPackageImpl#spoon.reflect.reference.CtPackageReference getReference()
CtPackageImpl#<T extends spoon.reflect.declaration.CtPackage> T addType(spoon.reflect.declaration.CtType)
CtPackageImpl#void removeType(spoon.reflect.declaration.CtType)
CtPackageImpl#spoon.reflect.cu.SourcePosition getPosition()
CtPackageImpl#java.lang.String toString()
CtPackageImpl#boolean isShadow()
CtPackageImpl#<E extends spoon.reflect.declaration.CtShadowable> E setShadow(boolean)
CtPackageImpl#spoon.reflect.declaration.CtPackage clone()
CtPackageImpl#boolean isUnnamedPackage()
CtParameterImpl#void accept(spoon.reflect.visitor.CtVisitor)
CtParameterImpl#spoon.reflect.code.CtExpression getDefaultExpression()
CtParameterImpl#spoon.reflect.reference.CtParameterReference getReference()
CtParameterImpl#spoon.reflect.reference.CtTypeReference getType()
CtParameterImpl#<C extends spoon.reflect.declaration.CtVariable> C setDefaultExpression(spoon.reflect.code.CtExpression)
CtParameterImpl#<C extends spoon.reflect.declaration.CtTypedElement> C setType(spoon.reflect.reference.CtTypeReference)
CtParameterImpl#boolean isVarArgs()
CtParameterImpl#<C extends spoon.reflect.declaration.CtParameter> C setVarArgs(boolean)
CtParameterImpl#java.util.Set getModifiers()
CtParameterImpl#boolean hasModifier(spoon.reflect.declaration.ModifierKind)
CtParameterImpl#<C extends spoon.reflect.declaration.CtModifiable> C setModifiers(java.util.Set)
CtParameterImpl#<C extends spoon.reflect.declaration.CtModifiable> C addModifier(spoon.reflect.declaration.ModifierKind)
CtParameterImpl#boolean removeModifier(spoon.reflect.declaration.ModifierKind)
CtParameterImpl#<C extends spoon.reflect.declaration.CtModifiable> C setVisibility(spoon.reflect.declaration.ModifierKind)
CtParameterImpl#spoon.reflect.declaration.ModifierKind getVisibility()
CtParameterImpl#spoon.reflect.declaration.CtExecutable getParent()
CtParameterImpl#boolean isShadow()
CtParameterImpl#<E extends spoon.reflect.declaration.CtShadowable> E setShadow(boolean)
CtParameterImpl#spoon.reflect.declaration.CtParameter clone()
CtTypeImpl#java.util.List getTypeMembers()
CtTypeImpl#<C extends spoon.reflect.declaration.CtType> C addTypeMember(spoon.reflect.declaration.CtTypeMember)
CtTypeImpl#<C extends spoon.reflect.declaration.CtType> C addTypeMemberAt(int,spoon.reflect.declaration.CtTypeMember)
CtTypeImpl#boolean removeTypeMember(spoon.reflect.declaration.CtTypeMember)
CtTypeImpl#<C extends spoon.reflect.declaration.CtType> C setTypeMembers(java.util.List)
CtTypeImpl#<F,C extends spoon.reflect.declaration.CtType> C addFieldAtTop(spoon.reflect.declaration.CtField)
CtTypeImpl#<F,C extends spoon.reflect.declaration.CtType> C addField(spoon.reflect.declaration.CtField)
CtTypeImpl#<F,C extends spoon.reflect.declaration.CtType> C addField(int,spoon.reflect.declaration.CtField)
CtTypeImpl#<C extends spoon.reflect.declaration.CtType> C setFields(java.util.List)
CtTypeImpl#<F> boolean removeField(spoon.reflect.declaration.CtField)
CtTypeImpl#spoon.reflect.declaration.CtField getField(java.lang.String)
CtTypeImpl#spoon.reflect.reference.CtFieldReference getDeclaredField(java.lang.String)
CtTypeImpl#spoon.reflect.reference.CtFieldReference getDeclaredOrInheritedField(java.lang.String)
CtTypeImpl#java.util.List getFields()
CtTypeImpl#<N,C extends spoon.reflect.declaration.CtType> C addNestedType(spoon.reflect.declaration.CtType)
CtTypeImpl#<N> boolean removeNestedType(spoon.reflect.declaration.CtType)
CtTypeImpl#<C extends spoon.reflect.declaration.CtType> C setNestedTypes(java.util.Set)
CtTypeImpl#java.util.Set getUsedTypes(boolean)
CtTypeImpl#java.lang.Class getActualClass()
CtTypeImpl#spoon.reflect.declaration.CtType getDeclaringType()
CtTypeImpl#<T> spoon.reflect.declaration.CtType getTopLevelType()
CtTypeImpl#<N extends spoon.reflect.declaration.CtType> N getNestedType(java.lang.String)
CtTypeImpl#java.util.Set getNestedTypes()
CtTypeImpl#spoon.reflect.declaration.CtPackage getPackage()
CtTypeImpl#spoon.reflect.reference.CtTypeReference getReference()
CtTypeImpl#boolean isTopLevel()
CtTypeImpl#void compileAndReplaceSnippets()
CtTypeImpl#java.util.Set getModifiers()
CtTypeImpl#boolean hasModifier(spoon.reflect.declaration.ModifierKind)
CtTypeImpl#<C extends spoon.reflect.declaration.CtModifiable> C setModifiers(java.util.Set)
CtTypeImpl#<C extends spoon.reflect.declaration.CtModifiable> C addModifier(spoon.reflect.declaration.ModifierKind)
CtTypeImpl#boolean removeModifier(spoon.reflect.declaration.ModifierKind)
CtTypeImpl#<C extends spoon.reflect.declaration.CtModifiable> C setVisibility(spoon.reflect.declaration.ModifierKind)
CtTypeImpl#spoon.reflect.declaration.ModifierKind getVisibility()
CtTypeImpl#boolean isPrimitive()
CtTypeImpl#boolean isAnonymous()
CtTypeImpl#boolean isLocalType()
CtTypeImpl#spoon.reflect.reference.CtTypeReference getSuperclass()
CtTypeImpl#boolean isClass()
CtTypeImpl#boolean isInterface()
CtTypeImpl#boolean isAnnotationType()
CtTypeImpl#boolean isEnum()
CtTypeImpl#boolean isGenerics()
CtTypeImpl#java.util.List getAllFields()
CtTypeImpl#java.util.List getDeclaredFields()
CtTypeImpl#<M,C extends spoon.reflect.declaration.CtType> C addMethod(spoon.reflect.declaration.CtMethod)
CtTypeImpl#<M> boolean removeMethod(spoon.reflect.declaration.CtMethod)
CtTypeImpl#<S,C extends spoon.reflect.declaration.CtType> C addSuperInterface(spoon.reflect.reference.CtTypeReference)
CtTypeImpl#<S> boolean removeSuperInterface(spoon.reflect.reference.CtTypeReference)
CtTypeImpl#java.util.List getFormalCtTypeParameters()
CtTypeImpl#<C extends spoon.reflect.declaration.CtFormalTypeDeclarer> C setFormalCtTypeParameters(java.util.List)
CtTypeImpl#<C extends spoon.reflect.declaration.CtFormalTypeDeclarer> C addFormalCtTypeParameter(spoon.reflect.declaration.CtTypeParameter)
CtTypeImpl#boolean removeFormalCtTypeParameter(spoon.reflect.declaration.CtTypeParameter)
CtTypeImpl#<R> spoon.reflect.declaration.CtMethod getMethod(spoon.reflect.reference.CtTypeReference,java.lang.String,spoon.reflect.reference.CtTypeReference[])
CtTypeImpl#<R> spoon.reflect.declaration.CtMethod getMethod(java.lang.String,spoon.reflect.reference.CtTypeReference[])
CtTypeImpl#java.util.Set getMethods()
CtTypeImpl#java.util.Set getMethodsAnnotatedWith(spoon.reflect.reference.CtTypeReference[])
CtTypeImpl#java.util.List getMethodsByName(java.lang.String)
CtTypeImpl#boolean hasMethod(spoon.reflect.declaration.CtMethod)
CtTypeImpl#java.lang.String getQualifiedName()
CtTypeImpl#java.util.Set getSuperInterfaces()
CtTypeImpl#<C extends spoon.reflect.declaration.CtType> C setMethods(java.util.Set)
CtTypeImpl#<C extends spoon.reflect.declaration.CtType> C setSuperclass(spoon.reflect.reference.CtTypeReference)
CtTypeImpl#<C extends spoon.reflect.declaration.CtType> C setSuperInterfaces(java.util.Set)
CtTypeImpl#java.util.Collection getDeclaredExecutables()
CtTypeImpl#java.util.Collection getAllExecutables()
CtTypeImpl#java.util.Set getAllMethods()
CtTypeImpl#spoon.reflect.reference.CtTypeReference getTypeErasure()
CtTypeImpl#boolean isShadow()
CtTypeImpl#<E extends spoon.reflect.declaration.CtShadowable> E setShadow(boolean)
CtTypeImpl#spoon.reflect.declaration.CtType clone()
CtTypeParameterImpl#void accept(spoon.reflect.visitor.CtVisitor)
CtTypeParameterImpl#spoon.reflect.reference.CtTypeReference getSuperclass()
CtTypeParameterImpl#<C extends spoon.reflect.declaration.CtType> C setSuperclass(spoon.reflect.reference.CtTypeReference)
CtTypeParameterImpl#java.lang.String getQualifiedName()
CtTypeParameterImpl#spoon.reflect.reference.CtTypeParameterReference getReference()
CtTypeParameterImpl#boolean isGenerics()
CtTypeParameterImpl#spoon.reflect.declaration.CtTypeParameter clone()
CtTypeParameterImpl#spoon.reflect.declaration.CtFormalTypeDeclarer getTypeParameterDeclarer()
CtTypeParameterImpl#<F,C extends spoon.reflect.declaration.CtType> C addFieldAtTop(spoon.reflect.declaration.CtField)
CtTypeParameterImpl#<F,C extends spoon.reflect.declaration.CtType> C addField(spoon.reflect.declaration.CtField)
CtTypeParameterImpl#<F,C extends spoon.reflect.declaration.CtType> C addField(int,spoon.reflect.declaration.CtField)
CtTypeParameterImpl#<C extends spoon.reflect.declaration.CtType> C setFields(java.util.List)
CtTypeParameterImpl#<F> boolean removeField(spoon.reflect.declaration.CtField)
CtTypeParameterImpl#spoon.reflect.declaration.CtField getField(java.lang.String)
CtTypeParameterImpl#java.util.List getFields()
CtTypeParameterImpl#<N,C extends spoon.reflect.declaration.CtType> C addNestedType(spoon.reflect.declaration.CtType)
CtTypeParameterImpl#<N> boolean removeNestedType(spoon.reflect.declaration.CtType)
CtTypeParameterImpl#<C extends spoon.reflect.declaration.CtType> C setNestedTypes(java.util.Set)
CtTypeParameterImpl#<N extends spoon.reflect.declaration.CtType> N getNestedType(java.lang.String)
CtTypeParameterImpl#java.util.Set getNestedTypes()
CtTypeParameterImpl#spoon.reflect.declaration.CtPackage getPackage()
CtTypeParameterImpl#boolean isTopLevel()
CtTypeParameterImpl#java.util.Set getModifiers()
CtTypeParameterImpl#boolean hasModifier(spoon.reflect.declaration.ModifierKind)
CtTypeParameterImpl#<C extends spoon.reflect.declaration.CtModifiable> C setModifiers(java.util.Set)
CtTypeParameterImpl#<C extends spoon.reflect.declaration.CtModifiable> C addModifier(spoon.reflect.declaration.ModifierKind)
CtTypeParameterImpl#boolean removeModifier(spoon.reflect.declaration.ModifierKind)
CtTypeParameterImpl#<C extends spoon.reflect.declaration.CtModifiable> C setVisibility(spoon.reflect.declaration.ModifierKind)
CtTypeParameterImpl#spoon.reflect.declaration.ModifierKind getVisibility()
CtTypeParameterImpl#boolean isPrimitive()
CtTypeParameterImpl#boolean isAnonymous()
CtTypeParameterImpl#boolean isLocalType()
CtTypeParameterImpl#java.util.List getAllFields()
CtTypeParameterImpl#java.util.List getDeclaredFields()
CtTypeParameterImpl#boolean isSubtypeOf(spoon.reflect.reference.CtTypeReference)
CtTypeParameterImpl#spoon.reflect.reference.CtTypeReference getTypeErasure()
CtTypeParameterImpl#<M,C extends spoon.reflect.declaration.CtType> C addMethod(spoon.reflect.declaration.CtMethod)
CtTypeParameterImpl#<M> boolean removeMethod(spoon.reflect.declaration.CtMethod)
CtTypeParameterImpl#<S,C extends spoon.reflect.declaration.CtType> C addSuperInterface(spoon.reflect.reference.CtTypeReference)
CtTypeParameterImpl#<S> boolean removeSuperInterface(spoon.reflect.reference.CtTypeReference)
CtTypeParameterImpl#<R> spoon.reflect.declaration.CtMethod getMethod(spoon.reflect.reference.CtTypeReference,java.lang.String,spoon.reflect.reference.CtTypeReference[])
CtTypeParameterImpl#<R> spoon.reflect.declaration.CtMethod getMethod(java.lang.String,spoon.reflect.reference.CtTypeReference[])
CtTypeParameterImpl#java.util.Set getMethods()
CtTypeParameterImpl#java.util.Set getMethodsAnnotatedWith(spoon.reflect.reference.CtTypeReference[])
CtTypeParameterImpl#java.util.List getMethodsByName(java.lang.String)
CtTypeParameterImpl#java.util.Set getSuperInterfaces()
CtTypeParameterImpl#<C extends spoon.reflect.declaration.CtType> C setMethods(java.util.Set)
CtTypeParameterImpl#<C extends spoon.reflect.declaration.CtType> C setSuperInterfaces(java.util.Set)
CtTypeParameterImpl#java.util.Collection getDeclaredExecutables()
CtTypeParameterImpl#java.util.Collection getAllExecutables()
CtTypeParameterImpl#java.util.Set getAllMethods()
VisitorPartialEvaluator#<R extends spoon.reflect.declaration.CtElement> R evaluate(R extends spoon.reflect.declaration.CtElement)
VisitorPartialEvaluator#<T> void visitCtBinaryOperator(spoon.reflect.code.CtBinaryOperator)
VisitorPartialEvaluator#<R> void visitCtBlock(spoon.reflect.code.CtBlock)
VisitorPartialEvaluator#void visitCtDo(spoon.reflect.code.CtDo)
VisitorPartialEvaluator#<T> void visitCtFieldRead(spoon.reflect.code.CtFieldRead)
VisitorPartialEvaluator#<T> void visitCtFieldWrite(spoon.reflect.code.CtFieldWrite)
VisitorPartialEvaluator#<T> void visitCtAnnotationFieldAccess(spoon.reflect.code.CtAnnotationFieldAccess)
VisitorPartialEvaluator#void visitCtFor(spoon.reflect.code.CtFor)
VisitorPartialEvaluator#void visitCtIf(spoon.reflect.code.CtIf)
VisitorPartialEvaluator#<T> void visitCtInvocation(spoon.reflect.code.CtInvocation)
VisitorPartialEvaluator#<T> void visitCtField(spoon.reflect.declaration.CtField)
VisitorPartialEvaluator#<T> void visitCtLocalVariable(spoon.reflect.code.CtLocalVariable)
VisitorPartialEvaluator#<T> void visitCtCatchVariable(spoon.reflect.code.CtCatchVariable)
VisitorPartialEvaluator#<R> void visitCtReturn(spoon.reflect.code.CtReturn)
VisitorPartialEvaluator#void visitCtSynchronized(spoon.reflect.code.CtSynchronized)
VisitorPartialEvaluator#void visitCtThrow(spoon.reflect.code.CtThrow)
VisitorPartialEvaluator#<T> void visitCtUnaryOperator(spoon.reflect.code.CtUnaryOperator)
VisitorPartialEvaluator#<T> void visitCtVariableRead(spoon.reflect.code.CtVariableRead)
VisitorPartialEvaluator#<T> void visitCtVariableWrite(spoon.reflect.code.CtVariableWrite)
VisitorPartialEvaluator#<T,A extends T> void visitCtAssignment(spoon.reflect.code.CtAssignment)
VisitorPartialEvaluator#void visitCtWhile(spoon.reflect.code.CtWhile)
VisitorPartialEvaluator#<T> void visitCtConditional(spoon.reflect.code.CtConditional)
CtArrayTypeReferenceImpl#void accept(spoon.reflect.visitor.CtVisitor)
CtArrayTypeReferenceImpl#spoon.reflect.reference.CtTypeReference getComponentType()
CtArrayTypeReferenceImpl#spoon.reflect.reference.CtTypeReference getArrayType()
CtArrayTypeReferenceImpl#<C extends spoon.reflect.reference.CtArrayTypeReference> C setComponentType(spoon.reflect.reference.CtTypeReference)
CtArrayTypeReferenceImpl#java.lang.String getSimpleName()
CtArrayTypeReferenceImpl#java.lang.String getQualifiedName()
CtArrayTypeReferenceImpl#java.lang.Class getActualClass()
CtArrayTypeReferenceImpl#int getDimensionCount()
CtArrayTypeReferenceImpl#spoon.reflect.reference.CtArrayTypeReference clone()
CtCatchVariableReferenceImpl#void accept(spoon.reflect.visitor.CtVisitor)
CtCatchVariableReferenceImpl#spoon.reflect.code.CtCatchVariable getDeclaration()
CtCatchVariableReferenceImpl#spoon.reflect.reference.CtCatchVariableReference clone()
CtExecutableReferenceImpl#void accept(spoon.reflect.visitor.CtVisitor)
CtExecutableReferenceImpl#java.util.List getActualTypeArguments()
CtExecutableReferenceImpl#boolean isConstructor()
CtExecutableReferenceImpl#spoon.reflect.declaration.CtExecutable getDeclaration()
CtExecutableReferenceImpl#spoon.reflect.declaration.CtExecutable getExecutableDeclaration()
CtExecutableReferenceImpl#spoon.reflect.reference.CtTypeReference getDeclaringType()
CtExecutableReferenceImpl#spoon.reflect.reference.CtTypeReference getType()
CtExecutableReferenceImpl#java.util.List getParameters()
CtExecutableReferenceImpl#<C extends spoon.reflect.reference.CtExecutableReference> C setParameters(java.util.List)
CtExecutableReferenceImpl#<S extends T> spoon.reflect.reference.CtExecutableReference getOverridingExecutable(spoon.reflect.reference.CtTypeReference)
CtExecutableReferenceImpl#boolean isOverriding(spoon.reflect.reference.CtExecutableReference)
CtExecutableReferenceImpl#<C extends spoon.reflect.reference.CtActualTypeContainer> C setActualTypeArguments(java.util.List)
CtExecutableReferenceImpl#<C extends spoon.reflect.reference.CtExecutableReference> C setDeclaringType(spoon.reflect.reference.CtTypeReference)
CtExecutableReferenceImpl#<C extends spoon.reflect.reference.CtExecutableReference> C setType(spoon.reflect.reference.CtTypeReference)
CtExecutableReferenceImpl#java.lang.reflect.Method getActualMethod()
CtExecutableReferenceImpl#java.lang.reflect.Constructor getActualConstructor()
CtExecutableReferenceImpl#boolean isStatic()
CtExecutableReferenceImpl#<C extends spoon.reflect.reference.CtExecutableReference> C setStatic(boolean)
CtExecutableReferenceImpl#boolean isFinal()
CtExecutableReferenceImpl#void replace(spoon.reflect.reference.CtExecutableReference)
CtExecutableReferenceImpl#java.util.Set getModifiers()
CtExecutableReferenceImpl#spoon.reflect.reference.CtExecutableReference getOverridingExecutable()
CtExecutableReferenceImpl#<C extends spoon.reflect.reference.CtActualTypeContainer> C addActualTypeArgument(spoon.reflect.reference.CtTypeReference)
CtExecutableReferenceImpl#boolean removeActualTypeArgument(spoon.reflect.reference.CtTypeReference)
CtExecutableReferenceImpl#java.lang.String getSignature()
CtExecutableReferenceImpl#spoon.reflect.reference.CtExecutableReference clone()
CtFieldReferenceImpl#void accept(spoon.reflect.visitor.CtVisitor)
CtFieldReferenceImpl#java.lang.reflect.Member getActualField()
CtFieldReferenceImpl#spoon.reflect.declaration.CtField getDeclaration()
CtFieldReferenceImpl#spoon.reflect.declaration.CtField getFieldDeclaration()
CtFieldReferenceImpl#spoon.reflect.reference.CtTypeReference getDeclaringType()
CtFieldReferenceImpl#java.lang.String getQualifiedName()
CtFieldReferenceImpl#boolean isFinal()
CtFieldReferenceImpl#boolean isStatic()
CtFieldReferenceImpl#<C extends spoon.reflect.reference.CtFieldReference> C setDeclaringType(spoon.reflect.reference.CtTypeReference)
CtFieldReferenceImpl#<C extends spoon.reflect.reference.CtFieldReference> C setFinal(boolean)
CtFieldReferenceImpl#<C extends spoon.reflect.reference.CtFieldReference> C setStatic(boolean)
CtFieldReferenceImpl#java.util.Set getModifiers()
CtFieldReferenceImpl#spoon.reflect.reference.CtFieldReference clone()
CtIntersectionTypeReferenceImpl#void accept(spoon.reflect.visitor.CtVisitor)
CtIntersectionTypeReferenceImpl#java.util.List getBounds()
CtIntersectionTypeReferenceImpl#<C extends spoon.reflect.reference.CtIntersectionTypeReference> C setBounds(java.util.List)
CtIntersectionTypeReferenceImpl#<C extends spoon.reflect.reference.CtIntersectionTypeReference> C addBound(spoon.reflect.reference.CtTypeReference)
CtIntersectionTypeReferenceImpl#boolean removeBound(spoon.reflect.reference.CtTypeReference)
CtIntersectionTypeReferenceImpl#spoon.reflect.reference.CtTypeReference getTypeErasure()
CtIntersectionTypeReferenceImpl#spoon.reflect.reference.CtIntersectionTypeReference clone()
CtLocalVariableReferenceImpl#void accept(spoon.reflect.visitor.CtVisitor)
CtLocalVariableReferenceImpl#spoon.reflect.code.CtLocalVariable getDeclaration()
CtLocalVariableReferenceImpl#spoon.reflect.reference.CtLocalVariableReference clone()
CtPackageReferenceImpl#spoon.reflect.declaration.CtPackage getDeclaration()
CtPackageReferenceImpl#void accept(spoon.reflect.visitor.CtVisitor)
CtPackageReferenceImpl#java.lang.Package getActualPackage()
CtPackageReferenceImpl#void replace(spoon.reflect.reference.CtPackageReference)
CtPackageReferenceImpl#spoon.reflect.reference.CtPackageReference clone()
CtPackageReferenceImpl#java.lang.String getQualifiedName()
CtPackageReferenceImpl#boolean isUnnamedPackage()
CtParameterReferenceImpl#void accept(spoon.reflect.visitor.CtVisitor)
CtParameterReferenceImpl#spoon.reflect.declaration.CtParameter getDeclaration()
CtParameterReferenceImpl#spoon.reflect.reference.CtExecutableReference getDeclaringExecutable()
CtParameterReferenceImpl#<C extends spoon.reflect.reference.CtParameterReference> C setDeclaringExecutable(spoon.reflect.reference.CtExecutableReference)
CtParameterReferenceImpl#spoon.reflect.reference.CtParameterReference clone()
CtReferenceImpl#java.lang.String getSimpleName()
CtReferenceImpl#<T extends spoon.reflect.reference.CtReference> T setSimpleName(java.lang.String)
CtReferenceImpl#java.lang.String toString()
CtReferenceImpl#void accept(spoon.reflect.visitor.CtVisitor)
CtReferenceImpl#spoon.reflect.reference.CtReference clone()
CtTypeParameterReferenceImpl#void accept(spoon.reflect.visitor.CtVisitor)
CtTypeParameterReferenceImpl#boolean isUpper()
CtTypeParameterReferenceImpl#<T extends spoon.reflect.reference.CtTypeParameterReference> T setBounds(java.util.List)
CtTypeParameterReferenceImpl#<T extends spoon.reflect.reference.CtTypeParameterReference> T setUpper(boolean)
CtTypeParameterReferenceImpl#boolean isPrimitive()
CtTypeParameterReferenceImpl#java.lang.Class getActualClass()
CtTypeParameterReferenceImpl#<C extends spoon.reflect.reference.CtActualTypeContainer> C setActualTypeArguments(java.util.List)
CtTypeParameterReferenceImpl#<C extends spoon.reflect.reference.CtActualTypeContainer> C addActualTypeArgument(spoon.reflect.reference.CtTypeReference)
CtTypeParameterReferenceImpl#boolean removeActualTypeArgument(spoon.reflect.reference.CtTypeReference)
CtTypeParameterReferenceImpl#<T extends spoon.reflect.reference.CtTypeParameterReference> T addBound(spoon.reflect.reference.CtTypeReference)
CtTypeParameterReferenceImpl#boolean removeBound(spoon.reflect.reference.CtTypeReference)
CtTypeParameterReferenceImpl#spoon.reflect.reference.CtTypeReference getBoundingType()
CtTypeParameterReferenceImpl#<T extends spoon.reflect.reference.CtTypeParameterReference> T setBoundingType(spoon.reflect.reference.CtTypeReference)
CtTypeParameterReferenceImpl#spoon.reflect.declaration.CtTypeParameter getDeclaration()
CtTypeParameterReferenceImpl#spoon.reflect.declaration.CtType getTypeDeclaration()
CtTypeParameterReferenceImpl#spoon.reflect.reference.CtTypeReference getTypeErasure()
CtTypeParameterReferenceImpl#boolean isSubtypeOf(spoon.reflect.reference.CtTypeReference)
CtTypeParameterReferenceImpl#spoon.reflect.reference.CtTypeParameterReference clone()
CtTypeParameterReferenceImpl#boolean isGenerics()
CtTypeReferenceImpl#void accept(spoon.reflect.visitor.CtVisitor)
CtTypeReferenceImpl#spoon.reflect.reference.CtTypeReference box()
CtTypeReferenceImpl#java.lang.Class getActualClass()
CtTypeReferenceImpl#java.util.List getActualTypeArguments()
CtTypeReferenceImpl#spoon.reflect.declaration.CtType getDeclaration()
CtTypeReferenceImpl#spoon.reflect.declaration.CtType getTypeDeclaration()
CtTypeReferenceImpl#spoon.reflect.reference.CtTypeReference getDeclaringType()
CtTypeReferenceImpl#spoon.reflect.reference.CtPackageReference getPackage()
CtTypeReferenceImpl#java.lang.String getQualifiedName()
CtTypeReferenceImpl#boolean isPrimitive()
CtTypeReferenceImpl#boolean isSubtypeOf(spoon.reflect.reference.CtTypeReference)
CtTypeReferenceImpl#<C extends spoon.reflect.reference.CtActualTypeContainer> C setActualTypeArguments(java.util.List)
CtTypeReferenceImpl#<C extends spoon.reflect.reference.CtTypeReference> C setDeclaringType(spoon.reflect.reference.CtTypeReference)
CtTypeReferenceImpl#<C extends spoon.reflect.reference.CtTypeReference> C setPackage(spoon.reflect.reference.CtPackageReference)
CtTypeReferenceImpl#void replace(spoon.reflect.reference.CtTypeReference)
CtTypeReferenceImpl#spoon.reflect.reference.CtIntersectionTypeReference asCtIntersectionTypeReference()
CtTypeReferenceImpl#spoon.reflect.reference.CtTypeReference unbox()
CtTypeReferenceImpl#java.util.Collection getDeclaredFields()
CtTypeReferenceImpl#spoon.reflect.reference.CtFieldReference getDeclaredField(java.lang.String)
CtTypeReferenceImpl#spoon.reflect.reference.CtFieldReference getDeclaredOrInheritedField(java.lang.String)
CtTypeReferenceImpl#java.util.Collection getDeclaredExecutables()
CtTypeReferenceImpl#java.util.Collection getAllFields()
CtTypeReferenceImpl#java.util.Collection getAllExecutables()
CtTypeReferenceImpl#java.util.Set getModifiers()
CtTypeReferenceImpl#spoon.reflect.reference.CtTypeReference getSuperclass()
CtTypeReferenceImpl#java.util.Set getSuperInterfaces()
CtTypeReferenceImpl#boolean isAnonymous()
CtTypeReferenceImpl#boolean isLocalType()
CtTypeReferenceImpl#<C extends spoon.reflect.reference.CtActualTypeContainer> C addActualTypeArgument(spoon.reflect.reference.CtTypeReference)
CtTypeReferenceImpl#boolean removeActualTypeArgument(spoon.reflect.reference.CtTypeReference)
CtTypeReferenceImpl#boolean isClass()
CtTypeReferenceImpl#boolean isInterface()
CtTypeReferenceImpl#boolean isAnnotationType()
CtTypeReferenceImpl#boolean isEnum()
CtTypeReferenceImpl#boolean canAccess(spoon.reflect.reference.CtTypeReference)
CtTypeReferenceImpl#spoon.reflect.reference.CtTypeReference getTopLevelType()
CtTypeReferenceImpl#spoon.reflect.reference.CtTypeReference getAccessType()
CtTypeReferenceImpl#boolean isShadow()
CtTypeReferenceImpl#<E extends spoon.reflect.declaration.CtShadowable> E setShadow(boolean)
CtTypeReferenceImpl#spoon.reflect.reference.CtTypeReference clone()
CtTypeReferenceImpl#spoon.reflect.declaration.CtTypeParameter getTypeParameterDeclaration()
CtTypeReferenceImpl#boolean isGenerics()
CtTypeReferenceImpl#spoon.reflect.reference.CtTypeReference getTypeErasure()
CtUnboundVariableReferenceImpl#void accept(spoon.reflect.visitor.CtVisitor)
CtUnboundVariableReferenceImpl#spoon.reflect.reference.CtUnboundVariableReference clone()
CtVariableReferenceImpl#void accept(spoon.reflect.visitor.CtVisitor)
CtVariableReferenceImpl#spoon.reflect.reference.CtTypeReference getType()
CtVariableReferenceImpl#<C extends spoon.reflect.reference.CtVariableReference> C setType(spoon.reflect.reference.CtTypeReference)
CtVariableReferenceImpl#spoon.reflect.declaration.CtVariable getDeclaration()
CtVariableReferenceImpl#java.util.Set getModifiers()
CtVariableReferenceImpl#void replace(spoon.reflect.reference.CtVariableReference)
CtVariableReferenceImpl#spoon.reflect.reference.CtVariableReference clone()
CtWildcardReferenceImpl#void accept(spoon.reflect.visitor.CtVisitor)
CtWildcardReferenceImpl#<T extends spoon.reflect.reference.CtReference> T setSimpleName(java.lang.String)
CtWildcardReferenceImpl#spoon.reflect.reference.CtWildcardReference clone()
CtWildcardReferenceImpl#spoon.reflect.declaration.CtType getTypeDeclaration()
DefaultParameterMatcher#boolean match(spoon.template.TemplateMatcher,spoon.reflect.declaration.CtElement,spoon.reflect.declaration.CtElement)
Parameters#java.lang.Integer getIndex(spoon.reflect.code.CtExpression)
Parameters#java.lang.Object getValue(spoon.template.Template,java.lang.String,java.lang.Integer)
Parameters#spoon.reflect.declaration.CtField getParameterField(spoon.reflect.declaration.CtClass,java.lang.String)
Parameters#void setValue(spoon.template.Template,java.lang.String,java.lang.Integer,java.lang.Object)
Parameters#java.util.List getNames(spoon.reflect.declaration.CtClass)
Parameters#java.util.Map getNamesToValues(spoon.template.Template,spoon.reflect.declaration.CtClass)
Parameters#java.util.Map getTemplateParametersAsMap(spoon.reflect.factory.Factory,spoon.reflect.declaration.CtType,spoon.template.Template)
Parameters#boolean isParameterSource(spoon.reflect.reference.CtFieldReference)
Parameters#boolean isParameterSource(java.lang.reflect.Field)
Parameters#<T> spoon.template.TemplateParameter NIL(java.lang.Class)
Parameters#java.util.List getAllTemplateParameterFields(java.lang.Class)
Parameters#java.util.List getAllTemplateParameterFields(java.lang.Class,spoon.reflect.factory.Factory)
SubstitutionVisitor#boolean isAddGeneratedBy()
SubstitutionVisitor#spoon.support.template.SubstitutionVisitor addGeneratedBy(boolean)
SubstitutionVisitor#void scan(java.util.Collection)
SubstitutionVisitor#void scan(spoon.reflect.declaration.CtElement)
SubstitutionVisitor#<E extends spoon.reflect.declaration.CtElement> java.util.List substitute(E extends spoon.reflect.declaration.CtElement)
ByteSerialization#byte[] serialize(java.lang.Object)
ByteSerialization#java.lang.Object deserialize(byte[])
EmptyClearableList#<T> java.util.List instance()
EmptyClearableList#void clear()
EmptyClearableList#java.util.Iterator iterator()
EmptyClearableList#java.util.ListIterator listIterator()
EmptyClearableList#int size()
EmptyClearableList#boolean isEmpty()
EmptyClearableList#boolean contains(java.lang.Object)
EmptyClearableList#boolean containsAll(java.util.Collection)
EmptyClearableList#java.lang.Object[] toArray()
EmptyClearableList#<T> T[] toArray(T[])
EmptyClearableList#E get(int)
EmptyClearableList#boolean equals(java.lang.Object)
EmptyClearableList#int hashCode()
EmptyClearableSet#<T> java.util.Set instance()
EmptyClearableSet#void clear()
EmptyClearableSet#java.util.Iterator iterator()
EmptyClearableSet#int size()
EmptyClearableSet#boolean isEmpty()
EmptyClearableSet#boolean contains(java.lang.Object)
EmptyClearableSet#boolean containsAll(java.util.Collection)
EmptyClearableSet#java.lang.Object[] toArray()
EmptyClearableSet#<T> T[] toArray(T[])
EmptyIterator#<T> java.util.Iterator instance()
EmptyIterator#boolean hasNext()
EmptyIterator#E next()
EmptyIterator#void remove()
RtHelper#java.lang.reflect.Field[] getAllFields(java.lang.Class)
RtHelper#java.util.Collection getAllFields(java.lang.Class,spoon.reflect.factory.Factory)
RtHelper#java.lang.reflect.Method[] getAllMethods(java.lang.Class)
RtHelper#<T> T invoke(spoon.reflect.code.CtInvocation)
RtHelper#java.util.Set getModifiers(int)
RtHelper#java.util.Collection getAllExecutables(java.lang.Class,spoon.reflect.factory.Factory)
RtHelper#java.lang.reflect.Method getMethod(java.lang.Class,java.lang.String,int)
SortedList#boolean add(E)
SortedList#boolean addAll(java.util.Collection)
SortedList#java.util.Comparator getComparator()
SortedList#void setComparator(java.util.Comparator)
Timer#void start(java.lang.String)
Timer#void stop(java.lang.String)
Timer#void display()
Timer#void stop()
Timer#java.lang.String getName()
Timer#long getValue()
Timer#java.lang.String toString()
CloneBuilder#<T extends spoon.reflect.declaration.CtElement> T build(spoon.reflect.declaration.CtElement,spoon.reflect.declaration.CtElement)
CloneBuilder#<T extends spoon.reflect.declaration.CtElement> T build(spoon.support.visitor.clone.CloneBuilder,spoon.reflect.declaration.CtElement,spoon.reflect.declaration.CtElement)
CloneBuilder#void setOther(spoon.reflect.declaration.CtElement)
CloneBuilder#<T> void visitCtCodeSnippetExpression(spoon.reflect.code.CtCodeSnippetExpression)
CloneBuilder#void visitCtCodeSnippetStatement(spoon.reflect.code.CtCodeSnippetStatement)
CloneBuilder#void scanCtElement(spoon.reflect.declaration.CtElement)
CloneBuilder#void scanCtNamedElement(spoon.reflect.declaration.CtNamedElement)
CloneBuilder#void scanCtReference(spoon.reflect.reference.CtReference)
CloneBuilder#void scanCtStatement(spoon.reflect.code.CtStatement)
CloneBuilder#<T> void scanCtType(spoon.reflect.declaration.CtType)
CloneBuilder#<T,A extends T> void visitCtOperatorAssignment(spoon.reflect.code.CtOperatorAssignment)
CloneBuilder#<A extends java.lang.annotation.Annotation> void visitCtAnnotation(spoon.reflect.declaration.CtAnnotation)
CloneBuilder#void visitCtAnonymousExecutable(spoon.reflect.declaration.CtAnonymousExecutable)
CloneBuilder#<T> void visitCtBinaryOperator(spoon.reflect.code.CtBinaryOperator)
CloneBuilder#void visitCtBreak(spoon.reflect.code.CtBreak)
CloneBuilder#<T> void visitCtConstructor(spoon.reflect.declaration.CtConstructor)
CloneBuilder#void visitCtContinue(spoon.reflect.code.CtContinue)
CloneBuilder#<T> void visitCtExecutableReference(spoon.reflect.reference.CtExecutableReference)
CloneBuilder#<T> void visitCtField(spoon.reflect.declaration.CtField)
CloneBuilder#<T> void visitCtFieldReference(spoon.reflect.reference.CtFieldReference)
CloneBuilder#<T> void visitCtInvocation(spoon.reflect.code.CtInvocation)
CloneBuilder#<T> void visitCtLiteral(spoon.reflect.code.CtLiteral)
CloneBuilder#<T> void visitCtLocalVariable(spoon.reflect.code.CtLocalVariable)
CloneBuilder#<T> void visitCtCatchVariable(spoon.reflect.code.CtCatchVariable)
CloneBuilder#<T> void visitCtMethod(spoon.reflect.declaration.CtMethod)
CloneBuilder#<T> void visitCtConstructorCall(spoon.reflect.code.CtConstructorCall)
CloneBuilder#<T> void visitCtLambda(spoon.reflect.code.CtLambda)
CloneBuilder#<T,A extends T> void visitCtOperatorAssignement(spoon.reflect.code.CtOperatorAssignment)
CloneBuilder#void visitCtPackage(spoon.reflect.declaration.CtPackage)
CloneBuilder#<T> void visitCtParameter(spoon.reflect.declaration.CtParameter)
CloneBuilder#void visitCtTypeParameterReference(spoon.reflect.reference.CtTypeParameterReference)
CloneBuilder#<T> void visitCtTypeReference(spoon.reflect.reference.CtTypeReference)
CloneBuilder#<T> void visitCtUnaryOperator(spoon.reflect.code.CtUnaryOperator)
CloneBuilder#void visitCtComment(spoon.reflect.code.CtComment)
CloneBuilder#void visitCtJavaDocTag(spoon.reflect.code.CtJavaDocTag)
CloneVisitor#<T extends spoon.reflect.declaration.CtElement> T getClone()
CloneVisitor#<A extends java.lang.annotation.Annotation> void visitCtAnnotation(spoon.reflect.declaration.CtAnnotation)
CloneVisitor#<A extends java.lang.annotation.Annotation> void visitCtAnnotationType(spoon.reflect.declaration.CtAnnotationType)
CloneVisitor#void visitCtAnonymousExecutable(spoon.reflect.declaration.CtAnonymousExecutable)
CloneVisitor#<T> void visitCtArrayRead(spoon.reflect.code.CtArrayRead)
CloneVisitor#<T> void visitCtArrayWrite(spoon.reflect.code.CtArrayWrite)
CloneVisitor#<T> void visitCtArrayTypeReference(spoon.reflect.reference.CtArrayTypeReference)
CloneVisitor#<T> void visitCtAssert(spoon.reflect.code.CtAssert)
CloneVisitor#<T,A extends T> void visitCtAssignment(spoon.reflect.code.CtAssignment)
CloneVisitor#<T> void visitCtBinaryOperator(spoon.reflect.code.CtBinaryOperator)
CloneVisitor#<R> void visitCtBlock(spoon.reflect.code.CtBlock)
CloneVisitor#void visitCtBreak(spoon.reflect.code.CtBreak)
CloneVisitor#<S> void visitCtCase(spoon.reflect.code.CtCase)
CloneVisitor#void visitCtCatch(spoon.reflect.code.CtCatch)
CloneVisitor#<T> void visitCtClass(spoon.reflect.declaration.CtClass)
CloneVisitor#void visitCtTypeParameter(spoon.reflect.declaration.CtTypeParameter)
CloneVisitor#<T> void visitCtConditional(spoon.reflect.code.CtConditional)
CloneVisitor#<T> void visitCtConstructor(spoon.reflect.declaration.CtConstructor)
CloneVisitor#void visitCtContinue(spoon.reflect.code.CtContinue)
CloneVisitor#void visitCtDo(spoon.reflect.code.CtDo)
CloneVisitor#<T extends java.lang.Enum> void visitCtEnum(spoon.reflect.declaration.CtEnum)
CloneVisitor#<T> void visitCtExecutableReference(spoon.reflect.reference.CtExecutableReference)
CloneVisitor#<T> void visitCtField(spoon.reflect.declaration.CtField)
CloneVisitor#<T> void visitCtEnumValue(spoon.reflect.declaration.CtEnumValue)
CloneVisitor#<T> void visitCtThisAccess(spoon.reflect.code.CtThisAccess)
CloneVisitor#<T> void visitCtAnnotationFieldAccess(spoon.reflect.code.CtAnnotationFieldAccess)
CloneVisitor#<T> void visitCtFieldReference(spoon.reflect.reference.CtFieldReference)
CloneVisitor#void visitCtFor(spoon.reflect.code.CtFor)
CloneVisitor#void visitCtForEach(spoon.reflect.code.CtForEach)
CloneVisitor#void visitCtIf(spoon.reflect.code.CtIf)
CloneVisitor#<T> void visitCtInterface(spoon.reflect.declaration.CtInterface)
CloneVisitor#<T> void visitCtInvocation(spoon.reflect.code.CtInvocation)
CloneVisitor#<T> void visitCtLiteral(spoon.reflect.code.CtLiteral)
CloneVisitor#<T> void visitCtLocalVariable(spoon.reflect.code.CtLocalVariable)
CloneVisitor#<T> void visitCtLocalVariableReference(spoon.reflect.reference.CtLocalVariableReference)
CloneVisitor#<T> void visitCtCatchVariable(spoon.reflect.code.CtCatchVariable)
CloneVisitor#<T> void visitCtCatchVariableReference(spoon.reflect.reference.CtCatchVariableReference)
CloneVisitor#<T> void visitCtMethod(spoon.reflect.declaration.CtMethod)
CloneVisitor#<T> void visitCtAnnotationMethod(spoon.reflect.declaration.CtAnnotationMethod)
CloneVisitor#<T> void visitCtNewArray(spoon.reflect.code.CtNewArray)
CloneVisitor#<T> void visitCtConstructorCall(spoon.reflect.code.CtConstructorCall)
CloneVisitor#<T> void visitCtNewClass(spoon.reflect.code.CtNewClass)
CloneVisitor#<T> void visitCtLambda(spoon.reflect.code.CtLambda)
CloneVisitor#<T,E extends spoon.reflect.code.CtExpression> void visitCtExecutableReferenceExpression(spoon.reflect.code.CtExecutableReferenceExpression)
CloneVisitor#<T,A extends T> void visitCtOperatorAssignment(spoon.reflect.code.CtOperatorAssignment)
CloneVisitor#void visitCtPackage(spoon.reflect.declaration.CtPackage)
CloneVisitor#void visitCtPackageReference(spoon.reflect.reference.CtPackageReference)
CloneVisitor#<T> void visitCtParameter(spoon.reflect.declaration.CtParameter)
CloneVisitor#<T> void visitCtParameterReference(spoon.reflect.reference.CtParameterReference)
CloneVisitor#<R> void visitCtReturn(spoon.reflect.code.CtReturn)
CloneVisitor#<R> void visitCtStatementList(spoon.reflect.code.CtStatementList)
CloneVisitor#<S> void visitCtSwitch(spoon.reflect.code.CtSwitch)
CloneVisitor#void visitCtSynchronized(spoon.reflect.code.CtSynchronized)
CloneVisitor#void visitCtThrow(spoon.reflect.code.CtThrow)
CloneVisitor#void visitCtTry(spoon.reflect.code.CtTry)
CloneVisitor#void visitCtTryWithResource(spoon.reflect.code.CtTryWithResource)
CloneVisitor#void visitCtTypeParameterReference(spoon.reflect.reference.CtTypeParameterReference)
CloneVisitor#void visitCtWildcardReference(spoon.reflect.reference.CtWildcardReference)
CloneVisitor#<T> void visitCtIntersectionTypeReference(spoon.reflect.reference.CtIntersectionTypeReference)
CloneVisitor#<T> void visitCtTypeReference(spoon.reflect.reference.CtTypeReference)
CloneVisitor#<T> void visitCtTypeAccess(spoon.reflect.code.CtTypeAccess)
CloneVisitor#<T> void visitCtUnaryOperator(spoon.reflect.code.CtUnaryOperator)
CloneVisitor#<T> void visitCtVariableRead(spoon.reflect.code.CtVariableRead)
CloneVisitor#<T> void visitCtVariableWrite(spoon.reflect.code.CtVariableWrite)
CloneVisitor#void visitCtWhile(spoon.reflect.code.CtWhile)
CloneVisitor#<T> void visitCtCodeSnippetExpression(spoon.reflect.code.CtCodeSnippetExpression)
CloneVisitor#void visitCtCodeSnippetStatement(spoon.reflect.code.CtCodeSnippetStatement)
CloneVisitor#<T> void visitCtUnboundVariableReference(spoon.reflect.reference.CtUnboundVariableReference)
CloneVisitor#<T> void visitCtFieldRead(spoon.reflect.code.CtFieldRead)
CloneVisitor#<T> void visitCtFieldWrite(spoon.reflect.code.CtFieldWrite)
CloneVisitor#<T> void visitCtSuperAccess(spoon.reflect.code.CtSuperAccess)
CloneVisitor#void visitCtComment(spoon.reflect.code.CtComment)
CloneVisitor#void visitCtJavaDoc(spoon.reflect.code.CtJavaDoc)
CloneVisitor#void visitCtJavaDocTag(spoon.reflect.code.CtJavaDocTag)
CloneHelper#<T extends spoon.reflect.declaration.CtElement> T clone(T extends spoon.reflect.declaration.CtElement)
CloneHelper#<T extends spoon.reflect.declaration.CtElement> java.util.Collection clone(java.util.Collection)
CloneHelper#<T extends spoon.reflect.declaration.CtElement> java.util.List clone(java.util.List)
CloneHelper#<T extends spoon.reflect.declaration.CtElement> java.util.Set clone(java.util.Set)
CloneHelper#<T extends spoon.reflect.declaration.CtElement> java.util.Map clone(java.util.Map)
EqualsChecker#void setOther(spoon.reflect.declaration.CtElement)
EqualsChecker#boolean isNotEqual()
EqualsChecker#void scanCtNamedElement(spoon.reflect.declaration.CtNamedElement)
EqualsChecker#void scanCtReference(spoon.reflect.reference.CtReference)
EqualsChecker#void scanCtStatement(spoon.reflect.code.CtStatement)
EqualsChecker#void scanCtModifiable(spoon.reflect.declaration.CtModifiable)
EqualsChecker#<T,A extends T> void visitCtOperatorAssignment(spoon.reflect.code.CtOperatorAssignment)
EqualsChecker#<T> void visitCtBinaryOperator(spoon.reflect.code.CtBinaryOperator)
EqualsChecker#<T> void visitCtUnaryOperator(spoon.reflect.code.CtUnaryOperator)
EqualsChecker#<T> void visitCtArrayTypeReference(spoon.reflect.reference.CtArrayTypeReference)
EqualsChecker#void visitCtBreak(spoon.reflect.code.CtBreak)
EqualsChecker#void visitCtContinue(spoon.reflect.code.CtContinue)
EqualsChecker#<T> void visitCtExecutableReference(spoon.reflect.reference.CtExecutableReference)
EqualsChecker#<T> void visitCtMethod(spoon.reflect.declaration.CtMethod)
EqualsChecker#<T> void visitCtParameter(spoon.reflect.declaration.CtParameter)
EqualsChecker#<T> void visitCtLiteral(spoon.reflect.code.CtLiteral)
EqualsVisitor#boolean equals(spoon.reflect.declaration.CtElement,spoon.reflect.declaration.CtElement)
AbstractRuntimeBuilderContext#void addPackage(spoon.reflect.declaration.CtPackage)
AbstractRuntimeBuilderContext#void addType(spoon.reflect.declaration.CtType)
AbstractRuntimeBuilderContext#void addAnnotation(spoon.reflect.declaration.CtAnnotation)
AbstractRuntimeBuilderContext#void addConstructor(spoon.reflect.declaration.CtConstructor)
AbstractRuntimeBuilderContext#void addMethod(spoon.reflect.declaration.CtMethod)
AbstractRuntimeBuilderContext#void addField(spoon.reflect.declaration.CtField)
AbstractRuntimeBuilderContext#void addEnumValue(spoon.reflect.declaration.CtEnumValue)
AbstractRuntimeBuilderContext#void addParameter(spoon.reflect.declaration.CtParameter)
AbstractRuntimeBuilderContext#void addInterfaceReference(spoon.reflect.reference.CtTypeReference)
AbstractRuntimeBuilderContext#void addClassReference(spoon.reflect.reference.CtTypeReference)
AbstractRuntimeBuilderContext#void addArrayReference(spoon.reflect.reference.CtArrayTypeReference)
AbstractRuntimeBuilderContext#void addFormalType(spoon.reflect.declaration.CtTypeParameter)
AbstractRuntimeBuilderContext#void addTypeName(spoon.reflect.reference.CtTypeReference)
AnnotationRuntimeBuilderContext#void addAnnotation(spoon.reflect.declaration.CtAnnotation)
AnnotationRuntimeBuilderContext#void addClassReference(spoon.reflect.reference.CtTypeReference)
ExecutableRuntimeBuilderContext#void addAnnotation(spoon.reflect.declaration.CtAnnotation)
ExecutableRuntimeBuilderContext#void addParameter(spoon.reflect.declaration.CtParameter)
ExecutableRuntimeBuilderContext#void addArrayReference(spoon.reflect.reference.CtArrayTypeReference)
ExecutableRuntimeBuilderContext#void addClassReference(spoon.reflect.reference.CtTypeReference)
ExecutableRuntimeBuilderContext#void addTypeName(spoon.reflect.reference.CtTypeReference)
ExecutableRuntimeBuilderContext#void addFormalType(spoon.reflect.declaration.CtTypeParameter)
PackageRuntimeBuilderContext#void addType(spoon.reflect.declaration.CtType)
PackageRuntimeBuilderContext#void addAnnotation(spoon.reflect.declaration.CtAnnotation)
TypeReferenceRuntimeBuilderContext#void addPackage(spoon.reflect.declaration.CtPackage)
TypeReferenceRuntimeBuilderContext#void addClassReference(spoon.reflect.reference.CtTypeReference)
TypeReferenceRuntimeBuilderContext#void addTypeName(spoon.reflect.reference.CtTypeReference)
TypeReferenceRuntimeBuilderContext#void addAnnotation(spoon.reflect.declaration.CtAnnotation)
TypeRuntimeBuilderContext#void addPackage(spoon.reflect.declaration.CtPackage)
TypeRuntimeBuilderContext#void addType(spoon.reflect.declaration.CtType)
TypeRuntimeBuilderContext#void addAnnotation(spoon.reflect.declaration.CtAnnotation)
TypeRuntimeBuilderContext#void addMethod(spoon.reflect.declaration.CtMethod)
TypeRuntimeBuilderContext#void addField(spoon.reflect.declaration.CtField)
TypeRuntimeBuilderContext#void addInterfaceReference(spoon.reflect.reference.CtTypeReference)
TypeRuntimeBuilderContext#void addFormalType(spoon.reflect.declaration.CtTypeParameter)
TypeRuntimeBuilderContext#void addTypeName(spoon.reflect.reference.CtTypeReference)
VariableRuntimeBuilderContext#void addAnnotation(spoon.reflect.declaration.CtAnnotation)
VariableRuntimeBuilderContext#void addClassReference(spoon.reflect.reference.CtTypeReference)
VariableRuntimeBuilderContext#void addTypeName(spoon.reflect.reference.CtTypeReference)
VariableRuntimeBuilderContext#void addArrayReference(spoon.reflect.reference.CtArrayTypeReference)
RtMethod#java.lang.Class getDeclaringClass()
RtMethod#java.lang.String getName()
RtMethod#java.lang.Class getReturnType()
RtMethod#java.lang.reflect.TypeVariable[] getTypeParameters()
RtMethod#java.lang.Class[] getParameterTypes()
RtMethod#java.lang.Class[] getExceptionTypes()
RtMethod#int getModifiers()
RtMethod#java.lang.annotation.Annotation[] getDeclaredAnnotations()
RtMethod#java.lang.annotation.Annotation[][] getParameterAnnotations()
RtMethod#boolean isVarArgs()
RtMethod#boolean isDefault()
RtMethod#java.lang.reflect.Type getGenericReturnType()
RtMethod#java.lang.reflect.Type[] getGenericParameterTypes()
RtMethod#boolean equals(java.lang.Object)
RtMethod#int hashCode()
RtMethod#spoon.support.visitor.java.reflect.RtMethod create(java.lang.reflect.Method)
RtMethod#<T> spoon.support.visitor.java.reflect.RtMethod[] methodsOf(java.lang.Class)
RtMethod#<T> spoon.support.visitor.java.reflect.RtMethod[] sameMethodsWithDifferentTypeOf(java.lang.Class,java.util.List)
RtParameter#java.lang.String getName()
RtParameter#java.lang.Class getType()
RtParameter#java.lang.reflect.Type getGenericType()
RtParameter#java.lang.annotation.Annotation[] getDeclaredAnnotations()
RtParameter#boolean isVarArgs()
RtParameter#boolean equals(java.lang.Object)
RtParameter#int hashCode()
RtParameter#spoon.support.visitor.java.reflect.RtParameter[] parametersOf(spoon.support.visitor.java.reflect.RtMethod)
RtParameter#spoon.support.visitor.java.reflect.RtParameter[] parametersOf(java.lang.reflect.Constructor)
JavaReflectionTreeBuilder#<T,R extends spoon.reflect.declaration.CtType> R scan(java.lang.Class)
JavaReflectionTreeBuilder#void visitPackage(java.lang.Package)
JavaReflectionTreeBuilder#<T> void visitClass(java.lang.Class)
JavaReflectionTreeBuilder#<T> void visitInterface(java.lang.Class)
JavaReflectionTreeBuilder#<T> void visitEnum(java.lang.Class)
JavaReflectionTreeBuilder#<T extends java.lang.annotation.Annotation> void visitAnnotationClass(java.lang.Class)
JavaReflectionTreeBuilder#void visitAnnotation(java.lang.annotation.Annotation)
JavaReflectionTreeBuilder#<T> void visitConstructor(java.lang.reflect.Constructor)
JavaReflectionTreeBuilder#void visitMethod(spoon.support.visitor.java.reflect.RtMethod)
JavaReflectionTreeBuilder#void visitField(java.lang.reflect.Field)
JavaReflectionTreeBuilder#void visitEnumValue(java.lang.reflect.Field)
JavaReflectionTreeBuilder#void visitParameter(spoon.support.visitor.java.reflect.RtParameter)
JavaReflectionTreeBuilder#<T extends java.lang.reflect.GenericDeclaration> void visitTypeParameter(java.lang.reflect.TypeVariable)
JavaReflectionTreeBuilder#<T extends java.lang.reflect.GenericDeclaration> void visitTypeParameterReference(java.lang.reflect.TypeVariable)
JavaReflectionTreeBuilder#void visitType(java.lang.reflect.Type)
JavaReflectionTreeBuilder#void visitType(java.lang.reflect.ParameterizedType)
JavaReflectionTreeBuilder#void visitType(java.lang.reflect.WildcardType)
JavaReflectionTreeBuilder#<T> void visitArrayReference(java.lang.Class)
JavaReflectionTreeBuilder#<T> void visitClassReference(java.lang.Class)
JavaReflectionTreeBuilder#<T> void visitInterfaceReference(java.lang.Class)
JavaReflectionVisitorImpl#void visitPackage(java.lang.Package)
JavaReflectionVisitorImpl#<T> void visitClass(java.lang.Class)
JavaReflectionVisitorImpl#<T> void visitInterface(java.lang.Class)
JavaReflectionVisitorImpl#<T> void visitEnum(java.lang.Class)
JavaReflectionVisitorImpl#<T extends java.lang.annotation.Annotation> void visitAnnotationClass(java.lang.Class)
JavaReflectionVisitorImpl#void visitAnnotation(java.lang.annotation.Annotation)
JavaReflectionVisitorImpl#<T> void visitConstructor(java.lang.reflect.Constructor)
JavaReflectionVisitorImpl#void visitMethod(spoon.support.visitor.java.reflect.RtMethod)
JavaReflectionVisitorImpl#void visitField(java.lang.reflect.Field)
JavaReflectionVisitorImpl#void visitEnumValue(java.lang.reflect.Field)
JavaReflectionVisitorImpl#void visitParameter(spoon.support.visitor.java.reflect.RtParameter)
JavaReflectionVisitorImpl#<T extends java.lang.reflect.GenericDeclaration> void visitTypeParameter(java.lang.reflect.TypeVariable)
JavaReflectionVisitorImpl#<T extends java.lang.reflect.GenericDeclaration> void visitTypeParameterReference(java.lang.reflect.TypeVariable)
JavaReflectionVisitorImpl#void visitType(java.lang.reflect.Type)
JavaReflectionVisitorImpl#void visitType(java.lang.reflect.ParameterizedType)
JavaReflectionVisitorImpl#void visitType(java.lang.reflect.WildcardType)
JavaReflectionVisitorImpl#<T> void visitArrayReference(java.lang.Class)
JavaReflectionVisitorImpl#<T> void visitClassReference(java.lang.Class)
JavaReflectionVisitorImpl#<T> void visitInterfaceReference(java.lang.Class)
ReplacementVisitor#void replace(spoon.reflect.declaration.CtElement,spoon.reflect.declaration.CtElement)
ReplacementVisitor#<E extends spoon.reflect.declaration.CtElement> void replace(spoon.reflect.declaration.CtElement,java.util.Collection)
ReplacementVisitor#<A extends java.lang.annotation.Annotation> void visitCtAnnotation(spoon.reflect.declaration.CtAnnotation)
ReplacementVisitor#<A extends java.lang.annotation.Annotation> void visitCtAnnotationType(spoon.reflect.declaration.CtAnnotationType)
ReplacementVisitor#void visitCtAnonymousExecutable(spoon.reflect.declaration.CtAnonymousExecutable)
ReplacementVisitor#<T> void visitCtArrayRead(spoon.reflect.code.CtArrayRead)
ReplacementVisitor#<T> void visitCtArrayWrite(spoon.reflect.code.CtArrayWrite)
ReplacementVisitor#<T> void visitCtArrayTypeReference(spoon.reflect.reference.CtArrayTypeReference)
ReplacementVisitor#<T> void visitCtAssert(spoon.reflect.code.CtAssert)
ReplacementVisitor#<T,A extends T> void visitCtAssignment(spoon.reflect.code.CtAssignment)
ReplacementVisitor#<T> void visitCtBinaryOperator(spoon.reflect.code.CtBinaryOperator)
ReplacementVisitor#<R> void visitCtBlock(spoon.reflect.code.CtBlock)
ReplacementVisitor#void visitCtBreak(spoon.reflect.code.CtBreak)
ReplacementVisitor#<S> void visitCtCase(spoon.reflect.code.CtCase)
ReplacementVisitor#void visitCtCatch(spoon.reflect.code.CtCatch)
ReplacementVisitor#<T> void visitCtClass(spoon.reflect.declaration.CtClass)
ReplacementVisitor#void visitCtTypeParameter(spoon.reflect.declaration.CtTypeParameter)
ReplacementVisitor#<T> void visitCtConditional(spoon.reflect.code.CtConditional)
ReplacementVisitor#<T> void visitCtConstructor(spoon.reflect.declaration.CtConstructor)
ReplacementVisitor#void visitCtContinue(spoon.reflect.code.CtContinue)
ReplacementVisitor#void visitCtDo(spoon.reflect.code.CtDo)
ReplacementVisitor#<T extends java.lang.Enum> void visitCtEnum(spoon.reflect.declaration.CtEnum)
ReplacementVisitor#<T> void visitCtExecutableReference(spoon.reflect.reference.CtExecutableReference)
ReplacementVisitor#<T> void visitCtField(spoon.reflect.declaration.CtField)
ReplacementVisitor#<T> void visitCtEnumValue(spoon.reflect.declaration.CtEnumValue)
ReplacementVisitor#<T> void visitCtThisAccess(spoon.reflect.code.CtThisAccess)
ReplacementVisitor#<T> void visitCtAnnotationFieldAccess(spoon.reflect.code.CtAnnotationFieldAccess)
ReplacementVisitor#<T> void visitCtFieldReference(spoon.reflect.reference.CtFieldReference)
ReplacementVisitor#void visitCtFor(spoon.reflect.code.CtFor)
ReplacementVisitor#void visitCtForEach(spoon.reflect.code.CtForEach)
ReplacementVisitor#void visitCtIf(spoon.reflect.code.CtIf)
ReplacementVisitor#<T> void visitCtInterface(spoon.reflect.declaration.CtInterface)
ReplacementVisitor#<T> void visitCtInvocation(spoon.reflect.code.CtInvocation)
ReplacementVisitor#<T> void visitCtLiteral(spoon.reflect.code.CtLiteral)
ReplacementVisitor#<T> void visitCtLocalVariable(spoon.reflect.code.CtLocalVariable)
ReplacementVisitor#<T> void visitCtLocalVariableReference(spoon.reflect.reference.CtLocalVariableReference)
ReplacementVisitor#<T> void visitCtCatchVariable(spoon.reflect.code.CtCatchVariable)
ReplacementVisitor#<T> void visitCtCatchVariableReference(spoon.reflect.reference.CtCatchVariableReference)
ReplacementVisitor#<T> void visitCtMethod(spoon.reflect.declaration.CtMethod)
ReplacementVisitor#<T> void visitCtAnnotationMethod(spoon.reflect.declaration.CtAnnotationMethod)
ReplacementVisitor#<T> void visitCtNewArray(spoon.reflect.code.CtNewArray)
ReplacementVisitor#<T> void visitCtConstructorCall(spoon.reflect.code.CtConstructorCall)
ReplacementVisitor#<T> void visitCtNewClass(spoon.reflect.code.CtNewClass)
ReplacementVisitor#<T> void visitCtLambda(spoon.reflect.code.CtLambda)
ReplacementVisitor#<T,E extends spoon.reflect.code.CtExpression> void visitCtExecutableReferenceExpression(spoon.reflect.code.CtExecutableReferenceExpression)
ReplacementVisitor#<T,A extends T> void visitCtOperatorAssignment(spoon.reflect.code.CtOperatorAssignment)
ReplacementVisitor#void visitCtPackage(spoon.reflect.declaration.CtPackage)
ReplacementVisitor#void visitCtPackageReference(spoon.reflect.reference.CtPackageReference)
ReplacementVisitor#<T> void visitCtParameter(spoon.reflect.declaration.CtParameter)
ReplacementVisitor#<T> void visitCtParameterReference(spoon.reflect.reference.CtParameterReference)
ReplacementVisitor#<R> void visitCtReturn(spoon.reflect.code.CtReturn)
ReplacementVisitor#<R> void visitCtStatementList(spoon.reflect.code.CtStatementList)
ReplacementVisitor#<S> void visitCtSwitch(spoon.reflect.code.CtSwitch)
ReplacementVisitor#void visitCtSynchronized(spoon.reflect.code.CtSynchronized)
ReplacementVisitor#void visitCtThrow(spoon.reflect.code.CtThrow)
ReplacementVisitor#void visitCtTry(spoon.reflect.code.CtTry)
ReplacementVisitor#void visitCtTryWithResource(spoon.reflect.code.CtTryWithResource)
ReplacementVisitor#void visitCtTypeParameterReference(spoon.reflect.reference.CtTypeParameterReference)
ReplacementVisitor#void visitCtWildcardReference(spoon.reflect.reference.CtWildcardReference)
ReplacementVisitor#<T> void visitCtIntersectionTypeReference(spoon.reflect.reference.CtIntersectionTypeReference)
ReplacementVisitor#<T> void visitCtTypeReference(spoon.reflect.reference.CtTypeReference)
ReplacementVisitor#<T> void visitCtTypeAccess(spoon.reflect.code.CtTypeAccess)
ReplacementVisitor#<T> void visitCtUnaryOperator(spoon.reflect.code.CtUnaryOperator)
ReplacementVisitor#<T> void visitCtVariableRead(spoon.reflect.code.CtVariableRead)
ReplacementVisitor#<T> void visitCtVariableWrite(spoon.reflect.code.CtVariableWrite)
ReplacementVisitor#void visitCtWhile(spoon.reflect.code.CtWhile)
ReplacementVisitor#<T> void visitCtCodeSnippetExpression(spoon.reflect.code.CtCodeSnippetExpression)
ReplacementVisitor#void visitCtCodeSnippetStatement(spoon.reflect.code.CtCodeSnippetStatement)
ReplacementVisitor#<T> void visitCtUnboundVariableReference(spoon.reflect.reference.CtUnboundVariableReference)
ReplacementVisitor#<T> void visitCtFieldRead(spoon.reflect.code.CtFieldRead)
ReplacementVisitor#<T> void visitCtFieldWrite(spoon.reflect.code.CtFieldWrite)
ReplacementVisitor#<T> void visitCtSuperAccess(spoon.reflect.code.CtSuperAccess)
ReplacementVisitor#void visitCtComment(spoon.reflect.code.CtComment)
ReplacementVisitor#void visitCtJavaDoc(spoon.reflect.code.CtJavaDoc)
ReplacementVisitor#void visitCtJavaDocTag(spoon.reflect.code.CtJavaDocTag)
AbstractTypingContext#spoon.reflect.reference.CtTypeReference adaptType(spoon.reflect.declaration.CtTypeInformation)
ClassTypingContext#spoon.reflect.declaration.CtType getAdaptationScope()
ClassTypingContext#boolean isSubtypeOf(spoon.reflect.reference.CtTypeReference)
ClassTypingContext#java.util.List resolveActualTypeArgumentsOf(spoon.reflect.reference.CtTypeReference)
ClassTypingContext#boolean isOverriding(spoon.reflect.declaration.CtMethod,spoon.reflect.declaration.CtMethod)
ClassTypingContext#boolean isSubSignature(spoon.reflect.declaration.CtMethod,spoon.reflect.declaration.CtMethod)
ClassTypingContext#boolean isSameSignature(spoon.reflect.declaration.CtExecutable,spoon.reflect.declaration.CtMethod)
ClassTypingContext#spoon.support.visitor.ClassTypingContext getEnclosingGenericTypeAdapter()
HashcodeVisitor#void scanCtNamedElement(spoon.reflect.declaration.CtNamedElement)
HashcodeVisitor#void scan(spoon.reflect.declaration.CtElement)
HashcodeVisitor#int getHasCode()
MethodTypingContext#spoon.reflect.declaration.CtFormalTypeDeclarer getAdaptationScope()
MethodTypingContext#spoon.support.visitor.MethodTypingContext setMethod(spoon.reflect.declaration.CtMethod)
MethodTypingContext#spoon.support.visitor.MethodTypingContext setConstructor(spoon.reflect.declaration.CtConstructor)
MethodTypingContext#spoon.support.visitor.ClassTypingContext getEnclosingGenericTypeAdapter()
MethodTypingContext#spoon.support.visitor.MethodTypingContext setClassTypingContext(spoon.support.visitor.ClassTypingContext)
MethodTypingContext#spoon.support.visitor.MethodTypingContext setInvocation(spoon.reflect.code.CtInvocation)
MethodTypingContext#spoon.support.visitor.MethodTypingContext setExecutableReference(spoon.reflect.reference.CtExecutableReference)
MethodTypingContext#boolean hasSameMethodFormalTypeParameters(spoon.reflect.declaration.CtFormalTypeDeclarer)
ProcessingVisitor#spoon.processing.Processor getProcessor()
ProcessingVisitor#void scan(java.util.Collection)
ProcessingVisitor#void scan(spoon.reflect.declaration.CtElement)
ProcessingVisitor#void setProcessor(spoon.processing.Processor)
SignaturePrinter#java.lang.String getSignature()
SignaturePrinter#<T> void visitCtArrayTypeReference(spoon.reflect.reference.CtArrayTypeReference)
SignaturePrinter#<T> void visitCtExecutableReference(spoon.reflect.reference.CtExecutableReference)
SignaturePrinter#<T> void writeNameAndParameters(spoon.reflect.reference.CtExecutableReference)
SignaturePrinter#<T> void visitCtTypeReference(spoon.reflect.reference.CtTypeReference)
SignaturePrinter#void visitCtTypeParameterReference(spoon.reflect.reference.CtTypeParameterReference)
SignaturePrinter#<T> void visitCtIntersectionTypeReference(spoon.reflect.reference.CtIntersectionTypeReference)
SignaturePrinter#<T> void visitCtConstructor(spoon.reflect.declaration.CtConstructor)
SignaturePrinter#<T> void visitCtAnnotationMethod(spoon.reflect.declaration.CtAnnotationMethod)
SignaturePrinter#<T> void visitCtMethod(spoon.reflect.declaration.CtMethod)
SubInheritanceHierarchyResolver#spoon.support.visitor.SubInheritanceHierarchyResolver addSuperType(spoon.reflect.declaration.CtTypeInformation)
SubInheritanceHierarchyResolver#spoon.support.visitor.SubInheritanceHierarchyResolver includingInterfaces(boolean)
SubInheritanceHierarchyResolver#spoon.support.visitor.SubInheritanceHierarchyResolver failOnClassNotFound(boolean)
SubInheritanceHierarchyResolver#<T extends spoon.reflect.declaration.CtType> void forEachSubTypeInPackage(spoon.reflect.visitor.chain.CtConsumer)
TypeReferenceScanner#java.util.Set getReferences()
TypeReferenceScanner#<T> void visitCtFieldRead(spoon.reflect.code.CtFieldRead)
TypeReferenceScanner#<T> void visitCtFieldWrite(spoon.reflect.code.CtFieldWrite)
TypeReferenceScanner#<T> void visitCtFieldReference(spoon.reflect.reference.CtFieldReference)
TypeReferenceScanner#<T> void visitCtExecutableReference(spoon.reflect.reference.CtExecutableReference)
TypeReferenceScanner#<T> void visitCtTypeReference(spoon.reflect.reference.CtTypeReference)
TypeReferenceScanner#<A extends java.lang.annotation.Annotation> void visitCtAnnotationType(spoon.reflect.declaration.CtAnnotationType)
TypeReferenceScanner#<T extends java.lang.Enum> void visitCtEnum(spoon.reflect.declaration.CtEnum)
TypeReferenceScanner#<T> void visitCtInterface(spoon.reflect.declaration.CtInterface)
TypeReferenceScanner#<T> void visitCtClass(spoon.reflect.declaration.CtClass)
DefaultCoreFactory#<T extends spoon.reflect.declaration.CtElement> T clone(T extends spoon.reflect.declaration.CtElement)
DefaultCoreFactory#<A extends java.lang.annotation.Annotation> spoon.reflect.declaration.CtAnnotation createAnnotation()
DefaultCoreFactory#<T extends java.lang.annotation.Annotation> spoon.reflect.declaration.CtAnnotationType createAnnotationType()
DefaultCoreFactory#spoon.reflect.declaration.CtAnonymousExecutable createAnonymousExecutable()
DefaultCoreFactory#<T> spoon.reflect.code.CtArrayRead createArrayRead()
DefaultCoreFactory#<T> spoon.reflect.code.CtArrayWrite createArrayWrite()
DefaultCoreFactory#<T> spoon.reflect.reference.CtArrayTypeReference createArrayTypeReference()
DefaultCoreFactory#<T> spoon.reflect.code.CtAssert createAssert()
DefaultCoreFactory#<T,A extends T> spoon.reflect.code.CtAssignment createAssignment()
DefaultCoreFactory#<T> spoon.reflect.code.CtBinaryOperator createBinaryOperator()
DefaultCoreFactory#<R> spoon.reflect.code.CtBlock createBlock()
DefaultCoreFactory#spoon.reflect.code.CtBreak createBreak()
DefaultCoreFactory#<S> spoon.reflect.code.CtCase createCase()
DefaultCoreFactory#spoon.reflect.code.CtCatch createCatch()
DefaultCoreFactory#<T> spoon.reflect.declaration.CtClass createClass()
DefaultCoreFactory#spoon.reflect.declaration.CtTypeParameter createTypeParameter()
DefaultCoreFactory#<T> spoon.reflect.code.CtConditional createConditional()
DefaultCoreFactory#<T> spoon.reflect.declaration.CtConstructor createConstructor()
DefaultCoreFactory#spoon.reflect.code.CtContinue createContinue()
DefaultCoreFactory#spoon.reflect.code.CtDo createDo()
DefaultCoreFactory#<T extends java.lang.Enum> spoon.reflect.declaration.CtEnum createEnum()
DefaultCoreFactory#<T> spoon.reflect.reference.CtExecutableReference createExecutableReference()
DefaultCoreFactory#<T> spoon.reflect.declaration.CtField createField()
DefaultCoreFactory#<T> spoon.reflect.declaration.CtEnumValue createEnumValue()
DefaultCoreFactory#<T> spoon.reflect.code.CtFieldRead createFieldRead()
DefaultCoreFactory#<T> spoon.reflect.code.CtFieldWrite createFieldWrite()
DefaultCoreFactory#<T> spoon.reflect.code.CtAnnotationFieldAccess createAnnotationFieldAccess()
DefaultCoreFactory#<T> spoon.reflect.reference.CtUnboundVariableReference createUnboundVariableReference()
DefaultCoreFactory#<T> spoon.reflect.reference.CtFieldReference createFieldReference()
DefaultCoreFactory#spoon.reflect.code.CtFor createFor()
DefaultCoreFactory#spoon.reflect.code.CtForEach createForEach()
DefaultCoreFactory#spoon.reflect.code.CtIf createIf()
DefaultCoreFactory#<T> spoon.reflect.declaration.CtInterface createInterface()
DefaultCoreFactory#<T> spoon.reflect.code.CtInvocation createInvocation()
DefaultCoreFactory#<T> spoon.reflect.code.CtLiteral createLiteral()
DefaultCoreFactory#<T> spoon.reflect.code.CtLocalVariable createLocalVariable()
DefaultCoreFactory#<T> spoon.reflect.reference.CtLocalVariableReference createLocalVariableReference()
DefaultCoreFactory#<T> spoon.reflect.code.CtCatchVariable createCatchVariable()
DefaultCoreFactory#<T> spoon.reflect.reference.CtCatchVariableReference createCatchVariableReference()
DefaultCoreFactory#<T> spoon.reflect.declaration.CtMethod createMethod()
DefaultCoreFactory#<T> spoon.reflect.declaration.CtAnnotationMethod createAnnotationMethod()
DefaultCoreFactory#<T> spoon.reflect.code.CtNewArray createNewArray()
DefaultCoreFactory#<T> spoon.reflect.code.CtConstructorCall createConstructorCall()
DefaultCoreFactory#<T> spoon.reflect.code.CtNewClass createNewClass()
DefaultCoreFactory#<T> spoon.reflect.code.CtLambda createLambda()
DefaultCoreFactory#<T,E extends spoon.reflect.code.CtExpression> spoon.reflect.code.CtExecutableReferenceExpression createExecutableReferenceExpression()
DefaultCoreFactory#<T,A extends T> spoon.reflect.code.CtOperatorAssignment createOperatorAssignment()
DefaultCoreFactory#spoon.reflect.declaration.CtPackage createPackage()
DefaultCoreFactory#spoon.reflect.reference.CtPackageReference createPackageReference()
DefaultCoreFactory#<T> spoon.reflect.declaration.CtParameter createParameter()
DefaultCoreFactory#<T> spoon.reflect.reference.CtParameterReference createParameterReference()
DefaultCoreFactory#<R> spoon.reflect.code.CtReturn createReturn()
DefaultCoreFactory#<R> spoon.reflect.code.CtStatementList createStatementList()
DefaultCoreFactory#<S> spoon.reflect.code.CtSwitch createSwitch()
DefaultCoreFactory#spoon.reflect.code.CtSynchronized createSynchronized()
DefaultCoreFactory#spoon.reflect.code.CtThrow createThrow()
DefaultCoreFactory#spoon.reflect.code.CtTry createTry()
DefaultCoreFactory#spoon.reflect.code.CtTryWithResource createTryWithResource()
DefaultCoreFactory#spoon.reflect.reference.CtTypeParameterReference createTypeParameterReference()
DefaultCoreFactory#spoon.reflect.reference.CtWildcardReference createWildcardReference()
DefaultCoreFactory#<T> spoon.reflect.reference.CtIntersectionTypeReference createIntersectionTypeReference()
DefaultCoreFactory#<T> spoon.reflect.reference.CtTypeReference createTypeReference()
DefaultCoreFactory#<T> spoon.reflect.code.CtTypeAccess createTypeAccess()
DefaultCoreFactory#<T> spoon.reflect.code.CtUnaryOperator createUnaryOperator()
DefaultCoreFactory#<T> spoon.reflect.code.CtVariableRead createVariableRead()
DefaultCoreFactory#<T> spoon.reflect.code.CtVariableWrite createVariableWrite()
DefaultCoreFactory#<T> spoon.reflect.code.CtCodeSnippetExpression createCodeSnippetExpression()
DefaultCoreFactory#spoon.reflect.code.CtCodeSnippetStatement createCodeSnippetStatement()
DefaultCoreFactory#spoon.reflect.code.CtComment createComment()
DefaultCoreFactory#spoon.reflect.code.CtJavaDoc createJavaDoc()
DefaultCoreFactory#spoon.reflect.code.CtJavaDocTag createJavaDocTag()
DefaultCoreFactory#spoon.reflect.code.CtWhile createWhile()
DefaultCoreFactory#spoon.reflect.factory.Factory getMainFactory()
DefaultCoreFactory#void setMainFactory(spoon.reflect.factory.Factory)
DefaultCoreFactory#spoon.reflect.cu.SourcePosition createSourcePosition(spoon.reflect.cu.CompilationUnit,int,int,int[])
DefaultCoreFactory#spoon.reflect.cu.position.DeclarationSourcePosition createDeclarationSourcePosition(spoon.reflect.cu.CompilationUnit,int,int,int,int,int,int,int[])
DefaultCoreFactory#spoon.reflect.cu.position.BodyHolderSourcePosition createBodyHolderSourcePosition(spoon.reflect.cu.CompilationUnit,int,int,int,int,int,int,int,int,int[])
DefaultCoreFactory#spoon.reflect.cu.CompilationUnit createCompilationUnit()
DefaultCoreFactory#<T> spoon.reflect.code.CtThisAccess createThisAccess()
DefaultCoreFactory#<T> spoon.reflect.code.CtSuperAccess createSuperAccess()
DefaultCoreFactory#spoon.reflect.declaration.CtElement create(java.lang.Class)
JavaOutputProcessor#spoon.reflect.visitor.PrettyPrinter getPrinter()
JavaOutputProcessor#java.util.List getCreatedFiles()
JavaOutputProcessor#java.io.File getOutputDirectory()
JavaOutputProcessor#void init()
JavaOutputProcessor#void createJavaFile(spoon.reflect.declaration.CtType)
JavaOutputProcessor#boolean isToBeProcessed(spoon.reflect.declaration.CtNamedElement)
JavaOutputProcessor#void process(spoon.reflect.declaration.CtNamedElement)
JavaOutputProcessor#void setOutputDirectory(java.io.File)
JavaOutputProcessor#java.util.Map getLineNumberMappings()
JavaOutputProcessor#spoon.processing.TraversalStrategy getTraversalStrategy()
QueueProcessingManager#void addProcessor(java.lang.Class)
QueueProcessingManager#boolean addProcessor(spoon.processing.Processor)
QueueProcessingManager#void addProcessor(java.lang.String)
QueueProcessingManager#spoon.processing.Processor getCurrentProcessor()
QueueProcessingManager#spoon.reflect.factory.Factory getFactory()
QueueProcessingManager#java.util.Queue getProcessors()
QueueProcessingManager#void process(java.util.Collection)
QueueProcessingManager#void process(spoon.reflect.declaration.CtElement)
QueueProcessingManager#void setFactory(spoon.reflect.factory.Factory)
RuntimeProcessingManager#void addProcessor(java.lang.Class)
RuntimeProcessingManager#boolean addProcessor(spoon.processing.Processor)
RuntimeProcessingManager#void addProcessor(java.lang.String)
RuntimeProcessingManager#spoon.processing.Processor getCurrentProcessor()
RuntimeProcessingManager#spoon.reflect.factory.Factory getFactory()
RuntimeProcessingManager#java.util.List getProcessors()
RuntimeProcessingManager#void process(java.util.Collection)
RuntimeProcessingManager#void process(java.util.Collection,spoon.processing.Processor)
RuntimeProcessingManager#void process(spoon.reflect.declaration.CtElement)
RuntimeProcessingManager#void process(spoon.reflect.declaration.CtElement,spoon.processing.Processor)
RuntimeProcessingManager#void setFactory(spoon.reflect.factory.Factory)
SerializationModelStreamer#void save(spoon.reflect.factory.Factory,java.io.OutputStream)
SerializationModelStreamer#spoon.reflect.factory.Factory load(java.io.InputStream)
StandardEnvironment#void debugMessage(java.lang.String)
StandardEnvironment#boolean isAutoImports()
StandardEnvironment#void setAutoImports(boolean)
StandardEnvironment#spoon.processing.FileGenerator getDefaultFileGenerator()
StandardEnvironment#spoon.reflect.factory.Factory getFactory()
StandardEnvironment#org.apache.log4j.Level getLevel()
StandardEnvironment#void setLevel(java.lang.String)
StandardEnvironment#boolean shouldCompile()
StandardEnvironment#void setShouldCompile(boolean)
StandardEnvironment#boolean checksAreSkipped()
StandardEnvironment#void setSelfChecks(boolean)
StandardEnvironment#spoon.processing.ProcessingManager getManager()
StandardEnvironment#spoon.processing.ProcessorProperties getProcessorProperties(java.lang.String)
StandardEnvironment#boolean isProcessingStopped()
StandardEnvironment#void report(spoon.processing.Processor,org.apache.log4j.Level,spoon.reflect.declaration.CtElement,java.lang.String)
StandardEnvironment#void report(spoon.processing.Processor,org.apache.log4j.Level,spoon.reflect.declaration.CtElement,java.lang.String,spoon.processing.ProblemFixer[])
StandardEnvironment#void report(spoon.processing.Processor,org.apache.log4j.Level,java.lang.String)
StandardEnvironment#void reportEnd()
StandardEnvironment#void reportProgressMessage(java.lang.String)
StandardEnvironment#void setDebug(boolean)
StandardEnvironment#void setDefaultFileGenerator(spoon.processing.FileGenerator)
StandardEnvironment#void setManager(spoon.processing.ProcessingManager)
StandardEnvironment#void setProcessingStopped(boolean)
StandardEnvironment#void setVerbose(boolean)
StandardEnvironment#int getComplianceLevel()
StandardEnvironment#void setComplianceLevel(int)
StandardEnvironment#void setProcessorProperties(java.lang.String,spoon.processing.ProcessorProperties)
StandardEnvironment#boolean isUsingTabulations()
StandardEnvironment#void useTabulations(boolean)
StandardEnvironment#int getTabulationSize()
StandardEnvironment#void setTabulationSize(int)
StandardEnvironment#void setInputClassLoader(java.lang.ClassLoader)
StandardEnvironment#java.lang.ClassLoader getInputClassLoader()
StandardEnvironment#java.net.URL[] urlClasspath()
StandardEnvironment#java.lang.String[] getSourceClasspath()
StandardEnvironment#void setSourceClasspath(java.lang.String[])
StandardEnvironment#int getErrorCount()
StandardEnvironment#int getWarningCount()
StandardEnvironment#boolean isPreserveLineNumbers()
StandardEnvironment#void setPreserveLineNumbers(boolean)
StandardEnvironment#void setNoClasspath(boolean)
StandardEnvironment#boolean getNoClasspath()
StandardEnvironment#boolean isCopyResources()
StandardEnvironment#void setCopyResources(boolean)
StandardEnvironment#boolean isCommentsEnabled()
StandardEnvironment#void setCommentEnabled(boolean)
StandardEnvironment#void setBinaryOutputDirectory(java.lang.String)
StandardEnvironment#java.lang.String getBinaryOutputDirectory()
StandardEnvironment#spoon.experimental.modelobs.FineModelChangeListener getModelChangeListener()
StandardEnvironment#void setModelChangeListener(spoon.experimental.modelobs.FineModelChangeListener)
StandardEnvironment#java.nio.charset.Charset getEncoding()
StandardEnvironment#void setEncoding(java.nio.charset.Charset)
AbstractTemplate#boolean isWellFormed()
AbstractTemplate#boolean isValid()
AbstractTemplate#spoon.reflect.factory.Factory getFactory()
AbstractTemplate#boolean isAddGeneratedBy()
AbstractTemplate#spoon.template.AbstractTemplate addGeneratedBy(boolean)
BlockTemplate#spoon.reflect.code.CtBlock getBlock(spoon.reflect.declaration.CtClass)
BlockTemplate#spoon.reflect.code.CtBlock apply(spoon.reflect.declaration.CtType)
BlockTemplate#java.lang.Void S()
BlockTemplate#void block()
ExpressionTemplate#<T> spoon.reflect.code.CtExpression getExpression(spoon.reflect.declaration.CtClass)
ExpressionTemplate#T expression()
ExpressionTemplate#spoon.reflect.code.CtExpression apply(spoon.reflect.declaration.CtType)
ExpressionTemplate#T S()
ExtensionTemplate#spoon.reflect.declaration.CtType apply(spoon.reflect.declaration.CtType)
StatementTemplate#spoon.reflect.code.CtStatement apply(spoon.reflect.declaration.CtType)
StatementTemplate#java.lang.Void S()
StatementTemplate#void statement()
Substitution#<T extends spoon.template.Template> void insertAll(spoon.reflect.declaration.CtType,T extends spoon.template.Template)
Substitution#<T extends spoon.reflect.declaration.CtType> T createTypeFromTemplate(java.lang.String,spoon.reflect.declaration.CtType,java.util.Map)
Substitution#void insertAllSuperInterfaces(spoon.reflect.declaration.CtType,spoon.template.Template)
Substitution#void insertAllMethods(spoon.reflect.declaration.CtType,spoon.template.Template)
Substitution#void insertAllFields(spoon.reflect.declaration.CtType,spoon.template.Template)
Substitution#void insertAllNestedTypes(spoon.reflect.declaration.CtType,spoon.template.Template)
Substitution#void insertAllConstructors(spoon.reflect.declaration.CtType,spoon.template.Template)
Substitution#<T> spoon.reflect.declaration.CtConstructor insertConstructor(spoon.reflect.declaration.CtClass,spoon.template.Template,spoon.reflect.declaration.CtMethod)
Substitution#<T> spoon.reflect.declaration.CtMethod insertMethod(spoon.reflect.declaration.CtType,spoon.template.Template,spoon.reflect.declaration.CtMethod)
Substitution#<T> spoon.reflect.declaration.CtConstructor insertConstructor(spoon.reflect.declaration.CtClass,spoon.template.Template,spoon.reflect.declaration.CtConstructor)
Substitution#spoon.reflect.code.CtBlock substituteMethodBody(spoon.reflect.declaration.CtClass,spoon.template.Template,java.lang.String,spoon.reflect.reference.CtTypeReference[])
Substitution#spoon.reflect.code.CtStatement substituteStatement(spoon.reflect.declaration.CtClass,spoon.template.Template,int,java.lang.String,spoon.reflect.reference.CtTypeReference[])
Substitution#spoon.reflect.code.CtExpression substituteFieldDefaultExpression(spoon.reflect.declaration.CtType,spoon.template.Template,java.lang.String)
Substitution#<E extends spoon.reflect.declaration.CtElement> E substitute(spoon.reflect.declaration.CtType,spoon.template.Template,E extends spoon.reflect.declaration.CtElement)
Substitution#<T extends spoon.reflect.declaration.CtType> T substitute(spoon.template.Template,T extends spoon.reflect.declaration.CtType)
Substitution#<T> spoon.reflect.declaration.CtField insertField(spoon.reflect.declaration.CtType,spoon.template.Template,spoon.reflect.declaration.CtField)
Substitution#void redirectTypeReferences(spoon.reflect.declaration.CtElement,spoon.reflect.reference.CtTypeReference,spoon.reflect.reference.CtTypeReference)
TemplateMatcher#<T extends spoon.reflect.declaration.CtElement> java.util.List find(spoon.reflect.declaration.CtElement)
TemplateMatcher#boolean matches(spoon.reflect.declaration.CtElement)
TypedBlockTemplateParameter#R block()
TypedBlockTemplateParameter#spoon.reflect.code.CtBlock getSubstitution(spoon.reflect.declaration.CtType)
TypedBlockTemplateParameter#R S()
TypedStatementListTemplateParameter#spoon.reflect.code.CtStatementList getSubstitution(spoon.reflect.declaration.CtType)
TypedStatementListTemplateParameter#R S()
TypedStatementListTemplateParameter#R statements()
Check#<T> T assertNotNull(T)
Check#<T extends java.io.File> T assertExists(T extends java.io.File)
Check#<A extends spoon.reflect.declaration.CtElement,E extends spoon.reflect.declaration.CtElement> A assertIsSame(A extends spoon.reflect.declaration.CtElement,E extends spoon.reflect.declaration.CtElement)
ModelUtils#spoon.reflect.factory.Factory createFactory()
ModelUtils#<T extends spoon.reflect.declaration.CtType> T build(java.lang.String,java.lang.String)
ModelUtils#<T extends spoon.reflect.declaration.CtType> T build(java.lang.String,java.lang.String,spoon.reflect.factory.Factory)
ModelUtils#spoon.reflect.factory.Factory build(java.lang.Class[])
ModelUtils#spoon.reflect.factory.Factory buildNoClasspath(java.lang.Class[])
ModelUtils#spoon.reflect.factory.Factory build(java.io.File[])
ModelUtils#<T> spoon.reflect.declaration.CtType buildClass(java.lang.Class)
ModelUtils#void canBeBuilt(java.io.File,int)
ModelUtils#void canBeBuilt(java.lang.String,int)
ModelUtils#void canBeBuilt(java.io.File,int,boolean)
ModelUtils#void canBeBuilt(java.lang.String,int,boolean)
ProcessorUtils#void process(spoon.reflect.factory.Factory,java.util.Collection)
ProcessorUtils#void initProperties(spoon.processing.Processor,spoon.processing.ProcessorProperties)
AbstractAssert#T withProcessor(spoon.processing.Processor)
AbstractAssert#T withProcessor(java.lang.Class)
AbstractAssert#T withProcessor(java.lang.String)
AbstractAssert#int hashCode()
AbstractCtElementAssert#T isEqualTo(spoon.reflect.declaration.CtElement)
AbstractCtElementAssert#T isEqualTo(java.lang.String)
AbstractCtPackageAssert#T isEqualTo(spoon.reflect.declaration.CtPackage)
AbstractFileAssert#T isEqualTo(java.lang.String)
AbstractFileAssert#T isEqualTo(java.io.File)
Assert#spoon.testing.AbstractFileAssert assertThat(java.lang.String)
Assert#spoon.testing.AbstractFileAssert assertThat(java.io.File)
Assert#spoon.testing.AbstractCtElementAssert assertThat(spoon.reflect.declaration.CtElement)
Assert#spoon.testing.AbstractCtPackageAssert assertThat(spoon.reflect.declaration.CtPackage)
Launcher#void main(java.lang.String[])
Launcher#void run(java.lang.String[])
Launcher#void setArgs(java.lang.String[])
Launcher#void printUsage()
Launcher#void addInputResource(java.lang.String)
Launcher#void addInputResource(spoon.compiler.SpoonResource)
Launcher#void addProcessor(java.lang.String)
Launcher#<T extends spoon.reflect.declaration.CtElement> void addProcessor(spoon.processing.Processor)
Launcher#void addTemplateResource(spoon.compiler.SpoonResource)
Launcher#spoon.compiler.Environment getEnvironment()
Launcher#spoon.SpoonModelBuilder createCompiler(spoon.reflect.factory.Factory)
Launcher#spoon.SpoonModelBuilder createCompiler(spoon.reflect.factory.Factory,java.util.List)
Launcher#spoon.SpoonModelBuilder createCompiler(spoon.reflect.factory.Factory,java.util.List,java.util.List)
Launcher#spoon.SpoonModelBuilder createCompiler()
Launcher#spoon.SpoonModelBuilder createCompiler(java.util.List)
Launcher#spoon.reflect.factory.Factory createFactory()
Launcher#spoon.reflect.factory.Factory getFactory()
Launcher#spoon.compiler.Environment createEnvironment()
Launcher#spoon.support.JavaOutputProcessor createOutputWriter(java.io.File,spoon.compiler.Environment)
Launcher#spoon.reflect.visitor.PrettyPrinter createPrettyPrinter()
Launcher#void run()
Launcher#spoon.reflect.CtModel buildModel()
Launcher#void process()
Launcher#void prettyprint()
Launcher#spoon.SpoonModelBuilder getModelBuilder()
Launcher#void setSourceOutputDirectory(java.lang.String)
Launcher#void setSourceOutputDirectory(java.io.File)
Launcher#void setOutputFilter(spoon.reflect.visitor.Filter)
Launcher#void setOutputFilter(java.lang.String[])
Launcher#void setBinaryOutputDirectory(java.lang.String)
Launcher#void setBinaryOutputDirectory(java.io.File)
Launcher#spoon.reflect.CtModel getModel()
Launcher#spoon.reflect.declaration.CtClass parseClass(java.lang.String)
Metamodel#java.util.Set getAllMetamodelInterfaces()
OutputType#java.lang.String toString()
OutputType#spoon.OutputType fromString(java.lang.String)
