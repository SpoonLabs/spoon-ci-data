<?xml version="1.0" encoding="UTF-8"?>
<testsuite xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="https://maven.apache.org/surefire/maven-surefire-plugin/xsd/surefire-test-report.xsd" name="spoon.test.intercession.OneCanCallSetterWithNullParameterizedTest" time="0.426" tests="126" errors="0" skipped="0" failures="0">
  <properties>
    <property name="awt.toolkit" value="sun.awt.X11.XToolkit"/>
    <property name="file.encoding.pkg" value="sun.io"/>
    <property name="java.specification.version" value="1.8"/>
    <property name="sun.cpu.isalist" value=""/>
    <property name="sun.jnu.encoding" value="UTF-8"/>
    <property name="java.class.path" value="/home/travis/.m2/repository/org/apache/maven/surefire/surefire-booter/2.21.0/surefire-booter-2.21.0.jar:/home/travis/.m2/repository/org/apache/maven/surefire/surefire-api/2.21.0/surefire-api-2.21.0.jar:/home/travis/.m2/repository/org/apache/maven/surefire/surefire-logger-api/2.21.0/surefire-logger-api-2.21.0.jar:/home/travis/build/SpoonLabs/spoon-ci-external/spoon/target/test-classes:/home/travis/build/SpoonLabs/spoon-ci-external/spoon/target/classes:/home/travis/.m2/repository/org/eclipse/jdt/org.eclipse.jdt.core/3.15.0/org.eclipse.jdt.core-3.15.0.jar:/home/travis/.m2/repository/org/eclipse/platform/org.eclipse.core.resources/3.13.300/org.eclipse.core.resources-3.13.300.jar:/home/travis/.m2/repository/org/eclipse/platform/org.eclipse.core.expressions/3.6.300/org.eclipse.core.expressions-3.6.300.jar:/home/travis/.m2/repository/org/eclipse/platform/org.eclipse.core.runtime/3.15.200/org.eclipse.core.runtime-3.15.200.jar:/home/travis/.m2/repository/org/eclipse/platform/org.eclipse.osgi/3.13.300/org.eclipse.osgi-3.13.300.jar:/home/travis/.m2/repository/org/eclipse/platform/org.eclipse.equinox.common/3.10.300/org.eclipse.equinox.common-3.10.300.jar:/home/travis/.m2/repository/org/eclipse/platform/org.eclipse.core.jobs/3.10.300/org.eclipse.core.jobs-3.10.300.jar:/home/travis/.m2/repository/org/eclipse/platform/org.eclipse.equinox.registry/3.8.300/org.eclipse.equinox.registry-3.8.300.jar:/home/travis/.m2/repository/org/eclipse/platform/org.eclipse.equinox.preferences/3.7.300/org.eclipse.equinox.preferences-3.7.300.jar:/home/travis/.m2/repository/org/eclipse/platform/org.eclipse.core.contenttype/3.7.300/org.eclipse.core.contenttype-3.7.300.jar:/home/travis/.m2/repository/org/eclipse/platform/org.eclipse.equinox.app/1.4.100/org.eclipse.equinox.app-1.4.100.jar:/home/travis/.m2/repository/org/eclipse/platform/org.eclipse.core.filesystem/1.7.300/org.eclipse.core.filesystem-1.7.300.jar:/home/travis/.m2/repository/org/eclipse/platform/org.eclipse.text/3.8.100/org.eclipse.text-3.8.100.jar:/home/travis/.m2/repository/org/eclipse/platform/org.eclipse.core.commands/3.9.300/org.eclipse.core.commands-3.9.300.jar:/home/travis/.m2/repository/com/github/stefanbirkner/system-rules/1.9.0/system-rules-1.9.0.jar:/home/travis/.m2/repository/junit/junit/4.11-beta-1/junit-4.11-beta-1.jar:/home/travis/.m2/repository/org/hamcrest/hamcrest-core/1.3/hamcrest-core-1.3.jar:/home/travis/.m2/repository/org/mockito/mockito-core/2.23.4/mockito-core-2.23.4.jar:/home/travis/.m2/repository/net/bytebuddy/byte-buddy/1.9.3/byte-buddy-1.9.3.jar:/home/travis/.m2/repository/net/bytebuddy/byte-buddy-agent/1.9.3/byte-buddy-agent-1.9.3.jar:/home/travis/.m2/repository/org/objenesis/objenesis/2.6/objenesis-2.6.jar:/home/travis/.m2/repository/com/martiansoftware/jsap/2.1/jsap-2.1.jar:/home/travis/.m2/repository/log4j/log4j/1.2.17/log4j-1.2.17.jar:/home/travis/.m2/repository/commons-io/commons-io/2.6/commons-io-2.6.jar:/home/travis/.m2/repository/org/apache/maven/maven-model/3.5.0/maven-model-3.5.0.jar:/home/travis/.m2/repository/org/codehaus/plexus/plexus-utils/3.0.24/plexus-utils-3.0.24.jar:/home/travis/.m2/repository/org/apache/commons/commons-lang3/3.8.1/commons-lang3-3.8.1.jar:/home/travis/.m2/repository/org/tukaani/xz/1.8/xz-1.8.jar:/home/travis/.m2/repository/com/fasterxml/jackson/core/jackson-databind/2.9.9/jackson-databind-2.9.9.jar:/home/travis/.m2/repository/com/fasterxml/jackson/core/jackson-annotations/2.9.0/jackson-annotations-2.9.0.jar:/home/travis/.m2/repository/com/fasterxml/jackson/core/jackson-core/2.9.9/jackson-core-2.9.9.jar:/home/travis/.m2/repository/org/apache/commons/commons-compress/1.18/commons-compress-1.18.jar:/home/travis/.m2/repository/com/google/guava/guava/18.0/guava-18.0.jar:/home/travis/.m2/repository/com/mysema/querydsl/querydsl-core/3.6.9/querydsl-core-3.6.9.jar:/home/travis/.m2/repository/com/infradna/tool/bridge-method-annotation/1.13/bridge-method-annotation-1.13.jar:/home/travis/.m2/repository/org/apache/maven/shared/maven-invoker/3.0.1/maven-invoker-3.0.1.jar:/home/travis/.m2/repository/org/apache/maven/shared/maven-shared-utils/3.2.1/maven-shared-utils-3.2.1.jar:/home/travis/.m2/repository/org/codehaus/plexus/plexus-component-annotations/1.7.1/plexus-component-annotations-1.7.1.jar:/home/travis/.m2/repository/org/junit/vintage/junit-vintage-engine/5.4.2/junit-vintage-engine-5.4.2.jar:/home/travis/.m2/repository/org/apiguardian/apiguardian-api/1.0.0/apiguardian-api-1.0.0.jar:/home/travis/.m2/repository/org/junit/platform/junit-platform-engine/1.4.2/junit-platform-engine-1.4.2.jar:/home/travis/.m2/repository/org/opentest4j/opentest4j/1.1.1/opentest4j-1.1.1.jar:/home/travis/.m2/repository/org/junit/platform/junit-platform-commons/1.4.2/junit-platform-commons-1.4.2.jar:/home/travis/.m2/repository/org/junit/jupiter/junit-jupiter-engine/5.4.2/junit-jupiter-engine-5.4.2.jar:/home/travis/.m2/repository/org/junit/jupiter/junit-jupiter-api/5.4.2/junit-jupiter-api-5.4.2.jar:/home/travis/.m2/repository/org/apache/maven/surefire/surefire-junit4/2.21.0/surefire-junit4-2.21.0.jar"/>
    <property name="java.vm.vendor" value="Oracle Corporation"/>
    <property name="sun.arch.data.model" value="64"/>
    <property name="java.vendor.url" value="http://java.oracle.com/"/>
    <property name="user.timezone" value=""/>
    <property name="java.vm.specification.version" value="1.8"/>
    <property name="os.name" value="Linux"/>
    <property name="user.country" value="US"/>
    <property name="sun.java.launcher" value="SUN_STANDARD"/>
    <property name="sun.boot.library.path" value="/usr/lib/jvm/java-8-oracle/jre/lib/amd64"/>
    <property name="sun.java.command" value="org.apache.maven.surefire.booter.ForkedBooter /home/travis/build/SpoonLabs/spoon-ci-external/spoon/target/surefire 2019-05-28T14-07-44_550-jvmRun1 surefire6210227685407718523tmp surefire_05821309720087547119tmp"/>
    <property name="surefire.test.class.path" value="/home/travis/build/SpoonLabs/spoon-ci-external/spoon/target/test-classes:/home/travis/build/SpoonLabs/spoon-ci-external/spoon/target/classes:/home/travis/.m2/repository/org/eclipse/jdt/org.eclipse.jdt.core/3.15.0/org.eclipse.jdt.core-3.15.0.jar:/home/travis/.m2/repository/org/eclipse/platform/org.eclipse.core.resources/3.13.300/org.eclipse.core.resources-3.13.300.jar:/home/travis/.m2/repository/org/eclipse/platform/org.eclipse.core.expressions/3.6.300/org.eclipse.core.expressions-3.6.300.jar:/home/travis/.m2/repository/org/eclipse/platform/org.eclipse.core.runtime/3.15.200/org.eclipse.core.runtime-3.15.200.jar:/home/travis/.m2/repository/org/eclipse/platform/org.eclipse.osgi/3.13.300/org.eclipse.osgi-3.13.300.jar:/home/travis/.m2/repository/org/eclipse/platform/org.eclipse.equinox.common/3.10.300/org.eclipse.equinox.common-3.10.300.jar:/home/travis/.m2/repository/org/eclipse/platform/org.eclipse.core.jobs/3.10.300/org.eclipse.core.jobs-3.10.300.jar:/home/travis/.m2/repository/org/eclipse/platform/org.eclipse.equinox.registry/3.8.300/org.eclipse.equinox.registry-3.8.300.jar:/home/travis/.m2/repository/org/eclipse/platform/org.eclipse.equinox.preferences/3.7.300/org.eclipse.equinox.preferences-3.7.300.jar:/home/travis/.m2/repository/org/eclipse/platform/org.eclipse.core.contenttype/3.7.300/org.eclipse.core.contenttype-3.7.300.jar:/home/travis/.m2/repository/org/eclipse/platform/org.eclipse.equinox.app/1.4.100/org.eclipse.equinox.app-1.4.100.jar:/home/travis/.m2/repository/org/eclipse/platform/org.eclipse.core.filesystem/1.7.300/org.eclipse.core.filesystem-1.7.300.jar:/home/travis/.m2/repository/org/eclipse/platform/org.eclipse.text/3.8.100/org.eclipse.text-3.8.100.jar:/home/travis/.m2/repository/org/eclipse/platform/org.eclipse.core.commands/3.9.300/org.eclipse.core.commands-3.9.300.jar:/home/travis/.m2/repository/com/github/stefanbirkner/system-rules/1.9.0/system-rules-1.9.0.jar:/home/travis/.m2/repository/junit/junit/4.11-beta-1/junit-4.11-beta-1.jar:/home/travis/.m2/repository/org/hamcrest/hamcrest-core/1.3/hamcrest-core-1.3.jar:/home/travis/.m2/repository/org/mockito/mockito-core/2.23.4/mockito-core-2.23.4.jar:/home/travis/.m2/repository/net/bytebuddy/byte-buddy/1.9.3/byte-buddy-1.9.3.jar:/home/travis/.m2/repository/net/bytebuddy/byte-buddy-agent/1.9.3/byte-buddy-agent-1.9.3.jar:/home/travis/.m2/repository/org/objenesis/objenesis/2.6/objenesis-2.6.jar:/home/travis/.m2/repository/com/martiansoftware/jsap/2.1/jsap-2.1.jar:/home/travis/.m2/repository/log4j/log4j/1.2.17/log4j-1.2.17.jar:/home/travis/.m2/repository/commons-io/commons-io/2.6/commons-io-2.6.jar:/home/travis/.m2/repository/org/apache/maven/maven-model/3.5.0/maven-model-3.5.0.jar:/home/travis/.m2/repository/org/codehaus/plexus/plexus-utils/3.0.24/plexus-utils-3.0.24.jar:/home/travis/.m2/repository/org/apache/commons/commons-lang3/3.8.1/commons-lang3-3.8.1.jar:/home/travis/.m2/repository/org/tukaani/xz/1.8/xz-1.8.jar:/home/travis/.m2/repository/com/fasterxml/jackson/core/jackson-databind/2.9.9/jackson-databind-2.9.9.jar:/home/travis/.m2/repository/com/fasterxml/jackson/core/jackson-annotations/2.9.0/jackson-annotations-2.9.0.jar:/home/travis/.m2/repository/com/fasterxml/jackson/core/jackson-core/2.9.9/jackson-core-2.9.9.jar:/home/travis/.m2/repository/org/apache/commons/commons-compress/1.18/commons-compress-1.18.jar:/home/travis/.m2/repository/com/google/guava/guava/18.0/guava-18.0.jar:/home/travis/.m2/repository/com/mysema/querydsl/querydsl-core/3.6.9/querydsl-core-3.6.9.jar:/home/travis/.m2/repository/com/infradna/tool/bridge-method-annotation/1.13/bridge-method-annotation-1.13.jar:/home/travis/.m2/repository/org/apache/maven/shared/maven-invoker/3.0.1/maven-invoker-3.0.1.jar:/home/travis/.m2/repository/org/apache/maven/shared/maven-shared-utils/3.2.1/maven-shared-utils-3.2.1.jar:/home/travis/.m2/repository/org/codehaus/plexus/plexus-component-annotations/1.7.1/plexus-component-annotations-1.7.1.jar:/home/travis/.m2/repository/org/junit/vintage/junit-vintage-engine/5.4.2/junit-vintage-engine-5.4.2.jar:/home/travis/.m2/repository/org/apiguardian/apiguardian-api/1.0.0/apiguardian-api-1.0.0.jar:/home/travis/.m2/repository/org/junit/platform/junit-platform-engine/1.4.2/junit-platform-engine-1.4.2.jar:/home/travis/.m2/repository/org/opentest4j/opentest4j/1.1.1/opentest4j-1.1.1.jar:/home/travis/.m2/repository/org/junit/platform/junit-platform-commons/1.4.2/junit-platform-commons-1.4.2.jar:/home/travis/.m2/repository/org/junit/jupiter/junit-jupiter-engine/5.4.2/junit-jupiter-engine-5.4.2.jar:/home/travis/.m2/repository/org/junit/jupiter/junit-jupiter-api/5.4.2/junit-jupiter-api-5.4.2.jar:"/>
    <property name="sun.cpu.endian" value="little"/>
    <property name="user.home" value="/home/travis"/>
    <property name="user.language" value="en"/>
    <property name="java.specification.vendor" value="Oracle Corporation"/>
    <property name="java.home" value="/usr/lib/jvm/java-8-oracle/jre"/>
    <property name="basedir" value="/home/travis/build/SpoonLabs/spoon-ci-external/spoon"/>
    <property name="file.separator" value="/"/>
    <property name="line.separator" value="&#10;"/>
    <property name="java.vm.specification.vendor" value="Oracle Corporation"/>
    <property name="java.specification.name" value="Java Platform API Specification"/>
    <property name="java.awt.graphicsenv" value="sun.awt.X11GraphicsEnvironment"/>
    <property name="sun.boot.class.path" value="/usr/lib/jvm/java-8-oracle/jre/lib/resources.jar:/usr/lib/jvm/java-8-oracle/jre/lib/rt.jar:/usr/lib/jvm/java-8-oracle/jre/lib/sunrsasign.jar:/usr/lib/jvm/java-8-oracle/jre/lib/jsse.jar:/usr/lib/jvm/java-8-oracle/jre/lib/jce.jar:/usr/lib/jvm/java-8-oracle/jre/lib/charsets.jar:/usr/lib/jvm/java-8-oracle/jre/lib/jfr.jar:/usr/lib/jvm/java-8-oracle/jre/classes"/>
    <property name="sun.management.compiler" value="HotSpot 64-Bit Tiered Compilers"/>
    <property name="java.runtime.version" value="1.8.0_151-b12"/>
    <property name="user.name" value="travis"/>
    <property name="path.separator" value=":"/>
    <property name="os.version" value="4.4.0-101-generic"/>
    <property name="java.endorsed.dirs" value="/usr/lib/jvm/java-8-oracle/jre/lib/endorsed"/>
    <property name="java.runtime.name" value="Java(TM) SE Runtime Environment"/>
    <property name="file.encoding" value="UTF-8"/>
    <property name="java.vm.name" value="Java HotSpot(TM) 64-Bit Server VM"/>
    <property name="localRepository" value="/home/travis/.m2/repository"/>
    <property name="java.vendor.url.bug" value="http://bugreport.sun.com/bugreport/"/>
    <property name="java.io.tmpdir" value="/tmp"/>
    <property name="java.version" value="1.8.0_151"/>
    <property name="user.dir" value="/home/travis/build/SpoonLabs/spoon-ci-external/spoon"/>
    <property name="os.arch" value="amd64"/>
    <property name="java.vm.specification.name" value="Java Virtual Machine Specification"/>
    <property name="java.awt.printerjob" value="sun.print.PSPrinterJob"/>
    <property name="sun.os.patch.level" value="unknown"/>
    <property name="java.library.path" value="/usr/java/packages/lib/amd64:/usr/lib64:/lib64:/lib:/usr/lib"/>
    <property name="java.vm.info" value="mixed mode"/>
    <property name="java.vendor" value="Oracle Corporation"/>
    <property name="java.vm.version" value="25.151-b12"/>
    <property name="java.ext.dirs" value="/usr/lib/jvm/java-8-oracle/jre/lib/ext:/usr/java/packages/lib/ext"/>
    <property name="sun.io.unicode.encoding" value="UnicodeLittle"/>
    <property name="java.class.version" value="52.0"/>
  </properties>
  <testcase name="testContract[public abstract spoon.reflect.code.CtAbstractInvocation spoon.reflect.code.CtAbstractInvocation.addArgument(spoon.reflect.code.CtExpression)]" classname="spoon.test.intercession.OneCanCallSetterWithNullParameterizedTest" time="0"/>
  <testcase name="testContract[public abstract spoon.reflect.code.CtAbstractInvocation spoon.reflect.code.CtAbstractInvocation.setExecutable(spoon.reflect.reference.CtExecutableReference)]" classname="spoon.test.intercession.OneCanCallSetterWithNullParameterizedTest" time="0"/>
  <testcase name="testContract[public abstract spoon.reflect.code.CtArrayAccess spoon.reflect.code.CtArrayAccess.setIndexExpression(spoon.reflect.code.CtExpression)]" classname="spoon.test.intercession.OneCanCallSetterWithNullParameterizedTest" time="0"/>
  <testcase name="testContract[public abstract spoon.reflect.code.CtAssert spoon.reflect.code.CtAssert.setAssertExpression(spoon.reflect.code.CtExpression)]" classname="spoon.test.intercession.OneCanCallSetterWithNullParameterizedTest" time="0"/>
  <testcase name="testContract[public abstract spoon.reflect.code.CtAssert spoon.reflect.code.CtAssert.setExpression(spoon.reflect.code.CtExpression)]" classname="spoon.test.intercession.OneCanCallSetterWithNullParameterizedTest" time="0"/>
  <testcase name="testContract[public abstract spoon.reflect.code.CtAssignment spoon.reflect.code.CtAssignment.setAssigned(spoon.reflect.code.CtExpression)]" classname="spoon.test.intercession.OneCanCallSetterWithNullParameterizedTest" time="0"/>
  <testcase name="testContract[public abstract spoon.reflect.code.CtBinaryOperator spoon.reflect.code.CtBinaryOperator.setLeftHandOperand(spoon.reflect.code.CtExpression)]" classname="spoon.test.intercession.OneCanCallSetterWithNullParameterizedTest" time="0"/>
  <testcase name="testContract[public abstract spoon.reflect.code.CtBinaryOperator spoon.reflect.code.CtBinaryOperator.setRightHandOperand(spoon.reflect.code.CtExpression)]" classname="spoon.test.intercession.OneCanCallSetterWithNullParameterizedTest" time="0"/>
  <testcase name="testContract[public abstract spoon.reflect.code.CtBodyHolder spoon.reflect.code.CtBodyHolder.setBody(spoon.reflect.code.CtStatement)]" classname="spoon.test.intercession.OneCanCallSetterWithNullParameterizedTest" time="0"/>
  <testcase name="testContract[public abstract spoon.reflect.code.CtCase spoon.reflect.code.CtCase.setCaseExpression(spoon.reflect.code.CtExpression)]" classname="spoon.test.intercession.OneCanCallSetterWithNullParameterizedTest" time="0"/>
  <testcase name="testContract[public abstract spoon.reflect.code.CtCatch spoon.reflect.code.CtCatch.setParameter(spoon.reflect.code.CtCatchVariable)]" classname="spoon.test.intercession.OneCanCallSetterWithNullParameterizedTest" time="0.001"/>
  <testcase name="testContract[public abstract spoon.reflect.declaration.CtVariable spoon.reflect.code.CtCatchVariable.setDefaultExpression(spoon.reflect.code.CtExpression)]" classname="spoon.test.intercession.OneCanCallSetterWithNullParameterizedTest" time="0"/>
  <testcase name="testContract[public abstract spoon.reflect.declaration.CtTypedElement spoon.reflect.code.CtCatchVariable.setType(spoon.reflect.reference.CtTypeReference)]" classname="spoon.test.intercession.OneCanCallSetterWithNullParameterizedTest" time="0"/>
  <testcase name="testContract[public abstract spoon.reflect.code.CtConditional spoon.reflect.code.CtConditional.setElseExpression(spoon.reflect.code.CtExpression)]" classname="spoon.test.intercession.OneCanCallSetterWithNullParameterizedTest" time="0"/>
  <testcase name="testContract[public abstract spoon.reflect.code.CtConditional spoon.reflect.code.CtConditional.setThenExpression(spoon.reflect.code.CtExpression)]" classname="spoon.test.intercession.OneCanCallSetterWithNullParameterizedTest" time="0"/>
  <testcase name="testContract[public abstract spoon.reflect.code.CtConditional spoon.reflect.code.CtConditional.setCondition(spoon.reflect.code.CtExpression)]" classname="spoon.test.intercession.OneCanCallSetterWithNullParameterizedTest" time="0"/>
  <testcase name="testContract[public abstract spoon.reflect.reference.CtActualTypeContainer spoon.reflect.code.CtConstructorCall.addActualTypeArgument(spoon.reflect.reference.CtTypeReference)]" classname="spoon.test.intercession.OneCanCallSetterWithNullParameterizedTest" time="0"/>
  <testcase name="testContract[public abstract spoon.reflect.code.CtDo spoon.reflect.code.CtDo.setLoopingExpression(spoon.reflect.code.CtExpression)]" classname="spoon.test.intercession.OneCanCallSetterWithNullParameterizedTest" time="0"/>
  <testcase name="testContract[public abstract spoon.reflect.code.CtExecutableReferenceExpression spoon.reflect.code.CtExecutableReferenceExpression.setExecutable(spoon.reflect.reference.CtExecutableReference)]" classname="spoon.test.intercession.OneCanCallSetterWithNullParameterizedTest" time="0"/>
  <testcase name="testContract[public abstract spoon.reflect.code.CtExpression spoon.reflect.code.CtExpression.addTypeCast(spoon.reflect.reference.CtTypeReference)]" classname="spoon.test.intercession.OneCanCallSetterWithNullParameterizedTest" time="0"/>
  <testcase name="testContract[public abstract spoon.reflect.code.CtFor spoon.reflect.code.CtFor.setExpression(spoon.reflect.code.CtExpression)]" classname="spoon.test.intercession.OneCanCallSetterWithNullParameterizedTest" time="0"/>
  <testcase name="testContract[public abstract spoon.reflect.code.CtFor spoon.reflect.code.CtFor.addForInit(spoon.reflect.code.CtStatement)]" classname="spoon.test.intercession.OneCanCallSetterWithNullParameterizedTest" time="0"/>
  <testcase name="testContract[public abstract spoon.reflect.code.CtFor spoon.reflect.code.CtFor.addForUpdate(spoon.reflect.code.CtStatement)]" classname="spoon.test.intercession.OneCanCallSetterWithNullParameterizedTest" time="0"/>
  <testcase name="testContract[public abstract spoon.reflect.code.CtForEach spoon.reflect.code.CtForEach.setExpression(spoon.reflect.code.CtExpression)]" classname="spoon.test.intercession.OneCanCallSetterWithNullParameterizedTest" time="0"/>
  <testcase name="testContract[public abstract spoon.reflect.code.CtForEach spoon.reflect.code.CtForEach.setVariable(spoon.reflect.code.CtLocalVariable)]" classname="spoon.test.intercession.OneCanCallSetterWithNullParameterizedTest" time="0"/>
  <testcase name="testContract[public abstract spoon.reflect.code.CtIf spoon.reflect.code.CtIf.setCondition(spoon.reflect.code.CtExpression)]" classname="spoon.test.intercession.OneCanCallSetterWithNullParameterizedTest" time="0.001"/>
  <testcase name="testContract[public abstract spoon.reflect.code.CtIf spoon.reflect.code.CtIf.setElseStatement(spoon.reflect.code.CtStatement)]" classname="spoon.test.intercession.OneCanCallSetterWithNullParameterizedTest" time="0"/>
  <testcase name="testContract[public abstract spoon.reflect.code.CtIf spoon.reflect.code.CtIf.setThenStatement(spoon.reflect.code.CtStatement)]" classname="spoon.test.intercession.OneCanCallSetterWithNullParameterizedTest" time="0"/>
  <testcase name="testContract[public abstract spoon.reflect.reference.CtActualTypeContainer spoon.reflect.code.CtInvocation.addActualTypeArgument(spoon.reflect.reference.CtTypeReference)]" classname="spoon.test.intercession.OneCanCallSetterWithNullParameterizedTest" time="0"/>
  <testcase name="testContract[public abstract spoon.reflect.code.CtJavaDoc spoon.reflect.code.CtJavaDoc.addTag(spoon.reflect.code.CtJavaDocTag)]" classname="spoon.test.intercession.OneCanCallSetterWithNullParameterizedTest" time="0"/>
  <testcase name="testContract[public abstract spoon.reflect.code.CtLambda spoon.reflect.code.CtLambda.setExpression(spoon.reflect.code.CtExpression)]" classname="spoon.test.intercession.OneCanCallSetterWithNullParameterizedTest" time="0"/>
  <testcase name="testContract[public abstract spoon.reflect.code.CtRHSReceiver spoon.reflect.code.CtLocalVariable.setAssignment(spoon.reflect.code.CtExpression)]" classname="spoon.test.intercession.OneCanCallSetterWithNullParameterizedTest" time="0.001"/>
  <testcase name="testContract[public abstract spoon.reflect.code.CtNewArray spoon.reflect.code.CtNewArray.addDimensionExpression(spoon.reflect.code.CtExpression)]" classname="spoon.test.intercession.OneCanCallSetterWithNullParameterizedTest" time="0"/>
  <testcase name="testContract[public abstract spoon.reflect.code.CtNewArray spoon.reflect.code.CtNewArray.addElement(spoon.reflect.code.CtExpression)]" classname="spoon.test.intercession.OneCanCallSetterWithNullParameterizedTest" time="0"/>
  <testcase name="testContract[public abstract spoon.reflect.reference.CtActualTypeContainer spoon.reflect.code.CtNewClass.addActualTypeArgument(spoon.reflect.reference.CtTypeReference)]" classname="spoon.test.intercession.OneCanCallSetterWithNullParameterizedTest" time="0"/>
  <testcase name="testContract[public abstract spoon.reflect.code.CtNewClass spoon.reflect.code.CtNewClass.setAnonymousClass(spoon.reflect.declaration.CtClass)]" classname="spoon.test.intercession.OneCanCallSetterWithNullParameterizedTest" time="0"/>
  <testcase name="testContract[public abstract spoon.reflect.code.CtRHSReceiver spoon.reflect.code.CtRHSReceiver.setAssignment(spoon.reflect.code.CtExpression)]" classname="spoon.test.intercession.OneCanCallSetterWithNullParameterizedTest" time="0"/>
  <testcase name="testContract[public abstract spoon.reflect.code.CtReturn spoon.reflect.code.CtReturn.setReturnedExpression(spoon.reflect.code.CtExpression)]" classname="spoon.test.intercession.OneCanCallSetterWithNullParameterizedTest" time="0.001"/>
  <testcase name="testContract[public abstract spoon.reflect.code.CtStatementList spoon.reflect.code.CtStatementList.addStatement(spoon.reflect.code.CtStatement)]" classname="spoon.test.intercession.OneCanCallSetterWithNullParameterizedTest" time="0"/>
  <testcase name="testContract[public abstract spoon.reflect.code.CtSwitch spoon.reflect.code.CtSwitch.setSelector(spoon.reflect.code.CtExpression)]" classname="spoon.test.intercession.OneCanCallSetterWithNullParameterizedTest" time="0"/>
  <testcase name="testContract[public abstract spoon.reflect.code.CtSwitch spoon.reflect.code.CtSwitch.addCase(spoon.reflect.code.CtCase)]" classname="spoon.test.intercession.OneCanCallSetterWithNullParameterizedTest" time="0"/>
  <testcase name="testContract[public abstract spoon.reflect.code.CtSynchronized spoon.reflect.code.CtSynchronized.setExpression(spoon.reflect.code.CtExpression)]" classname="spoon.test.intercession.OneCanCallSetterWithNullParameterizedTest" time="0"/>
  <testcase name="testContract[public abstract spoon.reflect.code.CtSynchronized spoon.reflect.code.CtSynchronized.setBlock(spoon.reflect.code.CtBlock)]" classname="spoon.test.intercession.OneCanCallSetterWithNullParameterizedTest" time="0"/>
  <testcase name="testContract[public abstract spoon.reflect.code.CtTargetedExpression spoon.reflect.code.CtTargetedExpression.setTarget(spoon.reflect.code.CtExpression)]" classname="spoon.test.intercession.OneCanCallSetterWithNullParameterizedTest" time="0"/>
  <testcase name="testContract[public abstract spoon.reflect.code.CtThrow spoon.reflect.code.CtThrow.setThrownExpression(spoon.reflect.code.CtExpression)]" classname="spoon.test.intercession.OneCanCallSetterWithNullParameterizedTest" time="0"/>
  <testcase name="testContract[public abstract spoon.reflect.code.CtTry spoon.reflect.code.CtTry.addCatcher(spoon.reflect.code.CtCatch)]" classname="spoon.test.intercession.OneCanCallSetterWithNullParameterizedTest" time="0"/>
  <testcase name="testContract[public abstract spoon.reflect.code.CtTry spoon.reflect.code.CtTry.setFinalizer(spoon.reflect.code.CtBlock)]" classname="spoon.test.intercession.OneCanCallSetterWithNullParameterizedTest" time="0"/>
  <testcase name="testContract[public abstract spoon.reflect.code.CtTryWithResource spoon.reflect.code.CtTryWithResource.addResource(spoon.reflect.code.CtLocalVariable)]" classname="spoon.test.intercession.OneCanCallSetterWithNullParameterizedTest" time="0"/>
  <testcase name="testContract[public abstract spoon.reflect.code.CtTypeAccess spoon.reflect.code.CtTypeAccess.setAccessedType(spoon.reflect.reference.CtTypeReference)]" classname="spoon.test.intercession.OneCanCallSetterWithNullParameterizedTest" time="0"/>
  <testcase name="testContract[public abstract spoon.reflect.declaration.CtTypedElement spoon.reflect.code.CtTypeAccess.setType(spoon.reflect.reference.CtTypeReference)]" classname="spoon.test.intercession.OneCanCallSetterWithNullParameterizedTest" time="0"/>
  <testcase name="testContract[public abstract spoon.reflect.code.CtUnaryOperator spoon.reflect.code.CtUnaryOperator.setOperand(spoon.reflect.code.CtExpression)]" classname="spoon.test.intercession.OneCanCallSetterWithNullParameterizedTest" time="0"/>
  <testcase name="testContract[public abstract spoon.reflect.code.CtVariableAccess spoon.reflect.code.CtVariableAccess.setVariable(spoon.reflect.reference.CtVariableReference)]" classname="spoon.test.intercession.OneCanCallSetterWithNullParameterizedTest" time="0"/>
  <testcase name="testContract[public abstract spoon.reflect.code.CtWhile spoon.reflect.code.CtWhile.setLoopingExpression(spoon.reflect.code.CtExpression)]" classname="spoon.test.intercession.OneCanCallSetterWithNullParameterizedTest" time="0"/>
  <testcase name="testContract[public abstract spoon.reflect.declaration.CtAnnotation spoon.reflect.declaration.CtAnnotation.setAnnotationType(spoon.reflect.reference.CtTypeReference)]" classname="spoon.test.intercession.OneCanCallSetterWithNullParameterizedTest" time="0"/>
  <testcase name="testContract[public abstract spoon.reflect.declaration.CtAnnotationMethod spoon.reflect.declaration.CtAnnotationMethod.setDefaultExpression(spoon.reflect.code.CtExpression)]" classname="spoon.test.intercession.OneCanCallSetterWithNullParameterizedTest" time="0"/>
  <testcase name="testContract[public abstract spoon.reflect.code.CtBodyHolder spoon.reflect.declaration.CtAnnotationMethod.setBody(spoon.reflect.code.CtStatement)]" classname="spoon.test.intercession.OneCanCallSetterWithNullParameterizedTest" time="0"/>
  <testcase name="testContract[public abstract spoon.reflect.declaration.CtType spoon.reflect.declaration.CtAnnotationType.addMethod(spoon.reflect.declaration.CtMethod)]" classname="spoon.test.intercession.OneCanCallSetterWithNullParameterizedTest" time="0"/>
  <testcase name="testContract[public abstract spoon.reflect.declaration.CtType spoon.reflect.declaration.CtAnnotationType.setSuperclass(spoon.reflect.reference.CtTypeReference)]" classname="spoon.test.intercession.OneCanCallSetterWithNullParameterizedTest" time="0"/>
  <testcase name="testContract[public abstract spoon.reflect.declaration.CtTypedElement spoon.reflect.declaration.CtAnonymousExecutable.setType(spoon.reflect.reference.CtTypeReference)]" classname="spoon.test.intercession.OneCanCallSetterWithNullParameterizedTest" time="0"/>
  <testcase name="testContract[public abstract spoon.reflect.declaration.CtExecutable spoon.reflect.declaration.CtAnonymousExecutable.addParameter(spoon.reflect.declaration.CtParameter)]" classname="spoon.test.intercession.OneCanCallSetterWithNullParameterizedTest" time="0"/>
  <testcase name="testContract[public abstract spoon.reflect.declaration.CtExecutable spoon.reflect.declaration.CtAnonymousExecutable.addThrownType(spoon.reflect.reference.CtTypeReference)]" classname="spoon.test.intercession.OneCanCallSetterWithNullParameterizedTest" time="0"/>
  <testcase name="testContract[public abstract spoon.reflect.declaration.CtClass spoon.reflect.declaration.CtClass.addAnonymousExecutable(spoon.reflect.declaration.CtAnonymousExecutable)]" classname="spoon.test.intercession.OneCanCallSetterWithNullParameterizedTest" time="0.001"/>
  <testcase name="testContract[public abstract spoon.reflect.declaration.CtClass spoon.reflect.declaration.CtClass.addConstructor(spoon.reflect.declaration.CtConstructor)]" classname="spoon.test.intercession.OneCanCallSetterWithNullParameterizedTest" time="0"/>
  <testcase name="testContract[public abstract spoon.reflect.declaration.CtCompilationUnit spoon.reflect.declaration.CtCompilationUnit.addDeclaredType(spoon.reflect.declaration.CtType)]" classname="spoon.test.intercession.OneCanCallSetterWithNullParameterizedTest" time="0"/>
  <testcase name="testContract[public abstract spoon.reflect.declaration.CtCompilationUnit spoon.reflect.declaration.CtCompilationUnit.addDeclaredTypeReference(spoon.reflect.reference.CtTypeReference)]" classname="spoon.test.intercession.OneCanCallSetterWithNullParameterizedTest" time="0"/>
  <testcase name="testContract[public abstract spoon.reflect.declaration.CtCompilationUnit spoon.reflect.declaration.CtCompilationUnit.setDeclaredModule(spoon.reflect.declaration.CtModule)]" classname="spoon.test.intercession.OneCanCallSetterWithNullParameterizedTest" time="0"/>
  <testcase name="testContract[public abstract spoon.reflect.declaration.CtCompilationUnit spoon.reflect.declaration.CtCompilationUnit.setDeclaredModuleReference(spoon.reflect.reference.CtModuleReference)]" classname="spoon.test.intercession.OneCanCallSetterWithNullParameterizedTest" time="0"/>
  <testcase name="testContract[public abstract spoon.reflect.declaration.CtCompilationUnit spoon.reflect.declaration.CtCompilationUnit.setDeclaredPackage(spoon.reflect.declaration.CtPackage)]" classname="spoon.test.intercession.OneCanCallSetterWithNullParameterizedTest" time="0"/>
  <testcase name="testContract[public abstract spoon.reflect.declaration.CtCompilationUnit spoon.reflect.declaration.CtCompilationUnit.setPackageDeclaration(spoon.reflect.declaration.CtPackageDeclaration)]" classname="spoon.test.intercession.OneCanCallSetterWithNullParameterizedTest" time="0.001"/>
  <testcase name="testContract[public abstract spoon.reflect.declaration.CtElement spoon.reflect.declaration.CtCompilationUnit.setParent(spoon.reflect.declaration.CtElement)]" classname="spoon.test.intercession.OneCanCallSetterWithNullParameterizedTest" time="0"/>
  <testcase name="testContract[public abstract spoon.reflect.declaration.CtTypedElement spoon.reflect.declaration.CtConstructor.setType(spoon.reflect.reference.CtTypeReference)]" classname="spoon.test.intercession.OneCanCallSetterWithNullParameterizedTest" time="0"/>
  <testcase name="testContract[public abstract spoon.reflect.declaration.CtElement spoon.reflect.declaration.CtElement.addAnnotation(spoon.reflect.declaration.CtAnnotation)]" classname="spoon.test.intercession.OneCanCallSetterWithNullParameterizedTest" time="0"/>
  <testcase name="testContract[public abstract spoon.reflect.declaration.CtElement spoon.reflect.declaration.CtElement.setParent(spoon.reflect.declaration.CtElement)]" classname="spoon.test.intercession.OneCanCallSetterWithNullParameterizedTest" time="0"/>
  <testcase name="testContract[public abstract spoon.reflect.declaration.CtElement spoon.reflect.declaration.CtElement.addComment(spoon.reflect.code.CtComment)]" classname="spoon.test.intercession.OneCanCallSetterWithNullParameterizedTest" time="0"/>
  <testcase name="testContract[public abstract spoon.reflect.declaration.CtEnum spoon.reflect.declaration.CtEnum.addEnumValue(spoon.reflect.declaration.CtEnumValue)]" classname="spoon.test.intercession.OneCanCallSetterWithNullParameterizedTest" time="0"/>
  <testcase name="testContract[public abstract spoon.reflect.declaration.CtType spoon.reflect.declaration.CtEnum.setSuperclass(spoon.reflect.reference.CtTypeReference)]" classname="spoon.test.intercession.OneCanCallSetterWithNullParameterizedTest" time="0"/>
  <testcase name="testContract[public abstract spoon.reflect.code.CtRHSReceiver spoon.reflect.declaration.CtEnumValue.setAssignment(spoon.reflect.code.CtExpression)]" classname="spoon.test.intercession.OneCanCallSetterWithNullParameterizedTest" time="0.001"/>
  <testcase name="testContract[public abstract spoon.reflect.declaration.CtExecutable spoon.reflect.declaration.CtExecutable.addParameter(spoon.reflect.declaration.CtParameter)]" classname="spoon.test.intercession.OneCanCallSetterWithNullParameterizedTest" time="0"/>
  <testcase name="testContract[public abstract spoon.reflect.declaration.CtExecutable spoon.reflect.declaration.CtExecutable.addThrownType(spoon.reflect.reference.CtTypeReference)]" classname="spoon.test.intercession.OneCanCallSetterWithNullParameterizedTest" time="0"/>
  <testcase name="testContract[public abstract spoon.reflect.code.CtRHSReceiver spoon.reflect.declaration.CtField.setAssignment(spoon.reflect.code.CtExpression)]" classname="spoon.test.intercession.OneCanCallSetterWithNullParameterizedTest" time="0"/>
  <testcase name="testContract[public abstract spoon.reflect.declaration.CtFormalTypeDeclarer spoon.reflect.declaration.CtFormalTypeDeclarer.addFormalCtTypeParameter(spoon.reflect.declaration.CtTypeParameter)]" classname="spoon.test.intercession.OneCanCallSetterWithNullParameterizedTest" time="0"/>
  <testcase name="testContract[public abstract spoon.reflect.declaration.CtImport spoon.reflect.declaration.CtImport.setReference(spoon.reflect.reference.CtReference)]" classname="spoon.test.intercession.OneCanCallSetterWithNullParameterizedTest" time="0.001"/>
  <testcase name="testContract[public abstract spoon.reflect.declaration.CtType spoon.reflect.declaration.CtInterface.setSuperclass(spoon.reflect.reference.CtTypeReference)]" classname="spoon.test.intercession.OneCanCallSetterWithNullParameterizedTest" time="0"/>
  <testcase name="testContract[public abstract spoon.reflect.declaration.CtModule spoon.reflect.declaration.CtModule.addModuleDirective(spoon.reflect.declaration.CtModuleDirective)]" classname="spoon.test.intercession.OneCanCallSetterWithNullParameterizedTest" time="0"/>
  <testcase name="testContract[public abstract spoon.reflect.declaration.CtModule spoon.reflect.declaration.CtModule.addUsedService(spoon.reflect.declaration.CtUsedService)]" classname="spoon.test.intercession.OneCanCallSetterWithNullParameterizedTest" time="0"/>
  <testcase name="testContract[public abstract spoon.reflect.declaration.CtModule spoon.reflect.declaration.CtModule.addExportedPackage(spoon.reflect.declaration.CtPackageExport)]" classname="spoon.test.intercession.OneCanCallSetterWithNullParameterizedTest" time="0"/>
  <testcase name="testContract[public abstract spoon.reflect.declaration.CtModule spoon.reflect.declaration.CtModule.addOpenedPackage(spoon.reflect.declaration.CtPackageExport)]" classname="spoon.test.intercession.OneCanCallSetterWithNullParameterizedTest" time="0"/>
  <testcase name="testContract[public abstract spoon.reflect.declaration.CtModule spoon.reflect.declaration.CtModule.addRequiredModule(spoon.reflect.declaration.CtModuleRequirement)]" classname="spoon.test.intercession.OneCanCallSetterWithNullParameterizedTest" time="0"/>
  <testcase name="testContract[public abstract spoon.reflect.declaration.CtModule spoon.reflect.declaration.CtModule.addProvidedService(spoon.reflect.declaration.CtProvidedService)]" classname="spoon.test.intercession.OneCanCallSetterWithNullParameterizedTest" time="0"/>
  <testcase name="testContract[public abstract spoon.reflect.declaration.CtModule spoon.reflect.declaration.CtModule.setRootPackage(spoon.reflect.declaration.CtPackage)]" classname="spoon.test.intercession.OneCanCallSetterWithNullParameterizedTest" time="0"/>
  <testcase name="testContract[public abstract spoon.reflect.declaration.CtModuleRequirement spoon.reflect.declaration.CtModuleRequirement.setModuleReference(spoon.reflect.reference.CtModuleReference)]" classname="spoon.test.intercession.OneCanCallSetterWithNullParameterizedTest" time="0"/>
  <testcase name="testContract[public abstract spoon.reflect.declaration.CtMultiTypedElement spoon.reflect.declaration.CtMultiTypedElement.addMultiType(spoon.reflect.reference.CtTypeReference)]" classname="spoon.test.intercession.OneCanCallSetterWithNullParameterizedTest" time="0"/>
  <testcase name="testContract[public abstract spoon.reflect.declaration.CtPackage spoon.reflect.declaration.CtPackage.addType(spoon.reflect.declaration.CtType)]" classname="spoon.test.intercession.OneCanCallSetterWithNullParameterizedTest" time="0"/>
  <testcase name="testContract[public abstract spoon.reflect.declaration.CtPackage spoon.reflect.declaration.CtPackage.addPackage(spoon.reflect.declaration.CtPackage)]" classname="spoon.test.intercession.OneCanCallSetterWithNullParameterizedTest" time="0.001"/>
  <testcase name="testContract[public abstract spoon.reflect.declaration.CtPackageDeclaration spoon.reflect.declaration.CtPackageDeclaration.setReference(spoon.reflect.reference.CtPackageReference)]" classname="spoon.test.intercession.OneCanCallSetterWithNullParameterizedTest" time="0"/>
  <testcase name="testContract[public abstract spoon.reflect.declaration.CtPackageExport spoon.reflect.declaration.CtPackageExport.setPackageReference(spoon.reflect.reference.CtPackageReference)]" classname="spoon.test.intercession.OneCanCallSetterWithNullParameterizedTest" time="0"/>
  <testcase name="testContract[public abstract spoon.reflect.declaration.CtPackageExport spoon.reflect.declaration.CtPackageExport.addTargetExport(spoon.reflect.reference.CtModuleReference)]" classname="spoon.test.intercession.OneCanCallSetterWithNullParameterizedTest" time="0"/>
  <testcase name="testContract[public abstract spoon.reflect.declaration.CtVariable spoon.reflect.declaration.CtParameter.setDefaultExpression(spoon.reflect.code.CtExpression)]" classname="spoon.test.intercession.OneCanCallSetterWithNullParameterizedTest" time="0"/>
  <testcase name="testContract[public abstract spoon.reflect.declaration.CtProvidedService spoon.reflect.declaration.CtProvidedService.setServiceType(spoon.reflect.reference.CtTypeReference)]" classname="spoon.test.intercession.OneCanCallSetterWithNullParameterizedTest" time="0"/>
  <testcase name="testContract[public abstract spoon.reflect.declaration.CtProvidedService spoon.reflect.declaration.CtProvidedService.addImplementationType(spoon.reflect.reference.CtTypeReference)]" classname="spoon.test.intercession.OneCanCallSetterWithNullParameterizedTest" time="0"/>
  <testcase name="testContract[public abstract spoon.reflect.declaration.CtType spoon.reflect.declaration.CtType.addFieldAtTop(spoon.reflect.declaration.CtField)]" classname="spoon.test.intercession.OneCanCallSetterWithNullParameterizedTest" time="0.001"/>
  <testcase name="testContract[public abstract spoon.reflect.declaration.CtType spoon.reflect.declaration.CtType.addField(spoon.reflect.declaration.CtField)]" classname="spoon.test.intercession.OneCanCallSetterWithNullParameterizedTest" time="0"/>
  <testcase name="testContract[public abstract spoon.reflect.declaration.CtType spoon.reflect.declaration.CtType.addNestedType(spoon.reflect.declaration.CtType)]" classname="spoon.test.intercession.OneCanCallSetterWithNullParameterizedTest" time="0"/>
  <testcase name="testContract[public abstract spoon.reflect.declaration.CtType spoon.reflect.declaration.CtType.addMethod(spoon.reflect.declaration.CtMethod)]" classname="spoon.test.intercession.OneCanCallSetterWithNullParameterizedTest" time="0"/>
  <testcase name="testContract[public abstract spoon.reflect.declaration.CtType spoon.reflect.declaration.CtType.setSuperclass(spoon.reflect.reference.CtTypeReference)]" classname="spoon.test.intercession.OneCanCallSetterWithNullParameterizedTest" time="0"/>
  <testcase name="testContract[public abstract spoon.reflect.declaration.CtType spoon.reflect.declaration.CtType.addSuperInterface(spoon.reflect.reference.CtTypeReference)]" classname="spoon.test.intercession.OneCanCallSetterWithNullParameterizedTest" time="0"/>
  <testcase name="testContract[public abstract spoon.reflect.declaration.CtType spoon.reflect.declaration.CtType.addTypeMember(spoon.reflect.declaration.CtTypeMember)]" classname="spoon.test.intercession.OneCanCallSetterWithNullParameterizedTest" time="0"/>
  <testcase name="testContract[public abstract spoon.reflect.declaration.CtType spoon.reflect.declaration.CtTypeParameter.addSuperInterface(spoon.reflect.reference.CtTypeReference)]" classname="spoon.test.intercession.OneCanCallSetterWithNullParameterizedTest" time="0"/>
  <testcase name="testContract[public abstract spoon.reflect.declaration.CtType spoon.reflect.declaration.CtTypeParameter.addMethod(spoon.reflect.declaration.CtMethod)]" classname="spoon.test.intercession.OneCanCallSetterWithNullParameterizedTest" time="0"/>
  <testcase name="testContract[public abstract spoon.reflect.declaration.CtType spoon.reflect.declaration.CtTypeParameter.addNestedType(spoon.reflect.declaration.CtType)]" classname="spoon.test.intercession.OneCanCallSetterWithNullParameterizedTest" time="0"/>
  <testcase name="testContract[public abstract spoon.reflect.declaration.CtType spoon.reflect.declaration.CtTypeParameter.addFieldAtTop(spoon.reflect.declaration.CtField)]" classname="spoon.test.intercession.OneCanCallSetterWithNullParameterizedTest" time="0"/>
  <testcase name="testContract[public abstract spoon.reflect.declaration.CtTypedElement spoon.reflect.declaration.CtTypedElement.setType(spoon.reflect.reference.CtTypeReference)]" classname="spoon.test.intercession.OneCanCallSetterWithNullParameterizedTest" time="0"/>
  <testcase name="testContract[public abstract spoon.reflect.declaration.CtUsedService spoon.reflect.declaration.CtUsedService.setServiceType(spoon.reflect.reference.CtTypeReference)]" classname="spoon.test.intercession.OneCanCallSetterWithNullParameterizedTest" time="0"/>
  <testcase name="testContract[public abstract spoon.reflect.declaration.CtVariable spoon.reflect.declaration.CtVariable.setDefaultExpression(spoon.reflect.code.CtExpression)]" classname="spoon.test.intercession.OneCanCallSetterWithNullParameterizedTest" time="0.001"/>
  <testcase name="testContract[public abstract spoon.reflect.reference.CtActualTypeContainer spoon.reflect.reference.CtActualTypeContainer.addActualTypeArgument(spoon.reflect.reference.CtTypeReference)]" classname="spoon.test.intercession.OneCanCallSetterWithNullParameterizedTest" time="0"/>
  <testcase name="testContract[public abstract spoon.reflect.reference.CtArrayTypeReference spoon.reflect.reference.CtArrayTypeReference.setComponentType(spoon.reflect.reference.CtTypeReference)]" classname="spoon.test.intercession.OneCanCallSetterWithNullParameterizedTest" time="0"/>
  <testcase name="testContract[public abstract spoon.reflect.reference.CtExecutableReference spoon.reflect.reference.CtExecutableReference.setDeclaringType(spoon.reflect.reference.CtTypeReference)]" classname="spoon.test.intercession.OneCanCallSetterWithNullParameterizedTest" time="0"/>
  <testcase name="testContract[public abstract spoon.reflect.reference.CtExecutableReference spoon.reflect.reference.CtExecutableReference.setType(spoon.reflect.reference.CtTypeReference)]" classname="spoon.test.intercession.OneCanCallSetterWithNullParameterizedTest" time="0"/>
  <testcase name="testContract[public abstract spoon.reflect.reference.CtFieldReference spoon.reflect.reference.CtFieldReference.setDeclaringType(spoon.reflect.reference.CtTypeReference)]" classname="spoon.test.intercession.OneCanCallSetterWithNullParameterizedTest" time="0"/>
  <testcase name="testContract[public abstract spoon.reflect.reference.CtIntersectionTypeReference spoon.reflect.reference.CtIntersectionTypeReference.addBound(spoon.reflect.reference.CtTypeReference)]" classname="spoon.test.intercession.OneCanCallSetterWithNullParameterizedTest" time="0"/>
  <testcase name="testContract[public abstract spoon.reflect.reference.CtTypeMemberWildcardImportReference spoon.reflect.reference.CtTypeMemberWildcardImportReference.setTypeReference(spoon.reflect.reference.CtTypeReference)]" classname="spoon.test.intercession.OneCanCallSetterWithNullParameterizedTest" time="0"/>
  <testcase name="testContract[public abstract spoon.reflect.declaration.CtElement spoon.reflect.reference.CtTypeMemberWildcardImportReference.addAnnotation(spoon.reflect.declaration.CtAnnotation)]" classname="spoon.test.intercession.OneCanCallSetterWithNullParameterizedTest" time="0"/>
  <testcase name="testContract[public abstract spoon.reflect.reference.CtTypeReference spoon.reflect.reference.CtTypeReference.setDeclaringType(spoon.reflect.reference.CtTypeReference)]" classname="spoon.test.intercession.OneCanCallSetterWithNullParameterizedTest" time="0"/>
  <testcase name="testContract[public abstract spoon.reflect.reference.CtTypeReference spoon.reflect.reference.CtTypeReference.setPackage(spoon.reflect.reference.CtPackageReference)]" classname="spoon.test.intercession.OneCanCallSetterWithNullParameterizedTest" time="0"/>
  <testcase name="testContract[public abstract spoon.reflect.reference.CtVariableReference spoon.reflect.reference.CtVariableReference.setType(spoon.reflect.reference.CtTypeReference)]" classname="spoon.test.intercession.OneCanCallSetterWithNullParameterizedTest" time="0"/>
  <testcase name="testContract[public abstract spoon.reflect.reference.CtWildcardReference spoon.reflect.reference.CtWildcardReference.setBoundingType(spoon.reflect.reference.CtTypeReference)]" classname="spoon.test.intercession.OneCanCallSetterWithNullParameterizedTest" time="0"/>
</testsuite>